{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/errors/Custom.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Custom\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User defined a.k.a. Custom errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There are situations not covered by built-in errors. For example, if your program reads text from a file, and expects certain content in that text but cannot find it, you might want to raise a specific error.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto lets you define custom errors, which extend the built-in \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 81\n        }, this), \" enumeration of errors.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Here is an example:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: String.raw`define BadContentError as enumerated Error with symbols:\n    MISSING_PRODUCT with \"Expecting 'product' in file!\" as text\n    MISSING_PRICE with \"Could not find 'price' for product!\" as text`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"User defined errors simply accept a \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 52\n        }, this), \" attribute, which can be displayed or logged.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Once user errors are defined, they can be \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"raised\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 58\n        }, this), \" using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"raise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 82\n        }, this), \" keyword:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 16,\n        sampleUrl: \"samples/errors/custom.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/errors/Custom.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","String","raw","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,QAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAGH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAMH;AAAA,qGAAoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApE;AAAA;AAAA;AAAA;AAAA;AAAA,cANG,eAOH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPG,eAQH;AAAA,kBAAMC,MAAM,CAACC,GAAI;AAC7B;AACA;AAFY;AAAA;AAAA;AAAA;AAAA,cARG,eAYH;AAAA,wEAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,cAZG,eAaH;AAAA,8EAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA7C,8BAAqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAArE;AAAA;AAAA;AAAA;AAAA;AAAA,cAbG,eAcH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,2BAAlE;AAA8F,QAAA,QAAQ,EAAE;AAAxG,SAAoBN,aAAa,CAACO,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAdG;AAAA,oBAAP;AAgBH;;AAvByB;;AA2B9B,eAAe,IAAIN,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Custom\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>User defined a.k.a. Custom errors</h2>\n            <p>There are situations not covered by built-in errors. For example, if your program reads text from a file,\n                and expects certain content in that text but cannot find it, you might want to raise a specific\n                error.</p>\n            <p>Prompto lets you define custom errors, which extend the built-in <i>Error</i> enumeration of errors.</p>\n            <p>Here is an example:</p>\n            <pre>{String.raw`define BadContentError as enumerated Error with symbols:\n    MISSING_PRODUCT with \"Expecting 'product' in file!\" as text\n    MISSING_PRICE with \"Could not find 'price' for product!\" as text`}\n</pre>\n            <p>User defined errors simply accept a <i>text</i> attribute, which can be displayed or logged.</p>\n            <p>Once user errors are defined, they can be <i>raised</i> using the <code>raise</code> keyword:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={16} sampleUrl=\"samples/errors/custom.pec\" runnable={true}/>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}