{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/TupleType.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Tuple\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Tuple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The Tuple type is a technical type used to keep together 0 or more items of different types.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 108\n        }, this), \"The items themselves can be of any type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 57\n        }, this), \"A Tuple type is declared as follows.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"(,) -> the type Tuple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"A Tuple literal must be enclosed in parenthesis '(' and ')', the items being separated by a comma ','.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 122\n        }, this), \"For Tuple comprising 0 or 1 item, because the above could be interpreted as a parenthesized expression, a comma ',' must precede the right parenthesis.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`(,) -> the empty Tuple\n(3.14,) -> a Tuple of 1 item\n(\"Paris\", '2015-06-12', -113.87) -> a Tuple of 3 items`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" Items in a Tuple can be accessed individually using their position.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 88\n        }, this), \"Positions start at 1 and end at the list length.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`a = (\"Paris\", '2015-06-12', -113.87) -> assign a Tuple of 3 items to variable 'a'\na[1] -> get item at position 1 in Tuple referenced by variable 'a' i.e. the Text \"Paris\"`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Tuple attributes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tuple values have the following attributes:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 21\n          }, this), \": returns an Integer equal to the number of items in the tuple\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n          sampleUrl: \"samples/types/tuple/count.pec\",\n          runnable: true\n        }, PromptoPlayer.nextKey(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/TupleType.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","String","raw","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,OAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA,gIAA+F;AAAA;AAAA;AAAA;AAAA,gBAA/F,2DAC4C;AAAA;AAAA;AAAA;AAAA,gBAD5C;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAMC;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAND,eAOC;AAAA,0IAAyG;AAAA;AAAA;AAAA;AAAA,gBAAzG;AAAA;AAAA;AAAA;AAAA;AAAA,cAPD,eASC;AAAA,+BAAK;AAAA,oBAAOC,MAAM,CAACC,GAAI;AACvC;AACA;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cATD,eAYC;AAAA,wGAAuE;AAAA;AAAA;AAAA;AAAA,gBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA,cAZD,eAcC;AAAA,+BAAK;AAAA,oBAAOD,MAAM,CAACC,GAAI;AACvC;AADqB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAdD,eAgBH;AAAA;AAAA;AAAA;AAAA,cAhBG,eAkBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBG,eAqBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBG,eAsBH;AAAA,gCACI;AAAA,kCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,aAAD;AAA6C,UAAA,SAAS,EAAC,+BAAvD;AAAuF,UAAA,QAAQ,EAAE;AAAjG,WAAoBP,aAAa,CAACQ,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBG,eA0BH;AAAA;AAAA;AAAA;AAAA,cA1BG;AAAA,oBAAP;AA4BH;;AAnCyB;;AAuC9B,eAAe,IAAIN,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Tuple\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Tuple</h2>\n\n            <p>The Tuple type is a technical type used to keep together 0 or more items of different types.<br/>\n                The items themselves can be of any type.<br/>\n                A Tuple type is declared as follows.</p>\n                <pre><code>(,) -> the type Tuple</code></pre>\n                <p>A Tuple literal must be enclosed in parenthesis '(' and ')', the items being separated by a comma ','.<br/>\n                For Tuple comprising 0 or 1 item, because the above could be interpreted as a parenthesized expression, a comma ',' must precede the right parenthesis.</p>\n                <pre><code>{String.raw`(,) -> the empty Tuple\n(3.14,) -> a Tuple of 1 item\n(\"Paris\", '2015-06-12', -113.87) -> a Tuple of 3 items`}</code></pre>\n                <p> Items in a Tuple can be accessed individually using their position.<br/>\n                    Positions start at 1 and end at the list length.</p>\n                <pre><code>{String.raw`a = (\"Paris\", '2015-06-12', -113.87) -> assign a Tuple of 3 items to variable 'a'\na[1] -> get item at position 1 in Tuple referenced by variable 'a' i.e. the Text \"Paris\"`}</code></pre>\n            <br/>\n\n            <h3>\n                Tuple attributes\n            </h3>\n            <p>Tuple values have the following attributes:</p>\n            <ul>\n                <li><code>count</code>: returns an Integer equal to the number of items in the tuple</li>\n                <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/tuple/count.pec\" runnable={true}/>\n            </ul>\n            <br/>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}