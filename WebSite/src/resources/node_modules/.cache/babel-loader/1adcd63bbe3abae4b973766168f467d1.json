{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/methods/Overloading.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Overloading\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Overloading methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports method \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overloading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 40\n        }, this), \", where 2 methods have the same name but different parameters. \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"When a method is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overloaded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 33\n        }, this), \", Prompto selects the most appropriate one based on the best match of the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"proposed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }, this), \" parameters with respect to the required arguments. This matching is performed using the sequence of the parameters in the method call.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In the below example, the 2 methods have the same name, but a different number of arguments:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/methods/overloaded-count.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Method \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overloading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 23\n        }, this), \" also works with different argument types.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Each \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overloaded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this), \" method provides a behavior specific to its argument types.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"When a method is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overloaded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 33\n        }, this), \", Prompto selects the most appropriate one at runtime i.e. the one for which the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 27\n        }, this), \" parameters best match the required method arguments, based on the sequence of the method call. This is different from many languages such as Java, C# or C++, where the resolution is decided at compile time. \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/methods/overloaded-type.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/methods/Overloading.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,aAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA,4DAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAIH;AAAA,qDAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApB,6FACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADR;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAOH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPG,eAQH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,sCAAlE;AAAyG,QAAA,QAAQ,EAAE;AAAnH,SAAoBL,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cARG,eASH;AAAA;AAAA;AAAA;AAAA,cATG,eAWH;AAAA,2CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA,cAXG,eAYH;AAAA,yCAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cAZG,eAaH;AAAA,qDAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApB,oGACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADd;AAAA;AAAA;AAAA;AAAA;AAAA,cAbG,eAiBH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,qCAAlE;AAAwG,QAAA,QAAQ,EAAE;AAAlH,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAjBG;AAAA,oBAAP;AAmBH;;AA1ByB;;AA8B9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Overloading\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Overloading methods</h2>\n\n            <p>Prompto supports method <i>overloading</i>, where 2 methods have the same name but different parameters. </p>\n            <p>When a method is <i>overloaded</i>, Prompto selects the most appropriate one based on the best match of\n                the <i>proposed</i> parameters with respect to the required arguments. This matching is performed using the sequence of the parameters\n                in the method call.</p>\n            <p>In the below example, the 2 methods have the same name, but a different number of arguments:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/methods/overloaded-count.pec\" runnable={true}/>\n            <p/>\n\n            <p>Method <i>overloading</i> also works with different argument types.</p>\n            <p>Each <i>overloaded</i> method provides a behavior specific to its argument types.</p>\n            <p>When a method is <i>overloaded</i>, Prompto selects the most appropriate one at runtime i.e. the one for\n                which the <i>actual</i> parameters best match the required method arguments,\n                based on the sequence of the method call. This is different from many languages such as Java, C# or C++,\n                where the resolution is decided at compile time. </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/methods/overloaded-type.pec\" runnable={true}/>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}