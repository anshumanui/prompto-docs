{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/Methods.js\";\nimport React from 'react';\nimport Definition from \"./methods/Definition\";\nimport Calling from \"./methods/Calling\";\nimport Arguments from \"./methods/Arguments\";\nimport Overloading from \"./methods/Overloading\";\nimport Overriding from \"./methods/Overriding\";\nimport Getters from \"./methods/Getters\";\nimport Setters from \"./methods/Setters\";\nimport Operators from \"./methods/Operators\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Methods\", [Definition, Calling, Arguments, Overloading, Overriding, Getters, Setters, Operators]);\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports both \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"global\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 38\n        }, this), \" methods and \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 64\n        }, this), \" methods.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"In this section, we describe \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 45\n        }, this), \" methods only, \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"global\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 75\n        }, this), \" methods are described in the principal \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Methods\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 128\n        }, this), \" section.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 16\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"global\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 36\n        }, this), \" methods have a lot in common, so most of the information is the same for both type of methods, and may seem redundant.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There are however some differences:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The current object i.e. \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"this\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 48\n            }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"self\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 69\n            }, this), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Category methods are executed in the context of a category instance. This instance can be addressed using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"this\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 134\n            }, this), \"  or \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"self\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 156\n            }, this), \" keyword.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The current object is \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"implicit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 46\n            }, this), \", there is no need to pass it as a parameter.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Method \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"overriding\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 31\n            }, this), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Derived categories inherit the methods defined in their parents. Prompto supports re-defining these methods in derived categories. This is called method \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"overriding\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 177\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Abstract methods:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Abstract methods are only supported by abstract categories. Concrete derived categories must provide an implementation of inherited abstract methods.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/Methods.js"],"names":["React","Definition","Calling","Arguments","Overloading","Overriding","Getters","Setters","Operators","Topic","ThisTopic","constructor","renderContent","topicSelected"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,SAAN,EAAiB,CAAEV,UAAF,EAAcC,OAAd,EAAuBC,SAAvB,EAAkCC,WAAlC,EAA+CC,UAA/C,EAA2DC,OAA3D,EAAoEC,OAApE,EAA6EC,SAA7E,CAAjB;AACH;;AAEDI,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA,0DAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAzB,gCAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAKH;AAAA,iEAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhC,kCAA8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA9D,2DAAmH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAnH;AAAA;AAAA;AAAA;AAAA;AAAA,cALG,eAMH;AAAA;AAAA;AAAA;AAAA,cANG,eAOH;AAAA,gCAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,wBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cAPG,eAQH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARG,eASH;AAAA,gCACI;AAAA,kCAAI;AAAA,gEAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA3B,uBAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,eACI;AAAA,sJAAiH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAjH,wBAAuI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAvI;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,8DAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAA,kCAAI;AAAA,+CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,eACI;AAAA,iMAA4J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA5J;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAQI;AAAA,kCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATG;AAAA,oBAAP;AAuBH;;AA9ByB;;AAkC9B,eAAe,IAAIH,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Definition from \"./methods/Definition\";\nimport Calling from \"./methods/Calling\";\nimport Arguments from \"./methods/Arguments\";\nimport Overloading from \"./methods/Overloading\";\nimport Overriding from \"./methods/Overriding\";\nimport Getters from \"./methods/Getters\";\nimport Setters from \"./methods/Setters\";\nimport Operators from \"./methods/Operators\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Methods\", [ Definition, Calling, Arguments, Overloading, Overriding, Getters, Setters, Operators ]);\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Methods</h2>\n\n            <p>Prompto supports both <i>global</i> methods and <i>category</i> methods.</p>\n            <p>In this section, we describe <i>category</i> methods only, <i>global</i> methods are described in the principal <i>Methods</i> section.</p>\n            <p/>\n            <p><i>Category</i> and <i>global</i> methods have a lot in common, so most of the information is the same for both type of methods, and may seem redundant.</p>\n            <p>There are however some differences:</p>\n            <ul>\n                <li><p>The current object i.e. <code>this</code> or <code>self</code>:</p>\n                    <p>Category methods are executed in the context of a category instance. This instance can be addressed using the <code>this</code>  or <code>self</code> keyword.</p>\n                    <p>The current object is <i>implicit</i>, there is no need to pass it as a parameter.</p>\n                </li>\n                <li><p>Method <i>overriding</i>:</p>\n                    <p>Derived categories inherit the methods defined in their parents. Prompto supports re-defining these methods in derived categories. This is called method <i>overriding</i>.</p>\n                </li>\n                <li><p>Abstract methods:</p>\n                    <p>Abstract methods are only supported by abstract categories. Concrete derived categories must provide an implementation of inherited abstract methods.</p>\n                </li>\n            </ul>\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}