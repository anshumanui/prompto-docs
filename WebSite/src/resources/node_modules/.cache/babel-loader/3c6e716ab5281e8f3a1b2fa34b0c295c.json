{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/methods/Overloading.js\";\nimport React from 'react';\nimport Topic from \"../../../../content/Topic\";\nimport PromptoPlayer from \"../../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Overloading\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Overloading category methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports category method \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overloading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 49\n        }, this), \", where 2 methods of the same category have the same name but different parameters.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"When a category method is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overloaded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 42\n        }, this), \", Prompto selects the most appropriate one based on the best match of the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"proposed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 30\n        }, this), \" parameters with respect to the required arguments. This matching is performed using the sequence of the parameters in the method call.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In the below example, the 2 methods have the same name, but a different number of arguments:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 16,\n        sampleUrl: \"samples/categories/methods/overloading-count.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Category method \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overloading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 32\n        }, this), \" also works with different argument types.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Each \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overridden\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), \" method provides a behavior specific to its argument types.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 16,\n        sampleUrl: \"samples/categories/methods/overloading-type.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"When a category method is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"overloaded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 42\n        }, this), \", Prompto selects the most appropriate one at runtime i.e. the one for which the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 35\n        }, this), \" parameters best match the required method arguments, based on the sequence of the method call. This is different from many OOP languages such as Java, C# or C++, where the resolution is decided at compile time. \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/methods/Overloading.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,aAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA,qEAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAMH;AAAA,8DAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA7B,6FACiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADjB;AAAA;AAAA;AAAA;AAAA;AAAA,cANG,eAUH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVG,eAWH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,kDAAlE;AAAqH,QAAA,QAAQ,EAAE;AAA/H,SAAoBJ,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAXG,eAYH;AAAA;AAAA;AAAA;AAAA,cAZG,eAcH;AAAA,oDAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAdG,eAeH;AAAA,yCAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cAfG,eAgBH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,iDAAlE;AAAoH,QAAA,QAAQ,EAAE;AAA9H,SAAoBL,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAhBG,eAiBH;AAAA;AAAA;AAAA;AAAA,cAjBG,eAmBH;AAAA,8DAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA7B,oGACsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBG;AAAA,oBAAP;AAyBH;;AAhCyB;;AAoC9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../../content/Topic\";\nimport PromptoPlayer from \"../../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Overloading\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Overloading category methods</h2>\n\n            <p>Prompto supports category method <i>overloading</i>, where 2 methods of the same category have the same\n                name but different parameters.</p>\n            <p>When a category method is <i>overloaded</i>, Prompto selects the most appropriate one based on the best\n                match of the <i>proposed</i> parameters\n                with respect to the required arguments. This matching is performed using the sequence of the parameters\n                in the method call.</p>\n            <p>In the below example, the 2 methods have the same name, but a different number of arguments:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={16} sampleUrl=\"samples/categories/methods/overloading-count.pec\" runnable={true}/>\n            <br/>\n\n            <p>Category method <i>overloading</i> also works with different argument types.</p>\n            <p>Each <i>overridden</i> method provides a behavior specific to its argument types.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={16} sampleUrl=\"samples/categories/methods/overloading-type.pec\" runnable={true}/>\n            <br/>\n\n            <p>When a category method is <i>overloaded</i>, Prompto selects the most appropriate one at runtime i.e. the\n                one for which the <i>actual</i> parameters best match the required method arguments,\n                based on the sequence of the method call. This is different from many OOP languages such as Java, C# or\n                C++,\n                where the resolution is decided at compile time. </p>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}