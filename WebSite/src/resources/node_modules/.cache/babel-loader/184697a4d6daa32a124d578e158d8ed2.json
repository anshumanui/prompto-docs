{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/Identifiers.js\";\nimport React from 'react';\nimport Topic from \"../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Identifiers\");\n  }\n\n  renderContent() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Identifiers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Many Prompto objects are uniquely identified by a built-in or user defined name: attributes, categories, methods, variables and so forth.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Type names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports both built-in types and user defined types.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 76\n        }, this), \"The name of a type must start with an uppercase letter, followed by 0 or more letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 28\n        }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"'A'..'Z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 42\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 21\n          }, this), \" is a valid type name\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"TEXT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 21\n          }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"not\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 42\n          }, this), \" a valid type name (it's a symbol)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 21\n          }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"not\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 42\n          }, this), \" a valid type name\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Attribute names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports attributes.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 44\n        }, this), \"The name of an attribute must start with a lowercase letter, followed by 0 or more letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 28\n        }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"'a'..'z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 42\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"dateOfBirth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }, this), \" is a valid attribute name\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"DateOfBirth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"not\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 49\n          }, this), \" a valid attribute name\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Variable names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports variables.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 43\n        }, this), \"The name of a variable must start with a lowercase letter, followed by 0 or more letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 28\n        }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"'a'..'z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 42\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"someItem\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this), \" is a valid variable name\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"SomeItem\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"not\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 46\n          }, this), \" a valid variable name\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Method names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports methods.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 41\n        }, this), \"The name of a variable must start with a letter, followed by 0 or more letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 116\n        }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"('a'..'z' | 'A'..'Z')('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 42\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"someMethod\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this), \" is a valid method name\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"SomeMethod\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this), \" is a valid method name\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"SOME_METHOD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"not\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 49\n          }, this), \" a valid method name\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Symbol names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports enumerations of both built-in types and user defined types.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 92\n        }, this), \"The name of an enumerated value is called a symbol. It must start with an uppercase letter, followed by 0 or more uppercase letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 65\n        }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"'A'..'Z' ('A'..'Z' | '0'..'9' | '_')*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 42\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"NORTH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this), \" is a valid symbol\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"North\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"not\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 43\n          }, this), \" a valid symbol\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/Identifiers.js"],"names":["React","Topic","ThisTopic","constructor","renderContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Topic from \"../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Identifiers\");\n    }\n\n    renderContent() {\n        return <>\n            <h2>Identifiers</h2>\n\n            <p>Many Prompto objects are uniquely identified by a built-in or user defined name: attributes, categories,\n                methods, variables and so forth.</p>\n\n            <h3>Type names</h3>\n\n            <p>Prompto supports both built-in types and user defined types.<br/>\n                The name of a type must start with an uppercase letter, followed by 0 or more letter, digit or\n                underscore.<br/>\n                The formal definition is <code>'A'..'Z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>Text</code> is a valid type name</li>\n                <li><code>TEXT</code> is <i>not</i> a valid type name (it's a symbol)</li>\n                <li><code>text</code> is <i>not</i> a valid type name</li>\n            </ul>\n            <p/>\n\n            <h3>Attribute names</h3>\n\n            <p>Prompto supports attributes.<br/>\n                The name of an attribute must start with a lowercase letter, followed by 0 or more letter, digit or\n                underscore.<br/>\n                The formal definition is <code>'a'..'z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>dateOfBirth</code> is a valid attribute name</li>\n                <li><code>DateOfBirth</code> is <i>not</i> a valid attribute name</li>\n            </ul>\n            <p/>\n\n            <h3>Variable names</h3>\n\n            <p>Prompto supports variables.<br/>\n                The name of a variable must start with a lowercase letter, followed by 0 or more letter, digit or\n                underscore.<br/>\n                The formal definition is <code>'a'..'z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>someItem</code> is a valid variable name</li>\n                <li><code>SomeItem</code> is <i>not</i> a valid variable name</li>\n            </ul>\n            <p/>\n\n            <h3>Method names</h3>\n\n            <p>Prompto supports methods.<br/>\n                The name of a variable must start with a letter, followed by 0 or more letter, digit or underscore.<br/>\n                The formal definition is <code>('a'..'z' | 'A'..'Z')('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>someMethod</code> is a valid method name</li>\n                <li><code>SomeMethod</code> is a valid method name</li>\n                <li><code>SOME_METHOD</code> is <i>not</i> a valid method name</li>\n            </ul>\n            <p/>\n\n            <h3>Symbol names</h3>\n\n            <p>Prompto supports enumerations of both built-in types and user defined types.<br/>\n                The name of an enumerated value is called a symbol. It must start with an uppercase letter, followed by\n                0 or more uppercase letter, digit or underscore.<br/>\n                The formal definition is <code>'A'..'Z' ('A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>NORTH</code> is a valid symbol</li>\n                <li><code>North</code> is <i>not</i> a valid symbol</li>\n            </ul>\n            <br/>\n\n\n        </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}