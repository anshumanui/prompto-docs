{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Multiply.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Multiply\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Multiply expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Multiply expressions are used to multiply 2 values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 67\n        }, this), \"A multiply expression is a code fragment which produces a value, whose type is determined by the values being subtracted, and which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 30\n        }, this), \"A multiply expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a * b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 52\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 71\n        }, this), \"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), \" operator is used because \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 61\n        }, this), \" being a letter, it can be used as a name, which would be confusing.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Multiplying Integer and Decimal values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Multiplying Integer and Decimal values returns an Integer value if both values are Integer, and a Decimal otherwise.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/expressions/multiply-number.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Multiplying Text or Character and Integer values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Multiplying Text or Character and Integer values returns a Text value, where the left-hand side is concatenated \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 30\n        }, this), \" times.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/multiply-text.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Multiplying Period and Integer values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Multiplying Period and Integer values returns a Period value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/multiply-period.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Multiplying List and Integer values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Multiplying List and Integer values returns a List value, where the left-hand side is added to itself \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 24\n        }, this), \" times. This is convenient to initialize large lists.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/multiply-list.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Multiplying user defined values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Prompto supports multiplying user defined values. See categories for details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Multiply.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,UAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA,uFAAsD;AAAA;AAAA;AAAA;AAAA,gBAAtD,iPAGiB;AAAA;AAAA;AAAA;AAAA,gBAHjB,sDAIuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJvC,oBAI0D;AAAA;AAAA;AAAA;AAAA,gBAJ1D,uBAKQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALR,6CAKgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALhD;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAYH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZG,eAeH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfG,eAkBH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,yCAAlE;AAA4G,QAAA,QAAQ,EAAE;AAAtH,SAAoBJ,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAlBG,eAmBH;AAAA;AAAA;AAAA;AAAA,cAnBG,eAqBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBG,eAwBH;AAAA,oJACiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBG,eA2BH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,uCAAvD;AAA+F,QAAA,QAAQ,EAAE;AAAzG,SAAoBL,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA3BG,eA4BH;AAAA;AAAA;AAAA;AAAA,cA5BG,eA8BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BG,eAiCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCG,eAmCH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,yCAAvD;AAAiG,QAAA,QAAQ,EAAE;AAA3G,SAAoBL,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAnCG,eAoCH;AAAA;AAAA;AAAA;AAAA,cApCG,eAsCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtCG,eAyCH;AAAA,0IACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX;AAAA;AAAA;AAAA;AAAA;AAAA,cAzCG,eA4CH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,uCAAvD;AAA+F,QAAA,QAAQ,EAAE;AAAzG,SAAoBL,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA5CG,eA6CH;AAAA;AAAA;AAAA;AAAA,cA7CG,eA+CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/CG,eAiDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjDG;AAAA,oBAAP;AAqDH;;AA5DyB;;AAgE9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Multiply\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Multiply expressions</h2>\n\n            <p>Multiply expressions are used to multiply 2 values.<br/>\n                A multiply expression is a code fragment which produces a value, whose type is determined by the values\n                being subtracted, and which can then be used as an input for other operations: print, write, method call\n                and so forth.<br/>\n                A multiply expression has the form <code>a * b</code>.<br/>\n                The <code>*</code> operator is used because <code>x</code> being a letter, it can be used as a name,\n                which would be confusing.\n            </p>\n            <h3>\n                Multiplying Integer and Decimal values\n            </h3>\n            <p>Multiplying Integer and Decimal values returns an Integer value if both values are Integer, and a Decimal\n                otherwise.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/expressions/multiply-number.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Multiplying Text or Character and Integer values\n            </h3>\n            <p>Multiplying Text or Character and Integer values returns a Text value, where the left-hand side is\n                concatenated <i>n</i> times.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/multiply-text.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Multiplying Period and Integer values\n            </h3>\n            <p>Multiplying Period and Integer values returns a Period value.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/multiply-period.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Multiplying List and Integer values\n            </h3>\n            <p>Multiplying List and Integer values returns a List value, where the left-hand side is added to\n                itself <i>n</i> times. This is convenient to initialize large lists.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/multiply-list.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Multiplying user defined values</h3>\n\n            <p>Prompto supports multiplying user defined values. See categories for details.</p>\n\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}