{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Sort.js\";\nimport React from 'react';\nimport SortNatural from \"./SortNatural\";\nimport SortCustom from \"./SortCustom\";\nimport SortAdvanced from \"./SortAdvanced\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Sort\", [SortNatural, SortCustom, SortAdvanced]);\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sort expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sort expressions are used to produce a sorted list from an existing collection.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 95\n        }, this), \"A Sort expression is a code fragment which produces a list, whose item type is the same as the item type of the collection being sorted, which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 113\n        }, this), \"A Sort expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"sorted \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"collection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 61\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 48\n        }, this), \"where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 23\n        }, this), \" is a collection value.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 69\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The type of the resulting value is always a list.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sorting backwards is done by inserting the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"descending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 59\n        }, this), \" keyword after the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"sorted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), \" one.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 45\n        }, this), \"In O and M dialects, the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"desc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 42\n        }, this), \" abbreviated keyword is preferred.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Sort.js"],"names":["React","SortNatural","SortCustom","SortAdvanced","Topic","ThisTopic","constructor","renderContent","topicSelected"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,MAAN,EAAc,CAACL,WAAD,EAAcC,UAAd,EAA0BC,YAA1B,CAAd;AACH;;AAEDI,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA,mHAAkF;AAAA;AAAA;AAAA;AAAA,gBAAlF,4PAGoG;AAAA;AAAA;AAAA;AAAA,gBAHpG,kDAImC;AAAA,6CAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJnC,yBAKU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALV,0CAKwD;AAAA;AAAA;AAAA;AAAA,gBALxD;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAWH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXG,eAYH;AAAA,+EAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA9C,sCACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADR,wBACgC;AAAA;AAAA;AAAA;AAAA,gBADhC,4CAE6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAF7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAZG;AAAA,oBAAP;AAiBH;;AAxByB;;AA4B9B,eAAe,IAAIH,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport SortNatural from \"./SortNatural\";\nimport SortCustom from \"./SortCustom\";\nimport SortAdvanced from \"./SortAdvanced\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Sort\", [SortNatural, SortCustom, SortAdvanced]);\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Sort expressions</h2>\n\n            <p>Sort expressions are used to produce a sorted list from an existing collection.<br/>\n                A Sort expression is a code fragment which produces a list, whose item type is the same as the item\n                type of the collection being sorted,\n                which can then be used as an input for other operations: print, write, method call and so forth.<br/>\n                A Sort expression has the form <code>sorted <i>collection</i></code>\n                where <code>collection</code> is a collection value.<br/>\n            </p>\n            <p>The type of the resulting value is always a list.</p>\n            <p>Sorting backwards is done by inserting the <code>descending</code> keyword after\n                the <code>sorted</code> one.<br/>\n                In O and M dialects, the <code>desc</code> abbreviated keyword is preferred.</p>\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}