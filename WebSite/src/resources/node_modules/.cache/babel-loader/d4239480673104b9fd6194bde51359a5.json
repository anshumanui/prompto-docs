{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/methods/declaring.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Declaring() {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Declaring methods\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A method is identified by its prototype, defined by its name and its accepted arguments.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A method is defined by declaring its prototype and optional return value, followed by the method statements.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The minimal prototype has the following form:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"uk-list uk-list-disc\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"In E dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"define \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"methodName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 9,\n            columnNumber: 48\n          }, this), \" as method doing:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"In O dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"methodName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 41\n          }, this), \"() \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"In M dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"def \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"methodName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 45\n          }, this), \"():\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Method names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A method name can be any valid identifier i.e. a word starting with a letter and followed by any number of letters or digits.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Method return types\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A Prompto method can return any number of values.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"If no value is returned, the return type is known as \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"Void\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 69\n      }, this), \" type.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"If a value is returned, the return type can be specified. When not specified, it is inferred by Prompto.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Specifying the return type is done as follows:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"uk-list uk-list-disc\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"In E dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"define \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"methodName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 48\n          }, this), \" as method returning \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 86\n          }, this), \" doing:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 35\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"In O dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Type method methodName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 41\n          }, this), \"() \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"In M dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"def \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"methodName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 45\n          }, this), \"() -> \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 68\n          }, this), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"where \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 28\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 22\n      }, this), \" is the name of an existing type.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"If more than one value is returned, the return type is \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"Tuple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 71\n      }, this), \". This can be convenient for quick development but should not be used for large scale applications, because Prompto does not infer the type of Tuple elements.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 3\n  }, this);\n}\n_c = Declaring;\n\nvar _c;\n\n$RefreshReg$(_c, \"Declaring\");","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/methods/declaring.js"],"names":["Declaring"],"mappings":";;AAAA,eAAe,SAASA,SAAT,GAAqB;AACnC,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFV,eAGU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHV,eAIU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJV,eAKU;AAAI,MAAA,SAAS,EAAC,sBAAd;AAAA,8BACI;AAAA,kDAAkB;AAAA,6CAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kDAAkB;AAAA,kCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAN;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kDAAkB;AAAA,0CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALV,eAWU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXV,eAYU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZV,eAcU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdV,eAeU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfV,eAgBU;AAAA,uFAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBV,eAiBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBV,eAkBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBV,eAmBU;AAAI,MAAA,SAAS,EAAC,sBAAd;AAAA,8BACI;AAAA,kDAAkB;AAAA,6CAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAb,wCAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kDAAkB;AAAA,kCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAN;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kDAAkB;AAAA,0CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAV,yBAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBV,eAwBU;AAAA,wCAAS;AAAA,+BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cAAT;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBV,eAyBU;AAAA,yFAA0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA1D;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBV;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA8BA;KA/BuBA,S","sourcesContent":["export default function Declaring() {\n\treturn (\n\t\t<li>\n\t\t\t<h2>Declaring methods</h2>\n            <p>A method is identified by its prototype, defined by its name and its accepted arguments.</p>\n            <p>A method is defined by declaring its prototype and optional return value, followed by the method statements.</p>\n            <p>The minimal prototype has the following form:</p>\n            <ul className=\"uk-list uk-list-disc\">\n                <li>In E dialect: <code>define <i>methodName</i> as method doing:</code></li>\n                <li>In O dialect: <code><i>methodName</i>() {}</code></li>\n                <li>In M dialect: <code>def <i>methodName</i>():</code></li>\n            </ul>\n\n            <h3>Method names</h3>\n            <p>A method name can be any valid identifier i.e. a word starting with a letter and followed by any number of letters or digits.</p>\n\n            <h3>Method return types</h3>\n            <p>A Prompto method can return any number of values.</p>\n            <p>If no value is returned, the return type is known as <code>Void</code> type.</p>\n            <p>If a value is returned, the return type can be specified. When not specified, it is inferred by Prompto.</p>\n            <p>Specifying the return type is done as follows:</p>\n            <ul className=\"uk-list uk-list-disc\">\n                <li>In E dialect: <code>define <i>methodName</i> as method returning <i>Type</i> doing:</code> </li>\n                <li>In O dialect: <code><i>Type method methodName</i>() {}</code></li>\n                <li>In M dialect: <code>def <i>methodName</i>() -> <i>Type</i>:</code></li>\n            </ul>\n            <p>where <code><i>Type</i></code> is the name of an existing type.</p>\n            <p>If more than one value is returned, the return type is <code>Tuple</code>. This can be convenient for quick development\n                but should not be used for large scale applications, because Prompto does not infer the type of Tuple elements.</p>\n\t\t</li>\n\t)\n}"]},"metadata":{},"sourceType":"module"}