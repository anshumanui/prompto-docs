{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/libraries/topics/data/JSON.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"JSON\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Data received from Web services if often provided in JSON format.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 89\n        }, this), \"Prompto is able to analyze JSON data provided as Text.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 79\n        }, this), \"The Text itself should be read from resources using \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"read\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 77\n        }, this), \" statements.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 106\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"(support for parsing JSON resources directly is not available yet)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"JSON methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"readJson\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 32\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 48\n            }, this), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: \"define readJson as native method receiving text returning Any\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 37\n            }, this), \" argument must contain valid JSON text.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 87\n            }, this), \"The method returns an \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"Any\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 55\n            }, this), \" value, which is a generic type for pretty much anything.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The reason for returning \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"Any\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 57\n            }, this), \" is that although JSON is often used to return JavaScript objects, JSON actually supports the following types:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"null\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"noolean\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"string\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"array\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"object\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"As a consequence, developers need to check the type of the value returned before making any decision.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" Here is an example:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            lines: 12,\n            sampleUrl: \"samples/data/jsonExample.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/libraries/topics/data/JSON.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,MAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO,QAAC,KAAD,CAAO,QAAP;AAAA,8BACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADL,eAEK;AAAA,qGAAoE;AAAA;AAAA;AAAA;AAAA,gBAApE,yEAC0D;AAAA;AAAA;AAAA;AAAA,gBAD1D,uEAEwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFxD,+BAEqF;AAAA;AAAA;AAAA;AAAA,gBAFrF,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFL,eAMK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANL,eAOK;AAAA,+BACI;AAAA,kCAAI;AAAA,oCAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAH,oBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,4CACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADR,0DAC0D;AAAA;AAAA;AAAA;AAAA,oBAD1D,yCAE0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAF1B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAKI;AAAA,iEAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eAMI;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,eAcI;AAAA;AAAA;AAAA;AAAA,kBAdJ,eAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfJ,eAiBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjBL,eAkBI,QAAC,aAAD;AAA6C,YAAA,KAAK,EAAE,EAApD;AAAwD,YAAA,SAAS,EAAC,8BAAlE;AAAiG,YAAA,QAAQ,EAAE;AAA3G,aAAoBJ,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,kBAlBJ,eAmBI;AAAA;AAAA;AAAA;AAAA,kBAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAPL;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AA+BH;;AAtCyB;;AA0C9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"JSON\");\n    }\n\n    renderContent(topicSelected) {\n        return <React.Fragment>\n                    <h2>JSON</h2>\n                    <p>Data received from Web services if often provided in JSON format.<br/>\n                        Prompto is able to analyze JSON data provided as Text.<br/>\n                        The Text itself should be read from resources using <code>read</code> statements.<br/>\n                        <i>(support for parsing JSON resources directly is not available yet)</i></p>\n                    <h3>JSON methods</h3>\n                    <ul>\n                        <li><p><b>readJson</b> <i>text</i>:</p>\n                            <pre>define readJson as native method receiving text returning Any</pre>\n                            <p>\n                                The <i>text</i> argument must contain valid JSON text.<br/>\n                                The method returns an <code>Any</code> value, which is a generic type for pretty much anything.</p>\n                            <p>The reason for returning <code>Any</code> is that although JSON is often used to return JavaScript objects, JSON actually supports the following types:</p>\n                            <ul>\n                                <li>null</li>\n                                <li>noolean</li>\n                                <li>number</li>\n                                <li>string</li>\n                                <li>array</li>\n                                <li>object</li>\n                            </ul>\n                            <p/>\n                            <p>As a consequence, developers need to check the type of the value returned before making any decision.</p>\n\n                             <p> Here is an example:</p>\n                            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/data/jsonExample.pec\" runnable={true}/>\n                            <p/>\n                         </li>\n                    </ul>\n            </React.Fragment>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}