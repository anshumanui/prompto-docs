{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/playground/Repl.js\";\nimport '../../assets/css/repl.scss';\nimport React from 'react';\nimport Console from './Console';\nimport LineHandler from './LineHandler';\nimport DisplayHistory from \"./DisplayHistory\";\nimport PromptHistory from \"./PromptHistory\";\nimport PromptData from \"./PromptData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Repl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayHistory: new DisplayHistory(this.props.historyToDisplay),\n      promptHistory: new PromptHistory(),\n      promptData: new PromptData(),\n      style: {}\n    };\n    this.lineHandler = LineHandler.forDialect(\"M\");\n    this.visibilityChanged = this.visibilityChanged.bind(this);\n    this.dispatchKeyDown = this.dispatchKeyDown.bind(this); // can't bind the handler inline without breaking the event flow\n  }\n\n  componentDidMount() {\n    this.setUpStyles();\n  }\n\n  visibilityChanged(visible) {\n    if (visible) {\n      this.listener = e => this.dispatchKeyDown(e); // can't bind the handler inline without breaking the event flow\n\n\n      window.addEventListener('keydown', this.listener);\n      this.requestFocus();\n    } else if (this.listener) {\n      window.removeEventListener('keydown', this.listener);\n      delete this.listener;\n    }\n  }\n\n  requestFocus() {\n    const textArea = document.getElementById('replTextArea');\n    if (textArea) textArea.focus();\n  }\n\n  setUpStyles() {\n    let newStyle = {};\n\n    if (this.props.height) {\n      newStyle.height = this.props.height;\n    }\n\n    if (this.props.width) {\n      newStyle.width = this.props.width;\n    }\n\n    if (this.props.textColor) {\n      newStyle.textColor = this.props.textColor;\n    }\n\n    if (this.props.backgroundColor) {\n      newStyle.backgroundColor = this.props.backgroundColor;\n    }\n\n    if (this.props.fontSize) {\n      newStyle.props.fontSize = this.props.fontSize;\n    }\n\n    if (Object.keys(newStyle).length) {\n      this.setState({\n        style: newStyle\n      });\n    }\n  }\n\n  dispatchKeyDown(e) {\n    switch (e.key) {\n      case \"ArrowUp\":\n        e.preventDefault();\n        return this.handleToggleHistory('UP');\n\n      case \"ArrowDown\":\n        e.preventDefault();\n        return this.handleToggleHistory('DOWN');\n\n      case \"ArrowLeft\":\n        return this.moveCursor('LEFT');\n\n      case \"ArrowRight\":\n        return this.moveCursor('RIGHT');\n\n      case \"Backspace\":\n        return this.tryDedent();\n\n      case \"Tab\":\n        e.preventDefault();\n        if (e.shiftKey) return this.dedent();else return this.indent();\n\n      case \"Enter\":\n        e.preventDefault();\n        return this.handleSubmit();\n\n      default:\n        return;\n    }\n  }\n\n  handleSubmit() {\n    const textArea = document.getElementById('replTextArea');\n    textArea.value = '';\n    const promptValue = this.state.promptData.getValue();\n    this.state.promptData.clearLine();\n    this.lineHandler = this.lineHandler.evaluate(promptValue, this.state.promptData, this.state.promptHistory, this.state.displayHistory, () => this.setState(this.state, this.showPrompt.bind(this)));\n  }\n\n  showPrompt() {\n    const cursor = document.getElementById(\"cursor\");\n    cursor.scrollIntoView();\n  }\n\n  handleToggleHistory(str) {\n    const item = this.state.promptHistory.toggle(str);\n    if (!item) return;\n    const value = item.data;\n    this.state.promptData.setValue(value);\n    this.setState(this.state, () => {\n      const textArea = document.getElementById('replTextArea');\n      textArea.value = value;\n    });\n  }\n  /* Needed because window listener is run before prompt calls handleInput resulting in cursor\n     being off by one */\n\n\n  moveCursor(direction) {\n    let textArea = document.getElementById('replTextArea'),\n        idx = textArea.selectionStart;\n\n    if (direction === 'RIGHT') {\n      idx = idx > textArea.value.length ? idx : idx + 1;\n    } else if (direction === 'LEFT') {\n      idx = idx < 1 ? 0 : idx - 1;\n    }\n\n    this.handleInput(idx);\n  }\n\n  handleInput(idx) {\n    const textArea = document.getElementById('replTextArea');\n    const content = textArea.value;\n    const cursorIdx = Number.isInteger(idx) ? idx : textArea.selectionStart;\n    this.state.promptData.handleInput(content, cursorIdx);\n    this.setState({\n      promptData: this.state.promptData\n    });\n  }\n\n  tryDedent() {\n    const promptData = this.state.promptData;\n\n    if (promptData.indentLevel > 0) {\n      const textArea = document.getElementById('replTextArea');\n\n      if (textArea.selectionStart === 0 && textArea.selectionEnd === 0) {\n        promptData.dedent();\n        this.setState({\n          promptData: promptData\n        });\n      }\n    }\n  }\n\n  dedent() {\n    const promptData = this.state.promptData;\n\n    if (promptData.indentLevel > 0) {\n      promptData.dedent();\n      this.setState({\n        promptData: promptData\n      });\n    }\n  }\n\n  indent() {\n    const promptData = this.state.promptData;\n    const textArea = document.getElementById('replTextArea');\n\n    if (textArea.selectionStart === 0 && textArea.selectionEnd === 0) {\n      promptData.indent();\n      this.setState({\n        promptData: promptData\n      });\n    }\n  }\n\n  clearHistory() {\n    this.setState({\n      historyToDisplay: []\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Console, {\n      currentPrompt: this.state.promptData,\n      handleInput: this.handleInput.bind(this),\n      handleSubmit: this.handleSubmit.bind(this),\n      style: this.state.style,\n      historyToDisplay: this.state.displayHistory,\n      onClick: this.requestFocus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 16\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/playground/Repl.js"],"names":["React","Console","LineHandler","DisplayHistory","PromptHistory","PromptData","Repl","Component","constructor","props","state","displayHistory","historyToDisplay","promptHistory","promptData","style","lineHandler","forDialect","visibilityChanged","bind","dispatchKeyDown","componentDidMount","setUpStyles","visible","listener","e","window","addEventListener","requestFocus","removeEventListener","textArea","document","getElementById","focus","newStyle","height","width","textColor","backgroundColor","fontSize","Object","keys","length","setState","key","preventDefault","handleToggleHistory","moveCursor","tryDedent","shiftKey","dedent","indent","handleSubmit","value","promptValue","getValue","clearLine","evaluate","showPrompt","cursor","scrollIntoView","str","item","toggle","data","setValue","direction","idx","selectionStart","handleInput","content","cursorIdx","Number","isInteger","indentLevel","selectionEnd","clearHistory","render"],"mappings":"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","sourcesContent":["import '../../assets/css/repl.scss';\n\nimport React from 'react'\nimport Console from './Console'\nimport LineHandler from './LineHandler';\nimport DisplayHistory from \"./DisplayHistory\";\nimport PromptHistory from \"./PromptHistory\";\nimport PromptData from \"./PromptData\";\n\nexport default class Repl extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            displayHistory: new DisplayHistory(this.props.historyToDisplay),\n            promptHistory: new PromptHistory(),\n            promptData: new PromptData(),\n            style: {}\n        };\n        this.lineHandler = LineHandler.forDialect(\"M\");\n        this.visibilityChanged = this.visibilityChanged.bind(this);\n        this.dispatchKeyDown = this.dispatchKeyDown.bind(this); // can't bind the handler inline without breaking the event flow\n    }\n\n    componentDidMount() {\n        this.setUpStyles();\n    }\n\n    visibilityChanged(visible) {\n        if(visible) {\n            this.listener = e => this.dispatchKeyDown(e); // can't bind the handler inline without breaking the event flow\n            window.addEventListener('keydown', this.listener);\n            this.requestFocus();\n        } else if(this.listener) {\n            window.removeEventListener('keydown', this.listener);\n            delete this.listener;\n        }\n    }\n\n    requestFocus() {\n        const textArea = document.getElementById('replTextArea');\n        if(textArea)\n            textArea.focus();\n    }\n\n    setUpStyles() {\n        let newStyle = {};\n        if (this.props.height) {\n            newStyle.height = this.props.height;\n        }\n        if (this.props.width) {\n            newStyle.width = this.props.width;\n        }\n        if (this.props.textColor) {\n            newStyle.textColor = this.props.textColor;\n        }\n        if (this.props.backgroundColor) {\n            newStyle.backgroundColor = this.props.backgroundColor;\n        }\n        if (this.props.fontSize) {\n            newStyle.props.fontSize = this.props.fontSize;\n        }\n        if (Object.keys(newStyle).length) {\n            this.setState({style: newStyle});\n        }\n\n    }\n\n    dispatchKeyDown(e) {\n        switch (e.key) {\n            case \"ArrowUp\":\n                e.preventDefault();\n                return this.handleToggleHistory('UP');\n            case \"ArrowDown\":\n                e.preventDefault();\n                return this.handleToggleHistory('DOWN');\n            case \"ArrowLeft\":\n                return this.moveCursor('LEFT');\n            case \"ArrowRight\":\n                return this.moveCursor('RIGHT');\n            case \"Backspace\":\n                return this.tryDedent();\n            case \"Tab\":\n                e.preventDefault();\n                if (e.shiftKey)\n                    return this.dedent();\n                else\n                    return this.indent();\n            case \"Enter\":\n                e.preventDefault();\n                return this.handleSubmit();\n            default:\n                return;\n        }\n    }\n\n\n    handleSubmit() {\n        const textArea = document.getElementById('replTextArea');\n        textArea.value = '';\n        const promptValue = this.state.promptData.getValue();\n        this.state.promptData.clearLine();\n        this.lineHandler = this.lineHandler.evaluate(promptValue, this.state.promptData, this.state.promptHistory, this.state.displayHistory,\n            () => this.setState(this.state, this.showPrompt.bind(this))\n        );\n    }\n\n    showPrompt() {\n        const cursor = document.getElementById(\"cursor\");\n        cursor.scrollIntoView();\n    }\n\n\n    handleToggleHistory(str) {\n        const item = this.state.promptHistory.toggle(str);\n        if (!item)\n            return;\n        const value = item.data;\n        this.state.promptData.setValue(value);\n        this.setState(this.state, () => {\n            const textArea = document.getElementById('replTextArea');\n            textArea.value = value;\n        });\n    }\n\n    /* Needed because window listener is run before prompt calls handleInput resulting in cursor\n       being off by one */\n    moveCursor(direction) {\n        let textArea = document.getElementById('replTextArea'), idx = textArea.selectionStart;\n        if (direction === 'RIGHT') {\n            idx = idx > textArea.value.length ? idx : idx + 1\n        } else if (direction === 'LEFT') {\n            idx = idx < 1 ? 0 : idx - 1\n        }\n        this.handleInput(idx)\n    }\n\n    handleInput(idx) {\n        const textArea = document.getElementById('replTextArea');\n        const content = textArea.value;\n        const cursorIdx = Number.isInteger(idx) ? idx : textArea.selectionStart;\n        this.state.promptData.handleInput(content, cursorIdx);\n        this.setState({promptData: this.state.promptData});\n    }\n\n    tryDedent() {\n        const promptData = this.state.promptData;\n        if (promptData.indentLevel > 0) {\n            const textArea = document.getElementById('replTextArea');\n            if (textArea.selectionStart === 0 && textArea.selectionEnd === 0) {\n                promptData.dedent();\n                this.setState({promptData: promptData});\n            }\n        }\n    }\n\n    dedent() {\n        const promptData = this.state.promptData;\n        if (promptData.indentLevel > 0) {\n            promptData.dedent();\n            this.setState({promptData: promptData});\n        }\n    }\n\n    indent() {\n        const promptData = this.state.promptData;\n        const textArea = document.getElementById('replTextArea');\n        if (textArea.selectionStart === 0 && textArea.selectionEnd === 0) {\n            promptData.indent();\n            this.setState({promptData: promptData});\n        }\n    }\n\n    clearHistory() {\n        this.setState({historyToDisplay: []});\n    }\n\n    render() {\n        return <Console\n            currentPrompt={this.state.promptData}\n            handleInput={this.handleInput.bind(this)}\n            handleSubmit={this.handleSubmit.bind(this)}\n            style={this.state.style}\n            historyToDisplay={this.state.displayHistory}\n            onClick={this.requestFocus}\n        />;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}