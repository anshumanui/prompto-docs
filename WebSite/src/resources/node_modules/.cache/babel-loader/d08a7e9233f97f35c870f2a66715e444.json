{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/types/document.js\";\nimport PromptoPlayer from \"../../prompto-player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function document() {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Document\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 20\n      }, this), \" type is a technical type used to manipulate arbitrary data structures with loose typing.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 130\n      }, this), \"A Document has items which can be of any type, atomic, collection or Document.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 95\n      }, this), \"A Document is useful to read data from messages, files or the Internet, and convert it to typed data.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 118\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Creating a Document\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Creating a Document is done simply by using a Document literal, enclosed in curly braces '\", ' and ', \"', the items being separated by a comma ',', the key and value being separated by a semi colon ':'.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: `{} -> an empty Document\n{\"Paris\": \"France\", \"John\": 20000} -> a Document of 2 keys and  values`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Document \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"keys\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 25\n      }, this), \" starting with a lowercase letter and not comprising special characters do not need to be enclosed in double-quotes.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      sampleUrl: \"samples/types/document/member.pec\",\n      runnable: true\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"uk-margin-large-top\",\n      children: [\"Alternately, a Document can be created using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 97\n      }, this), \" keyword and assigning it to a variable. Once the document is created, it can be populated simply by assigning values to members. Both member definition and member population occur at the same time i.e. a document has no predefined members.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      sampleUrl: \"samples/types/document/assign.pec\",\n      runnable: true\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Accessing Document members\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Items in a Document can be accessed individually using their key.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: `d = {\"Paris\": \"France\", \"London\": \"England\"} -> assign a Document of 2 Texts to variable 'd'\nd[\"Paris\"] -> get item with key \"Paris\" in Document referenced by variable 'd' i.e. \"France\"`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Populating \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"deep\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 28\n      }, this), \" members\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"A \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"deep\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 18\n      }, this), \" member is a member that is not directly accessible from the root of a Document.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 109\n      }, this), \"Prompto gracefully creates missing members on the fly, making it very easy to populate them:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      sampleUrl: \"samples/types/document/assign-deep.pec\",\n      runnable: true\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Populating list members\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Document members can also be lists: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      sampleUrl: \"samples/types/document/assign-list.pec\",\n      runnable: true\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }, this);\n}","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/types/document.js"],"names":["PromptoPlayer","document","nextKey"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,oCAA1B;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAClC,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAGU;AAAA,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP,4GAAqH;AAAA;AAAA;AAAA;AAAA,cAArH,iGACkF;AAAA;AAAA;AAAA;AAAA,cADlF,wHAEyG;AAAA;AAAA;AAAA;AAAA,cAFzG;AAAA;AAAA;AAAA;AAAA;AAAA,YAHV,eAOU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPV,eAQU;AAAA,+GAA8F,OAA9F;AAAA;AAAA;AAAA;AAAA;AAAA,YARV,eASU;AAAA,6BAAK;AAAA,kBAAQ;AACzB;AADiB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,YATV,eAWU;AAAA,2CAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YAXV,eAYU,QAAC,aAAD;AAA6C,MAAA,SAAS,EAAC,mCAAvD;AAA2F,MAAA,QAAQ,EAAE;AAArG,OAAoBD,aAAa,CAACE,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YAZV,eAcU;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA,mFAAoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAApF;AAAA;AAAA;AAAA;AAAA;AAAA,YAdV,eAiBU,QAAC,aAAD;AAA6C,MAAA,SAAS,EAAC,mCAAvD;AAA2F,MAAA,QAAQ,EAAE;AAArG,OAAoBF,aAAa,CAACE,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YAjBV,eAmBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBV,eAoBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBV,eAqBU;AAAA,6BAAK;AAAA,kBAAQ;AACzB;AADiB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,YArBV,eAwBU;AAAA,6CAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBV,eAyBU;AAAA,oCAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAL,mGAAgG;AAAA;AAAA;AAAA;AAAA,cAAhG;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBV,eA4BU,QAAC,aAAD;AAA6C,MAAA,SAAS,EAAC,wCAAvD;AAAgG,MAAA,QAAQ,EAAE;AAA1G,OAAoBF,aAAa,CAACE,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YA5BV,eA8BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA9BV,eA+BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA/BV,eAgCU,QAAC,aAAD;AAA6C,MAAA,SAAS,EAAC,wCAAvD;AAAgG,MAAA,QAAQ,EAAE;AAA1G,OAAoBF,aAAa,CAACE,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YAhCV;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAoCA","sourcesContent":["import PromptoPlayer from \"../../prompto-player/PromptoPlayer\";\n\nexport default function document() {\n\treturn (\n\t\t<li>\n\t\t\t<h2>Document</h2>\n\n            <p>The <code>Document</code> type is a technical type used to manipulate arbitrary data structures with loose typing.<br/>\n                A Document has items which can be of any type, atomic, collection or Document.<br/>\n                A Document is useful to read data from messages, files or the Internet, and convert it to typed data.<br/>\n            </p>\n            <h3>Creating a Document</h3>\n            <p>Creating a Document is done simply by using a Document literal, enclosed in curly braces '{' and '}', the items being separated by a comma ',', the key and value being separated by a semi colon ':'.</p>\n            <pre><code>{`{} -> an empty Document\n{\"Paris\": \"France\", \"John\": 20000} -> a Document of 2 keys and  values`}</code></pre>\n            <p>Document <i>keys</i> starting with a lowercase letter and not comprising special characters do not need to be enclosed in double-quotes.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/document/member.pec\" runnable={true}/>\n\n            <p className=\"uk-margin-large-top\">Alternately, a Document can be created using the <code>Document</code> keyword and assigning it to a variable. Once the document is created, it can be populated simply by assigning values to members. Both member definition and\n                member population occur at the same time i.e. a document has no predefined members.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/document/assign.pec\" runnable={true}/>\n\n            <h3>Accessing Document members</h3>\n            <p>Items in a Document can be accessed individually using their key.</p>\n            <pre><code>{`d = {\"Paris\": \"France\", \"London\": \"England\"} -> assign a Document of 2 Texts to variable 'd'\nd[\"Paris\"] -> get item with key \"Paris\" in Document referenced by variable 'd' i.e. \"France\"`}</code></pre>\n\n            <h3>Populating <i>deep</i> members</h3>\n            <p>A <i>deep</i> member is a member that is not directly accessible from the root of a Document.<br/>\n                Prompto gracefully creates missing members on the fly, making it very easy to populate them:\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/document/assign-deep.pec\" runnable={true}/>\n\n            <h3>Populating list members</h3>\n            <p>Document members can also be lists: </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/document/assign-list.pec\" runnable={true}/>\n\t\t</li>\n\t)\n}"]},"metadata":{},"sourceType":"module"}