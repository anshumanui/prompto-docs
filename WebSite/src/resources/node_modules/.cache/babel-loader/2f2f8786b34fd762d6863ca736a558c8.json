{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/Types.js\";\nimport React from 'react';\nimport AtomicTypes from \"./AtomicTypes\";\nimport CollectionTypes from \"./CollectionTypes\";\nimport DocumentType from \"./DocumentType\";\nimport AttributeType from \"./AttributeType\";\nimport EnumerationType from \"./EnumerationType\";\nimport TransientTypes from \"./TransientTypes\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Types\", [AtomicTypes, CollectionTypes, DocumentType, AttributeType, EnumerationType, TransientTypes]);\n  }\n\n  renderContent() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This section describes types in the Prompto language.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"What is a type?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Programming languages are used to manipulate all sorts of values: text, number, time, image...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 110\n        }, this), \"Values can be provided using inline \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"literals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 53\n        }, this), \", like \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"123\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 75\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\"John\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 95\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 115\n        }, this), \"They can be calculated from existing values, like \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"123 + 456\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 67\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 90\n        }, this), \"They can also be read from a database, from files, from the internet and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 99\n        }, this), \"Values need to be brought into Prompto in order to be manipulated.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 83\n        }, this), \"However, not all manipulations make sense. As an example, it is valid to multiply \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"123\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 26\n        }, this), \" with \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"456\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 48\n        }, this), \"because both are numbers. It generally does not make sense however to multiply \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Christmas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 26\n        }, this), \" with \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Easter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 54\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 74\n        }, this), \"The purpose of a \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 34\n        }, this), \" is to determine which operations can be performed on a value, and how these operations are performed.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 56\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Static\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this), \" typing vs \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"dynamic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 41\n        }, this), \" typing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Some languages like Python or JavaScript support the following code:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`a = 123\na = \"John\"`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"In the above code, an integer value and a text value are successively assigned to a variable called \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 24\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 33\n        }, this), \"This means that the set of operations which are valid for \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 75\n        }, this), \" varies during execution. This is called \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"dynamic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 24\n        }, this), \" typing.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 46\n        }, this), \"Languages like C++, Java or C# require that the set of operations be known at compile time. This is called \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"static\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 24\n        }, this), \" typing.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports both \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"static\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 38\n        }, this), \" typing and \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"dynamic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 63\n        }, this), \" typing. At Prompto, we believe that static typing is key to performance and robustness of core code which is intensively executed of often reused. However, we also believe that as code gets closer to the edges of an application, notably for input and output, flexibility becomes more important.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Dynamic typing in Prompto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"dynamic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 33\n        }, this), \" typing of \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"language/attributes.html\",\n          target: \"content\",\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"Document\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 78\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 58\n        }, this), \" members.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Static typing in Prompto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"All other Prompto objects are statically typed.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Type inference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"While Prompto is mostly statically typed, it implements type \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"inference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 77\n        }, this), \", where the type of an object is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"inferred\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 27\n        }, this), \" from the context, rather than defined through declarations. This lets developers focus on meaning rather than typing. It is however mandatory to declare the type of method arguments.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Technical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), \" types vs \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Semantic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 43\n        }, this), \" types\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Like all programming languages, Prompto comes with built-in types for commonly used types of values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 116\n        }, this), \"Prompto calls these \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"technical types\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 37\n        }, this), \", because they are defined by their technical structure and behaviour.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Atomic types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Atomic types are technical types which can only hold a single 'atomic' value: Text, Integer, decimal, Date and so forth.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Collection types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Collection types are technical types which can hold multiple 'atomic' value: List, Set, Tuple and Dictionary.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Semantic types i.e. \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Attributes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto introduces \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"language/attributes.html\",\n          target: \"content\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Attributes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 87\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 35\n        }, this), \", which associate a name with a technical or composed type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 74\n        }, this), \"This association lets the name carry both \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"meaning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 59\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"technical structure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 78\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Composed types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Composed types are user defined types which combine multiple \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Attributes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 77\n        }, this), \". In Prompto, these types are called \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"language/categories.html\",\n          target: \"content\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 80\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 28\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Special types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Special types are technical types which do not hold meaningful values but rather serve program execution: Iterator, Cursor, Method and so forth.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/Types.js"],"names":["React","AtomicTypes","CollectionTypes","DocumentType","AttributeType","EnumerationType","TransientTypes","Topic","ThisTopic","constructor","renderContent","String","raw"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,OAAN,EAAe,CAAER,WAAF,EAAeC,eAAf,EAAgCC,YAAhC,EAA8CC,aAA9C,EAA6DC,eAA7D,EAA8EC,cAA9E,CAAf;AACH;;AAEDI,EAAAA,aAAa,GAAG;AACZ,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAKH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALG,eAOH;AAAA,kIAAiG;AAAA;AAAA;AAAA;AAAA,gBAAjG,uDACwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADxC,0BAC8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD9D,uBACkF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADlF,oBACsG;AAAA;AAAA;AAAA;AAAA,gBADtG,qEAEsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFtD,oBAE6E;AAAA;AAAA;AAAA;AAAA,gBAF7E,qGAGsF;AAAA;AAAA;AAAA;AAAA,gBAHtF,qFAIsE;AAAA;AAAA;AAAA;AAAA,gBAJtE,qGAMa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANb,yBAMmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANnC,kGAQa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARb,yBAQyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARzC,oBAQ6D;AAAA;AAAA;AAAA;AAAA,gBAR7D,oCASqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATrB,yHAU2C;AAAA;AAAA;AAAA;AAAA,gBAV3C;AAAA;AAAA;AAAA;AAAA;AAAA,cAPG,eAoBH;AAAA,gCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAJ,8BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,cApBG,eAqBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBD,eAsBC;AAAA,+BAAK;AAAA,oBAAOC,MAAM,CAACC,GAAI;AACvC;AADqB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAtBD,eAwBH;AAAA,wIAEW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFX,oBAEoB;AAAA;AAAA;AAAA;AAAA,gBAFpB,6EAG8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAH9D,4DAIW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJX,2BAIiC;AAAA;AAAA;AAAA;AAAA,gBAJjC,8HAMW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANX;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBG,eAgCH;AAAA,0DAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAzB,+BAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCG,eAsCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtCG,eAuCH;AAAA,qDAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApB,8BAA6C;AAAG,UAAA,IAAI,EAAC,0BAAR;AACG,UAAA,MAAM,EAAC,SADV;AAAA,iCACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADpB;AAAA;AAAA;AAAA;AAAA,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,cAvCG,eAyCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzCG,eA0CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1CG,eA4CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5CG,eA6CH;AAAA,iGAAgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhE,oDACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADd;AAAA;AAAA;AAAA;AAAA;AAAA,cA7CG,eAiDH;AAAA,gCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAJ,6BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,cAjDG,eAmDH;AAAA,wIAAuG;AAAA;AAAA;AAAA;AAAA,gBAAvG,uCACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAnDG,eAuDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvDG,eAwDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxDG,eA2DH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3DG,eA4DH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5DG,eA+DH;AAAA,wDAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cA/DG,eAgEH;AAAA,uDAAsB;AAAG,UAAA,IAAI,EAAC,0BAAR;AAAmC,UAAA,MAAM,EAAC,SAA1C;AAAA,iCAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApD;AAAA;AAAA;AAAA;AAAA,gBAAtB,8EAC6D;AAAA;AAAA;AAAA;AAAA,gBAD7D,6DAE8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAF9C,wBAEiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFjE;AAAA;AAAA;AAAA;AAAA;AAAA,cAhEG,eAqEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArEG,eAsEH;AAAA,iGAAgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhE,wDACe;AAAG,UAAA,IAAI,EAAC,0BAAR;AAAmC,UAAA,MAAM,EAAC,SAA1C;AAAA,iCAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApD;AAAA;AAAA;AAAA;AAAA,gBADf;AAAA;AAAA;AAAA;AAAA;AAAA,cAtEG,eA0EH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1EG,eA2EH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3EG,eA6EH;AAAA;AAAA;AAAA;AAAA,cA7EG;AAAA,oBAAP;AAgFH;;AAvFyB;;AA2F9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport AtomicTypes from \"./AtomicTypes\";\nimport CollectionTypes from \"./CollectionTypes\";\nimport DocumentType from \"./DocumentType\";\nimport AttributeType from \"./AttributeType\";\nimport EnumerationType from \"./EnumerationType\";\nimport TransientTypes from \"./TransientTypes\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Types\", [ AtomicTypes, CollectionTypes, DocumentType, AttributeType, EnumerationType, TransientTypes ]);\n    }\n\n    renderContent() {\n        return <>\n            <h2>Types</h2>\n\n            <p>This section describes types in the Prompto language.</p>\n\n            <h2>What is a type?</h2>\n\n            <p>Programming languages are used to manipulate all sorts of values: text, number, time, image...<br/>\n                Values can be provided using inline <i>literals</i>, like <code>123</code> or <code>\"John\"</code>.<br/>\n                They can be calculated from existing values, like <code>123 + 456</code>.<br/>\n                They can also be read from a database, from files, from the internet and so forth.<br/>\n                Values need to be brought into Prompto in order to be manipulated.<br/>\n                However, not all manipulations make sense. As an example, it is valid to\n                multiply <code>123</code> with <code>456</code>\n                because both are numbers. It generally does not make sense however to\n                multiply <code>Christmas</code> with <code>Easter</code>.<br/>\n                The purpose of a <i>type</i> is to determine which operations can be performed on a value,\n                and how these operations are performed.<br/>\n            </p>\n\n            <h2><i>Static</i> typing vs <i>dynamic</i> typing</h2>\n                <p>Some languages like Python or JavaScript support the following code:</p>\n                <pre><code>{String.raw`a = 123\na = \"John\"`}</code></pre>\n            <p>\n                In the above code, an integer value and a text value are successively assigned to a variable\n                called <i>a</i>.<br/>\n                This means that the set of operations which are valid for <i>a</i> varies during execution. This is\n                called <i>dynamic</i> typing.<br/>\n                Languages like C++, Java or C# require that the set of operations be known at compile time. This is\n                called <i>static</i> typing.\n            </p>\n            <p>Prompto supports both <i>static</i> typing and <i>dynamic</i> typing.\n                At Prompto, we believe that static typing is key to performance and robustness of core code which is\n                intensively executed of often reused.\n                However, we also believe that as code gets closer to the edges of an application, notably for\n                input and output, flexibility becomes more important.\n            </p>\n            <h3>Dynamic typing in Prompto</h3>\n            <p>Prompto supports <i>dynamic</i> typing of <a href=\"language/attributes.html\"\n                                                            target=\"content\"><code>Document</code></a> members.</p>\n            <h3>Static typing in Prompto</h3>\n            <p>All other Prompto objects are statically typed.</p>\n\n            <h3>Type inference</h3>\n            <p>While Prompto is mostly statically typed, it implements type <i>inference</i>, where the type of an\n                object is <i>inferred</i> from the context, rather than defined through declarations.\n                This lets developers focus on meaning rather than typing. It is however mandatory to declare the type of method arguments.</p>\n\n            <h3><i>Technical</i> types vs <i>Semantic</i> types</h3>\n\n            <p>Like all programming languages, Prompto comes with built-in types for commonly used types of values.<br/>\n                Prompto calls these <i>technical types</i>, because they are defined by their technical structure and\n                behaviour.</p>\n\n            <h3>Atomic types</h3>\n            <p>Atomic types are technical types which can only hold a single 'atomic' value: Text, Integer, decimal,\n                Date and so forth.</p>\n\n            <h3>Collection types</h3>\n            <p>Collection types are technical types which can hold multiple 'atomic' value: List, Set, Tuple and\n                Dictionary.</p>\n\n            <h3>Semantic types i.e. <i>Attributes</i></h3>\n            <p>Prompto introduces <a href=\"language/attributes.html\" target=\"content\"><i>Attributes</i></a>,\n                which associate a name with a technical or composed type.<br/>\n                This association lets the name carry both <i>meaning</i> and <i>technical structure</i>.\n            </p>\n\n            <h3>Composed types</h3>\n            <p>Composed types are user defined types which combine multiple <i>Attributes</i>. In Prompto, these types\n                are called <a href=\"language/categories.html\" target=\"content\"><i>Categories</i></a>.</p>\n\n\n            <h3>Special types</h3>\n            <p>Special types are technical types which do not hold meaningful values but rather serve program execution:\n                Iterator, Cursor, Method and so forth.</p>\n            <br/>\n\n        </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}