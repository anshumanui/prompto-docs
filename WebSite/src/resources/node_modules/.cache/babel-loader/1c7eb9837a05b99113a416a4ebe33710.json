{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Logical.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Logical\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Logical expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Logical AND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Logical AND expressions are used to check both of 2 Boolean values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 83\n        }, this), \"A logical AND expression is a code fragment which produces a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Boolean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 78\n        }, this), \" value, which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 98\n        }, this), \"A logical AND expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"a \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"op\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 30\n          }, this), \" b\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 22\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 55\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 74\n        }, this), \" are Boolean values and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"op\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), \" is one the following comparison operators:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"and\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 21\n          }, this), \" in the E and M dialects\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"&&\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 21\n          }, this), \" in the O dialect\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto is guaranteed to check \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 47\n        }, this), \" first, and only check \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 84\n        }, this), \" if \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 102\n        }, this), \" is true.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/and.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Logical OR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Logical OR expressions are used to check either of 2 Boolean values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 84\n        }, this), \"A logical OR expression is a code fragment which produces a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Boolean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 77\n        }, this), \" value, which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 103\n        }, this), \"A logical OR expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"a \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"op\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 30\n          }, this), \" b\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 22\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 55\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 74\n        }, this), \" are Boolean values and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"op\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), \" is one the following comparison operators:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"or\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this), \" in the E and M dialects\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"||\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this), \" in the O dialect\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto is guaranteed to check \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 47\n        }, this), \" first, and only check \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 27\n        }, this), \" if \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 45\n        }, this), \" is false.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/or.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Logical NOT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Logical NOT expressions are used to reverse Boolean values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 75\n        }, this), \"A logical NOT expression is a code fragment which produces a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Boolean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 78\n        }, this), \" value, which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 107\n        }, this), \"A logical NOT expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"op\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 61\n          }, this), \" a\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 55\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 86\n        }, this), \" is a Boolean value and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"op\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 27\n        }, this), \" is one the following comparison operators:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"not\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), \" in the E and M dialects\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this), \" in the O dialect\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/not.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Logical.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Logical\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Logical expressions</h2>\n\n            <h3>Logical AND</h3>\n\n            <p>Logical AND expressions are used to check both of 2 Boolean values.<br/>\n                A logical AND expression is a code fragment which produces a <code>Boolean</code> value, which can then\n                be used as an input for other operations: print, write, method call and so forth.<br/>\n                A logical AND expression has the\n                form <code>a <i>op</i> b</code> where <code>a</code> and <code>b</code> are Boolean values\n                and <code><i>op</i></code> is one the following comparison operators:</p>\n            <ul>\n                <li><code>and</code> in the E and M dialects</li>\n                <li><code>&amp;&amp;</code> in the O dialect</li>\n            </ul>\n\n            <p>Prompto is guaranteed to check <code>a</code> first, and only check <code>b</code> if <code>a</code> is\n                true.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/and.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Logical OR</h3>\n\n            <p>Logical OR expressions are used to check either of 2 Boolean values.<br/>\n                A logical OR expression is a code fragment which produces a <code>Boolean</code> value, which can\n                then be used as an input for other operations: print, write, method call and so forth.<br/>\n                A logical OR expression has the\n                form <code>a <i>op</i> b</code> where <code>a</code> and <code>b</code> are Boolean values\n                and <code><i>op</i></code> is one the following comparison operators:</p>\n            <ul>\n                <li><code>or</code> in the E and M dialects</li>\n                <li><code>||</code> in the O dialect</li>\n            </ul>\n\n            <p>Prompto is guaranteed to check <code>a</code> first, and only\n                    check <code>b</code> if <code>a</code> is false.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/or.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Logical NOT</h3>\n\n            <p>Logical NOT expressions are used to reverse Boolean values.<br/>\n                A logical NOT expression is a code fragment which produces a <code>Boolean</code> value, which\n                can then be used as an input for other operations: print, write, method call and so forth.<br/>\n                A logical NOT expression has the form <code><i>op</i> a</code> where <code>a</code> is a Boolean\n                value and <code><i>op</i></code> is one the following comparison operators:</p>\n\n            <ul>\n                <li><code>not</code> in the E and M dialects</li>\n                <li><code>!</code> in the O dialect</li>\n            </ul>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/not.pec\" runnable={true}/>\n            <br/>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}