{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/methods/abstract.js\";\nimport PromptoPlayer from \"../../prompto-player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Abstract() {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Abstract\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 8\n      }, this), \" methods\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto supports \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"abstract\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 7,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 33\n      }, this), \" methods, a special type of method, which \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"must\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 103\n      }, this), \" be overloaded.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Abstract methods are resolved at runtime based on the actual type of the value.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Abstract methods are well suited when no actual behaviour can be determined for an argument type (such as in the below \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Shape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 135\n      }, this), \").\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In the below example, we do not know how to print a shape, only how to print specific shape types.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In order to print a list of shapes without knowing their type, we use an abstract method.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      lines: 20,\n      sampleUrl: \"samples/methods/abstract.pec\",\n      runnable: true\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Abstract\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this), \" methods as arguments\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Abstract methods can also be used as arguments for other methods:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      lines: 12,\n      sampleUrl: \"samples/methods/abstractArgument.pec\",\n      runnable: true\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"uk-margin-large-top\",\n      children: [\"In the above example, we show how to pass both a value: \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"Hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 104\n      }, this), \" and a method: \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"displayScreen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 137\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 131\n      }, this), \" to another method: \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"someMethod\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 190\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 184\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The method: \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"someMethod\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 28\n      }, this), \" then invokes the method received as an argument, using the value also received as an argument.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The method caller is responsible for providing a non abstract method compatible with the argument's method type.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Please note that in the E dialect only, the \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"Method:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 60\n      }, this), \" keyword is required to let Prompto decide whether to pass \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"displayScreen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 145\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 139\n      }, this), \"directly as an argument, or to invoke it and pass the result. This is not required in O and M dialects, where method invocation requires parenthesis.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }, this);\n}\n_c = Abstract;\n\nvar _c;\n\n$RefreshReg$(_c, \"Abstract\");","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/methods/abstract.js"],"names":["PromptoPlayer","Abstract","nextKey"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,oCAA1B;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAClC,sBACC;AAAA,4BACC;AAAA,8BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEU;AAAA,mDAAoB;AAAA,+BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cAApB,6DAA0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA1F;AAAA;AAAA;AAAA;AAAA;AAAA,YAFV,eAGU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHV,eAIU;AAAA,yJAA0H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA1H;AAAA;AAAA;AAAA;AAAA;AAAA,YAJV,eAKU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALV,eAMU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANV,eAOU,QAAC,aAAD;AAA6C,MAAA,KAAK,EAAE,EAApD;AAAwD,MAAA,SAAS,EAAC,8BAAlE;AAAiG,MAAA,QAAQ,EAAE;AAA3G,OAAoBD,aAAa,CAACE,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YAPV,eASU;AAAA,8BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,YATV,eAUU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVV,eAYU,QAAC,aAAD;AAA6C,MAAA,KAAK,EAAE,EAApD;AAAwD,MAAA,SAAS,EAAC,sCAAlE;AAAyG,MAAA,QAAQ,EAAE;AAAnH,OAAoBF,aAAa,CAACE,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YAZV,eAaU;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA,0FAA2F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA3F,kCAAsH;AAAA,+BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cAAtH,uCAA2K;AAAA,+BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cAA3K;AAAA;AAAA;AAAA;AAAA;AAAA,YAbV,eAcU;AAAA,8CAAe;AAAA,+BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YAdV,eAeU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfV,eAgBU;AAAA,8EAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA/C,8EAA8H;AAAA,+BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cAA9H;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBV;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAqBA;KAtBuBD,Q","sourcesContent":["import PromptoPlayer from \"../../prompto-player/PromptoPlayer\";\n\nexport default function Abstract() {\n\treturn (\n\t\t<li>\n\t\t\t<h2><i>Abstract</i> methods</h2>\n            <p>Prompto supports <code><i>abstract</i></code> methods, a special type of method, which <i>must</i> be overloaded.</p>\n            <p>Abstract methods are resolved at runtime based on the actual type of the value.</p>\n            <p>Abstract methods are well suited when no actual behaviour can be determined for an argument type (such as in the below <i>Shape</i>).</p>\n            <p>In the below example, we do not know how to print a shape, only how to print specific shape types.</p>\n            <p>In order to print a list of shapes without knowing their type, we use an abstract method.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={20} sampleUrl=\"samples/methods/abstract.pec\" runnable={true}/>\n\n            <h3><i>Abstract</i> methods as arguments</h3>\n            <p>Abstract methods can also be used as arguments for other methods:</p>\n\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/methods/abstractArgument.pec\" runnable={true}/>\n            <p className=\"uk-margin-large-top\">In the above example, we show how to pass both a value: <i>Hello</i> and a method: <code><i>displayScreen</i></code> to another method: <code><i>someMethod</i></code>.</p>\n            <p>The method: <code><i>someMethod</i></code> then invokes the method received as an argument, using the value also received as an argument.</p>\n            <p>The method caller is responsible for providing a non abstract method compatible with the argument's method type.</p>\n            <p>Please note that in the E dialect only, the <code>Method:</code> keyword is required to let Prompto decide whether to pass <code><i>displayScreen</i></code>\n                        directly as an argument, or to invoke it and pass the result. This is not required in O and M dialects, where method invocation requires parenthesis.</p>\n        </li>\n    )\n}"]},"metadata":{},"sourceType":"module"}