{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/statements/Store.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Store\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Delete and store statement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Prompto language comes with a built-in data storage mechanism.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This mechanism relies on 3rd party data store implementations. Which data store technology is effectively used is determined through configuration. Without configuration, Prompto uses a built-in in-memory non persistent data store, which helps get started and run tests, but is not supported for production.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"A data store generally provides guarantees of availability, scalability and consistency. However, from a programming language standpoint, the only relevant characteristic is consistency aka ACID (Atomicity, Consistency, Isolation, Durability). Many data stores provide consistency through transactions, however this does not scale well. Instead, other data stores provide consistency using grouped CRUD operations (\", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"CR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 18\n        }, this), \"eate, \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"U\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 33\n        }, this), \"pdate, \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 48\n        }, this), \"elete). To ensure compatibility with most data stores, Prompto only requires the data store to support consistency, not transactions. Prompto also caters for asynchronous consistency of certain data stores, using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"flush\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), \" statement.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Consistency in Prompto is achieved by grouping multiple CRUD operations in a single statement. A delete and store statement allows such grouping.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"A delete and store statement has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"store \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"obj1, obj2 ... objn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 70\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 58\n        }, this), \" eventually preceded by \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"delete \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"obj1, obj2 ... objn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 42\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 29\n        }, this), \", where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"obj\", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"i\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 23\n        }, this), \" is any valid category or category collection expression.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Storing new objects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto can store any object for which the category is marked as \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"storable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 87\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 81\n        }, this), \", as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 8,\n        sampleUrl: \"samples/statements/store-create.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Updating existing objects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto storable objects have a built-in database id attribute, namely \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"dbId\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 87\n        }, this), \" provided by the data store. Only objects fetched from the store can be updated, and those objects carry their \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"dbId\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 99\n        }, this), \". These objects must also be mutable, so the language is allowed to modify attribute values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 107\n        }, this), \"Updating these objects can be simply done by storing them, as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 12,\n        sampleUrl: \"samples/statements/store-update.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Deleting objects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto storable objects have a built-in database id attribute, namely \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"dbId\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 87\n        }, this), \" provided by the data store. Only objects fetched from the store can be deleted, and those objects carry their \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"dbId\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 99\n        }, this), \". Deleting these objects can be simply done as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 12,\n        sampleUrl: \"samples/statements/delete.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Deleting and storing atomically.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To ensure consistency of data, Prompto supports deleting and storing multiple objects in a single statement, as follows:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 12,\n        sampleUrl: \"samples/statements/delete-store.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/statements/Store.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Store\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Delete and store statement</h2>\n\n            <p>The Prompto language comes with a built-in data storage mechanism.</p>\n            <p>\n                This mechanism relies on 3rd party data store implementations. Which data store technology is\n                effectively used is determined through configuration.\n                Without configuration, Prompto uses a built-in in-memory non persistent data store, which helps get\n                started and run tests, but is not supported for production.\n            </p>\n\n            <p>A data store generally provides guarantees of availability, scalability and consistency.\n                However, from a programming language standpoint, the only relevant characteristic is consistency aka\n                ACID (Atomicity, Consistency, Isolation, Durability).\n                Many data stores provide consistency through transactions, however this does not scale well.\n                Instead, other data stores provide consistency using grouped CRUD operations\n                (<b>CR</b>eate, <b>U</b>pdate, <b>D</b>elete).\n                To ensure compatibility with most data stores, Prompto only requires the data store to support\n                consistency, not transactions.\n                Prompto also caters for asynchronous consistency of certain data stores, using\n                the <code>flush</code> statement.</p>\n            <p>Consistency in Prompto is achieved by grouping multiple CRUD operations in a single statement. A delete\n                and store statement allows such grouping.</p>\n            <p>A delete and store statement has the form <code>store <i>obj1, obj2 ... objn</i></code> eventually\n                preceded by <code>delete <i>obj1, obj2 ... objn</i></code>,\n                where <code>obj<i>i</i></code> is any valid category or category collection expression.\n            </p>\n\n            <h3>\n                Storing new objects\n            </h3>\n            <p>Prompto can store any object for which the category is marked as <code><i>storable</i></code>, as\n                follows:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={8} sampleUrl=\"samples/statements/store-create.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Updating existing objects\n            </h3>\n            <p>Prompto storable objects have a built-in database id attribute, namely <code>dbId</code> provided by the\n                data store.\n                Only objects fetched from the store can be updated, and those objects carry their <code>dbId</code>.\n                These objects must also be mutable, so the language is allowed to modify attribute values.<br/>\n                Updating these objects can be simply done by storing them, as follows:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/statements/store-update.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Deleting objects\n            </h3>\n            <p>Prompto storable objects have a built-in database id attribute, namely <code>dbId</code> provided by the\n                data store.\n                Only objects fetched from the store can be deleted, and those objects carry their <code>dbId</code>.\n                Deleting these objects can be simply done as follows:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/statements/delete.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Deleting and storing atomically.\n            </h3>\n            <p>To ensure consistency of data, Prompto supports deleting and storing multiple objects in a single\n                statement, as follows:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/statements/delete-store.pec\" runnable={true}/>\n            <br/>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}