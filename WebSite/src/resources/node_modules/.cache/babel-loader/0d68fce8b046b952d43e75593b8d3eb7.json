{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/Mutability.js\";\nimport React from 'react';\nimport Topic from \"../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Mutability\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Mutability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Programs are used to \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"alter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 37\n        }, this), \" data. They do this either by introducing new data, transforming existing data or deleting it.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 143\n        }, this), \"Naturally, many programming languages let developers alter data: C, C++, Java, C#, Python, JavaScript...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 121\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 126\n        }, this), \"As an example, a JavaScript object can be modified as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`var person = { name : \"John\", gender : \"Male\", profession: \"Engineer\" }\n// now modify the person\nperson.profession = \"Manager\";`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The above has the benefit of simplicity.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"However, as programs grow and become more complex, notably when multiple execution threads run in parallel, it can become very difficult to control what happens when data used by the program changes.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"This has led the industry to provide a different breed of programming languages, known as \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"functional\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 106\n        }, this), \" languages.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 134\n        }, this), \"Examples of such languages are Haskell, Erlang, F#, Clojure, and to a certain extent Scala.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 108\n        }, this), \"Their common characteristic is that instead of modifying existing data, they rather produce \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"new\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 109\n        }, this), \" data from the existing data and the required alterations.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 69\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 74\n        }, this), \"As an example, the above fragment could be written \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"functionally\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 68\n        }, this), \" as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`var person = { name : \"John\", gender : \"Male\", profession: \"Engineer\" };\n// create a function to produce a modified person\nfunction modifiedPersonWithAttribute(person, atttribute, newValue) {\n    person = Object.create(person);\n    person[atttribute] = newValue;\n    return person;\n}\n// call that function\nperson = modifiedPersonWithAttribute(person, \"profession\", \"Manager\");`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Note that the original object is not modified, instead a new object is created, and assigned to the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"person\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 37\n        }, this), \" variable. By doing so, if any other variable refers to the original object, its behavior will remain predictable.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 54\n        }, this), \"See \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://en.wikipedia.org/wiki/Functional_programming\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"Functional_programming\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), \" for more background on functional programming.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"At Prompto, we believe in functional programming, however we also notice a few things:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"It is a bit awkward for a language to not alter data when the purpose of \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"every\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 94\n          }, this), \" program is actually to alter data (if you accept to consider that creating new data is altering the set of existing data). This contradiction sometimes generates a lot of complexity.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"While it is generally wrong to share mutable data across parts of a program, there are places where it is 100% safe, much simpler and much faster to mutate data, such as input/output and initialization.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"From there, we decided it would be better, rather than force developers into a stiff model, to instead let them decide when to use mutable data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Mutable \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"variables\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), \" vs mutable \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"values\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"In Prompto, all \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"variables\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 32\n        }, this), \" are mutable. It is perfectly legal to write the following 2 assignments:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`a = 1.347\na = 2.013`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"In this example, the value \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"1.347\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 43\n        }, this), \" remains unchanged, but \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 79\n        }, this), \" now refers to another value.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"values\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 28\n        }, this), \" on the other hand are by default immutable.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"For example, you \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"cannot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 37\n        }, this), \" change the value of a default non mutable list, instead you must produce a new list composed from the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"old\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 71\n        }, this), \" list and additional data, as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`list = [1, 2, 3]\nlist = list + [4, 5]`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Now let's imagine you need to change the second item of the above list from 2 to 5. Using an immutable list, you would have to write the following:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"list = list[1:1] + [5] + list[3:3]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"This is tedious to write, hard to read, and slow to execute. If \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 80\n        }, this), \" only exists within a small and well controlled scope, it is much simpler and faster to use a \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"mutable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 56\n        }, this), \" list instead, as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`list = mutable [1, 2, 3]\nlist[2] = 5`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Please note that the above code would be illegal if the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"mutable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 72\n        }, this), \" keyword was omitted.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Also note that only collection and category values can be marked \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"mutable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 81\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You cannot make an immutable value mutable.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 59\n        }, this), \"You can however create a mutable value from an immutable one.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 78\n        }, this), \"For collection values this is simply achieved by adding the immutable collection value to the mutable one:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`immutableList = [1, 2, 3]\nmutableList = mutable [] + immutableList`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"For category values, this is achieved using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"mutable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 64\n        }, this), \" keyword, as follow:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`immutablePerson = Person(name=\"John\")\nmutablePerson = mutable immutablePerson\nmutablePerson.name = \"James\"`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Please note that changing the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 46\n        }, this), \" attribute of the mutablePerson does \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"not\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 100\n        }, this), \" affect the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 122\n        }, this), \" attribute of the immutablePerson.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Mutability guardians\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Controlling mutability can rapidly become complex when values are passed as parameters to methods, or when returning them from method bodies.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 157\n        }, this), \"Prompto lets developers declare \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"mutable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 49\n        }, this), \" parameters, using the following syntax:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"define doStuff as method receiving mutable Text[] list and Integer[] someData\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"In this example, the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 37\n        }, this), \" parameter is mutable, while the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"someData\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 81\n        }, this), \" parameter is not.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 114\n        }, this), \"Prompto ensures that only mutable values are passed as mutable parameters, hence preventing methods from modifying data without notice.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/Mutability.js"],"names":["React","Topic","ThisTopic","constructor","renderContent","topicSelected","String","raw"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Topic from \"../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Mutability\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Mutability</h2>\n\n            <p>Programs are used to <i>alter</i> data. They do this either by introducing new data, transforming existing data or deleting it.<br/>\n                Naturally, many programming languages let developers alter data: C, C++, Java, C#, Python, JavaScript...<br/><br/>\n                As an example, a JavaScript object can be modified as follows:</p>\n            <pre><code>{String.raw`var person = { name : \"John\", gender : \"Male\", profession: \"Engineer\" }\n// now modify the person\nperson.profession = \"Manager\";`}</code></pre>\n            <p>The above has the benefit of simplicity.</p>\n            <p>However, as programs grow and become more complex,\n            notably when multiple execution threads run in parallel, it can become very difficult to control\n            what happens when data used by the program changes.</p>\n            <p>This has led the industry to provide a different breed of programming languages, known as <i>functional</i> languages.<br/>\n                Examples of such languages are Haskell, Erlang, F#, Clojure, and to a certain extent Scala.<br/>\n                Their common characteristic is that instead of modifying existing data, they rather produce <i>new</i> data\n                from the existing data and the required alterations.<br/><br/>\n                As an example, the above fragment could be written <i>functionally</i> as follows:\n            </p>\n            <pre><code>{String.raw`var person = { name : \"John\", gender : \"Male\", profession: \"Engineer\" };\n// create a function to produce a modified person\nfunction modifiedPersonWithAttribute(person, atttribute, newValue) {\n    person = Object.create(person);\n    person[atttribute] = newValue;\n    return person;\n}\n// call that function\nperson = modifiedPersonWithAttribute(person, \"profession\", \"Manager\");`}</code></pre>\n            <p>Note that the original object is not modified, instead a new object is created,\n                and assigned to the <i>person</i> variable. By doing so, if any other variable refers to the original object,\n                its behavior will remain predictable.<br/>\n                See <a href=\"https://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\" rel=\"noopener noreferrer\">Functional_programming</a> for more background on functional programming.\n            </p>\n            <p>At Prompto, we believe in functional programming, however we also notice a few things:</p>\n            <ul>\n                <li>It is a bit awkward for a language to not alter data when the purpose of <i>every</i> program is actually to alter data\n                    (if you accept to consider that creating new data is altering the set of existing data).\n                    This contradiction sometimes generates a lot of complexity.</li>\n                <li>While it is generally wrong to share mutable data across parts of a program, there are places where it is 100% safe,\n                    much simpler and much faster to mutate data, such as input/output and initialization.</li>\n            </ul>\n             <p>From there, we decided it would be better, rather than force developers into a stiff model, to instead let them decide when to use mutable data.</p>\n\n            <h2>Mutable <i>variables</i> vs mutable <i>values</i></h2>\n\n            <p>In Prompto, all <i>variables</i> are mutable. It is perfectly legal to write the following 2 assignments:</p>\n            <pre><code>{String.raw`a = 1.347\na = 2.013`}</code></pre>\n            <p>In this example, the value <i>1.347</i> remains unchanged, but <i>a</i> now refers to another value.</p>\n                <p>Prompto <i>values</i> on the other hand are by default immutable.</p>\n                <p>For example, you <i>cannot</i> change the value of a default non mutable list,\n                instead you must produce a new list composed from the <i>old</i> list and additional data, as follows:\n            </p>\n            <pre><code>{String.raw`list = [1, 2, 3]\nlist = list + [4, 5]`}</code></pre>\n            <p>Now let's imagine you need to change the second item of the above list from 2 to 5. Using an immutable list,\n                you would have to write the following:</p>\n            <pre><code>list = list[1:1] + [5] + list[3:3]</code></pre>\n            <p>This is tedious to write, hard to read, and slow to execute. If <i>list</i> only exists within a small and well controlled scope,\n                it is much simpler and faster to use a <i>mutable</i> list instead, as follows:</p>\n            <pre><code>{String.raw`list = mutable [1, 2, 3]\nlist[2] = 5`}</code></pre>\n            <p>Please note that the above code would be illegal if the <i>mutable</i> keyword was omitted.</p>\n            <p>Also note that only collection and category values can be marked <i>mutable</i>.</p>\n            <p>You cannot make an immutable value mutable.<br/>\n                You can however create a mutable value from an immutable one.<br/>\n                For collection values this is simply achieved by adding the immutable collection value to the mutable one:</p>\n            <pre><code>{String.raw`immutableList = [1, 2, 3]\nmutableList = mutable [] + immutableList`}</code></pre>\n            <p>For category values, this is achieved using the <code>mutable</code> keyword, as follow:</p>\n            <pre><code>{String.raw`immutablePerson = Person(name=\"John\")\nmutablePerson = mutable immutablePerson\nmutablePerson.name = \"James\"`}</code></pre>\n            <p>Please note that changing the <code>name</code> attribute of the mutablePerson does <i>not</i> affect the <code>name</code> attribute of the immutablePerson.</p>\n\n            <h2>Mutability guardians</h2>\n\n            <p>Controlling mutability can rapidly become complex when values are passed as parameters to methods, or when returning them from method bodies.<br/>\n                Prompto lets developers declare <i>mutable</i> parameters, using the following syntax:</p>\n            <pre><code>define doStuff as method receiving mutable Text[] list and Integer[] someData</code></pre>\n            <p>In this example, the <i>list</i> parameter is mutable, while the <i>someData</i> parameter is not.<br/>\n                Prompto ensures that only mutable values are passed as mutable parameters, hence preventing methods from modifying data without notice.</p>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}