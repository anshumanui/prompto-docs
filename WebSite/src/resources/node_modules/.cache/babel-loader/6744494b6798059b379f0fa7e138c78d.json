{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Ternary.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Ternary\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ternary expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Ternary expressions are expressions used to provide alternate values depending on a logical expression.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 28\n        }, this), \"A ternary expression is a code fragment which produces a value, which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 74\n        }, this), \"A ternary expression has the form:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"condition\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 27\n            }, this), \" ? \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"value-if-true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 46\n            }, this), \" : \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"value-if-false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 69\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 21\n          }, this), \" in O dialect\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"value-if-true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 27\n            }, this), \" if \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"condition\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 51\n            }, this), \" else \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"value-if-false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 73\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 21\n          }, this), \" in M and E dialects\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"condition\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 23\n        }, this), \" is a boolean expression and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"value-if-true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"value-if-false\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 52\n        }, this), \" are expressions with compatible types.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 8,\n        sampleUrl: \"samples/expressions/ternary.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Ternary.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,SAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA,2IACe;AAAA;AAAA;AAAA;AAAA,gBADf,mLAG6D;AAAA;AAAA;AAAA;AAAA,gBAH7D;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eASH;AAAA,gCACI;AAAA,kCAAI;AAAA,oCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAN,sBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAzB,sBAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,kCAAI;AAAA,oCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAN,uBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA9B,yBAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAApD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATG,eAeF;AAAA,0CAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAT,gDACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADP,wBACsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADtC;AAAA;AAAA;AAAA;AAAA;AAAA,cAfE,eAoBH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,CAApD;AAAuD,QAAA,SAAS,EAAC,iCAAjE;AAAmG,QAAA,QAAQ,EAAE;AAA7G,SAAoBL,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cApBG;AAAA,oBAAP;AAuBH;;AA9ByB;;AAkC9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Ternary\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Ternary expressions</h2>\n\n            <p>Ternary expressions are expressions used to provide alternate values depending on a logical\n                expression.<br/>\n                A ternary expression is a code fragment which produces a value, which can then be used as an input for\n                other operations: print, write, method call and so forth.<br/>\n                A ternary expression has the form:</p>\n            <ul>\n                <li><code><i>condition</i> ? <i>value-if-true</i> : <i>value-if-false</i></code> in O dialect</li>\n                <li><code><i>value-if-true</i> if <i>condition</i> else <i>value-if-false</i></code> in M and E\n                    dialects\n                </li>\n            </ul>\n             <p>where <code>condition</code> is a boolean expression\n                and <code>value-if-true</code> and <code>value-if-false</code> are expressions with compatible\n                types.\n            </p>\n\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={8} sampleUrl=\"samples/expressions/ternary.pec\" runnable={true}/>\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}