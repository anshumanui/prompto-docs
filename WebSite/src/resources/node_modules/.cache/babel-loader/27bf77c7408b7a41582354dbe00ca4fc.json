{"ast":null,"code":"// eslint-disable-next-line\nimport PromptoWorker from \"worker-loader!./PromptoWorker\";\n\nclass PromptoWorkerListener {\n  constructor() {\n    this.worker = new PromptoWorker();\n    this.worker.onmessage = this.onMessage.bind(this);\n    this.nextMessageId = 0;\n    this.messageHandlers = {};\n  }\n\n  onMessage(msg) {\n    const message = msg.data;\n    const handler = this.messageHandlers[message.inResponseTo];\n    if (!message.keepHandlerAlive) delete this.messageHandlers[message.inResponseTo];\n    if (handler) handler(message.data);else console.log(\"No handler for: \" + msg);\n  }\n\n  translate(content, from, to, callback) {\n    const message = {\n      id: ++this.nextMessageId,\n      verb: \"translate\",\n      data: {\n        content: content,\n        from: from,\n        to: to\n      }\n    };\n\n    this.messageHandlers[message.id] = data => {\n      callback(data.translated, -1);\n    };\n\n    this.worker.postMessage(message);\n  }\n\n  execute(content, dialect, callback) {\n    var message = {\n      id: ++this.nextMessageId,\n      verb: \"execute\",\n      data: {\n        content: content,\n        dialect: dialect\n      }\n    }; // register handler for this message's responses\n\n    this.messageHandlers[message.id] = data => {\n      callback(data.toStdOut, data.toStdErr);\n    };\n\n    this.worker.postMessage(message);\n  }\n\n  repl(input, dialect, callback) {\n    var message = {\n      id: ++this.nextMessageId,\n      verb: \"repl\",\n      data: {\n        input: input,\n        dialect: dialect\n      }\n    }; // register handler for this message's responses\n\n    this.messageHandlers[message.id] = data => {\n      callback(data.toStdOut, data.toStdErr);\n    };\n\n    this.worker.postMessage(message);\n  }\n\n  resetRepl(callback) {\n    var message = {\n      id: ++this.nextMessageId,\n      verb: \"resetRepl\",\n      data: {}\n    }; // register handler for this message's responses\n\n    this.messageHandlers[message.id] = data => {\n      callback(data.toStdOut, data.toStdErr);\n    };\n\n    this.worker.postMessage(message);\n  }\n\n  deleteRepl(name, callback) {\n    var message = {\n      id: ++this.nextMessageId,\n      verb: \"deleteRepl\",\n      data: {\n        name: name\n      }\n    }; // register handler for this message's responses\n\n    this.messageHandlers[message.id] = data => {\n      callback(data.toStdOut, data.toStdErr);\n    };\n\n    this.worker.postMessage(message);\n  }\n\n  showRepl(dialect, callback) {\n    var message = {\n      id: ++this.nextMessageId,\n      verb: \"showRepl\",\n      data: {\n        dialect: dialect\n      }\n    }; // register handler for this message's responses\n\n    this.messageHandlers[message.id] = data => {\n      callback(data.toStdOut, data.toStdErr, data.items);\n    };\n\n    this.worker.postMessage(message);\n  }\n\n}\n\nconst PROMPTO_WORKER = new PromptoWorkerListener();\nexport default PROMPTO_WORKER;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/prompto-player/PromptoWorkerListener.js"],"names":["PromptoWorker","PromptoWorkerListener","constructor","worker","onmessage","onMessage","bind","nextMessageId","messageHandlers","msg","message","data","handler","inResponseTo","keepHandlerAlive","console","log","translate","content","from","to","callback","id","verb","translated","postMessage","execute","dialect","toStdOut","toStdErr","repl","input","resetRepl","deleteRepl","name","showRepl","items","PROMPTO_WORKER"],"mappings":"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","sourcesContent":["// eslint-disable-next-line\nimport PromptoWorker from \"worker-loader!./PromptoWorker\";\n\nclass PromptoWorkerListener {\n\n    constructor() {\n        this.worker = new PromptoWorker();\n        this.worker.onmessage = this.onMessage.bind(this);\n        this.nextMessageId = 0;\n        this.messageHandlers = {};\n    }\n\n    onMessage(msg) {\n        const message = msg.data;\n        const handler = this.messageHandlers[message.inResponseTo];\n        if(!message.keepHandlerAlive)\n            delete this.messageHandlers[message.inResponseTo];\n        if(handler)\n            handler(message.data);\n        else\n            console.log(\"No handler for: \" + msg);\n    }\n\n    translate(content, from, to, callback) {\n        const message = {\n            id : ++this.nextMessageId,\n            verb : \"translate\",\n            data : {\n                content : content,\n                from : from,\n                to : to\n            }\n        };\n        this.messageHandlers[message.id] = data => {\n            callback(data.translated, -1);\n        };\n        this.worker.postMessage(message);\n    }\n\n    execute(content, dialect, callback) {\n        var message =  {\n            id : ++this.nextMessageId,\n            verb : \"execute\",\n            data : {\n                content : content,\n                dialect : dialect\n            }\n        };\n        // register handler for this message's responses\n        this.messageHandlers[message.id] = data => {\n            callback(data.toStdOut, data.toStdErr);\n        };\n        this.worker.postMessage(message);\n    }\n\n    repl(input, dialect, callback) {\n        var message =  {\n            id : ++this.nextMessageId,\n            verb : \"repl\",\n            data : {\n                input : input,\n                dialect: dialect\n            }\n        };\n        // register handler for this message's responses\n        this.messageHandlers[message.id] = data => {\n            callback(data.toStdOut, data.toStdErr);\n        };\n        this.worker.postMessage(message);\n    }\n\n    resetRepl(callback) {\n        var message =  {\n            id : ++this.nextMessageId,\n            verb : \"resetRepl\",\n            data : {}\n        };\n        // register handler for this message's responses\n        this.messageHandlers[message.id] = data => {\n            callback(data.toStdOut, data.toStdErr);\n        };\n        this.worker.postMessage(message);\n    }\n\n\n    deleteRepl(name, callback) {\n        var message =  {\n            id : ++this.nextMessageId,\n            verb : \"deleteRepl\",\n            data : {\n                name: name\n            }\n        };\n        // register handler for this message's responses\n        this.messageHandlers[message.id] = data => {\n            callback(data.toStdOut, data.toStdErr);\n        };\n        this.worker.postMessage(message);\n    }\n\n    showRepl(dialect, callback) {\n        var message =  {\n            id : ++this.nextMessageId,\n            verb : \"showRepl\",\n            data : {\n                dialect: dialect\n            }\n        };\n        // register handler for this message's responses\n        this.messageHandlers[message.id] = data => {\n            callback(data.toStdOut, data.toStdErr, data.items);\n        };\n        this.worker.postMessage(message);\n    }\n\n}\n\nconst PROMPTO_WORKER = new PromptoWorkerListener();\n\nexport default PROMPTO_WORKER;\n"]},"metadata":{},"sourceType":"module"}