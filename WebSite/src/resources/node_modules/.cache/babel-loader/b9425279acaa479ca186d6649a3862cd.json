{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Fetch.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Fetch\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Fetch expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Fetch expressions are used to fetch objects from the data store.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Fetching one object\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Fetching one object from the store produces an object which can then be used as an input for other constructs.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 28\n        }, this), \"Such an expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"fetch one where \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"predicate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 71\n          }, this), \" ( and/or \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"predicate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 28\n          }, this), \" )\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 49\n        }, this), \", where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"predicate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 23\n        }, this), \" is a boolean expression in which any attribute can be used to filter the data.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The type of the object retrieved is the type it had the last time the object was stored (or null if no object was found).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/expressions/fetch-one-any.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Fetching one object with a given category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Fetch expressions can be specialized to return an object of a given user type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 94\n        }, this), \"The type of the variable to which the object is assigned is the specified user type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 101\n        }, this), \"The type of the object retrieved is the type it had the last time the object was stored (or null if no object was found).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 35\n        }, this), \"The type is specified as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 12,\n        sampleUrl: \"samples/expressions/fetch-one-type.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Fetching multiple objects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Fetching multiple objects from the store produces a Cursor which can be used as an input for iterating constructs.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 38\n        }, this), \"Such an expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"fetch all where \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"predicate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 71\n          }, this), \" ( and/or \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"predicate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 28\n          }, this), \" )\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 49\n        }, this), \", where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"predicate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 23\n        }, this), \" is a boolean expression in which any attribute can be used to filter the data.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The type of each object retrieved is the type it had the last time the object was stored.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 14,\n        sampleUrl: \"samples/expressions/fetch-all-any.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Fetching multiple objects with a given category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Similarly to fetching one object, fetching multiple objects expressions can be specialized to return only objects of a given user type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 51\n        }, this), \"The item type of the cursor to which the object is assigned is the specified user type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 104\n        }, this), \"The type of each object retrieved is the type the object had the last time the object was stored.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 24\n        }, this), \"The type is specified as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 14,\n        sampleUrl: \"samples/expressions/fetch-all-type.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"When running the above example, you'll notice that Person \\\"Sophie\\\" is not returned because it is not a Member.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Searching on child fields is not supported yet (it depends heaviliy on the Store implementation capabilities).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Sorting fetched objects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"When fetching multiple objects, Prompto lets you specify the order in which the objects are retrieved.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 31\n        }, this), \"This is done by specifying one or more sort attributes, and the sort direction, as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 16,\n        sampleUrl: \"samples/expressions/fetch-sorted.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Sorting on child fields is not supported yet (it depends heaviliy on the Store implementation capabilities).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Paging results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"When fetching a large number of objects, it can be convenient to only retrieve a subset of them.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 32\n        }, this), \"This is particularly convenient when paging results in a web site.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 79\n        }, this), \"Prompto lets you specify a slice of objects to be retrieved, as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 22,\n        sampleUrl: \"samples/expressions/fetch-paged.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Additionally, the Cursor object returned by the fetch expression has 2 attributes: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"totalCount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 52\n        }, this), \", which can be used to know how many objects are being returned, and how many objects in the Store satisfy the query before slicing.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Fetch.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Fetch\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Fetch expressions</h2>\n\n            <p>Fetch expressions are used to fetch objects from the data store.</p>\n\n            <h3>\n                Fetching one object\n            </h3>\n            <p>Fetching one object from the store produces an object which can then be used as an input for other\n                constructs.<br/>\n                Such an expression has the form <code>fetch one where <i>predicate</i> (\n                    and/or <i>predicate</i> )</code>,\n                where <code><i>predicate</i></code> is a boolean expression in which any attribute can be used to filter\n                the data.</p>\n            <p>The type of the object retrieved is the type it had the last time the object was stored (or null if no\n                object was found).\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/expressions/fetch-one-any.pec\" runnable={true} />\n            <br/>\n\n            <h3>\n                Fetching one object with a given category\n            </h3>\n            <p>Fetch expressions can be specialized to return an object of a given user type.<br/>\n                The type of the variable to which the object is assigned is the specified user type.<br/>\n                The type of the object retrieved is the type it had the last time the object was stored (or null if\n                no\n                object was found).<br/>\n                The type is specified as follows:\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/expressions/fetch-one-type.pec\" runnable={true} />\n            <br/>\n\n            <h3>\n                Fetching multiple objects\n            </h3>\n            <p>Fetching multiple objects from the store produces a Cursor which can be used as an input for\n                iterating constructs.<br/>\n                Such an expression has the form <code>fetch all where <i>predicate</i> (\n                    and/or <i>predicate</i> )</code>,\n                where <code><i>predicate</i></code> is a boolean expression in which any attribute can be used\n                to\n                filter the data.</p>\n            <p>The type of each object retrieved is the type it had the last time the object was stored.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={14} sampleUrl=\"samples/expressions/fetch-all-any.pec\" runnable={true} />\n            <br/>\n\n            <h3>\n                Fetching multiple objects with a given category\n            </h3>\n            <p>Similarly to fetching one object, fetching multiple objects expressions can be specialized to\n                return\n                only objects of a given user type.<br/>\n                The item type of the cursor to which the object is assigned is the specified user type.<br/>\n                The type of each object retrieved is the type the object had the last time the object was\n                stored.<br/>\n                The type is specified as follows:\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={14} sampleUrl=\"samples/expressions/fetch-all-type.pec\" runnable={true} />\n\n            <p>When running the above example, you'll notice that Person \"Sophie\" is not returned\n                because it is\n                not a Member.</p>\n            <p>Searching on child fields is not supported yet (it depends heaviliy on the Store\n                implementation capabilities).</p>\n            <br/>\n\n            <h3>\n                Sorting fetched objects\n            </h3>\n            <p>When fetching multiple objects, Prompto lets you specify the order in which the objects\n                are retrieved.<br/>\n                This is done by specifying one or more sort attributes, and the sort direction, as\n                follows:\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={16} sampleUrl=\"samples/expressions/fetch-sorted.pec\" runnable={true} />\n\n            <p>Sorting on child fields is not supported yet (it depends heaviliy on the Store\n                implementation capabilities).</p>\n            <br/>\n\n            <h3>Paging results</h3>\n            <p>When fetching a large number of objects, it can be convenient to only retrieve a\n                subset of them.<br/>\n            This is particularly convenient when paging results in a web site.<br/>\n            Prompto lets you specify a slice of objects to be retrieved, as follows:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={22} sampleUrl=\"samples/expressions/fetch-paged.pec\" runnable={true} />\n\n            <p>Additionally, the Cursor object returned by the fetch expression has 2\n                attributes: <code>count</code> and <code>totalCount</code>,\n                which can be used to know how many objects are being returned, and how many\n                objects in the Store satisfy the query before slicing.</p>\n\n\n        </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}