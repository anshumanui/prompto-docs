{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Method.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Method\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Method expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Method expressions are expressions used to convey method definitions.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 85\n        }, this), \"A method expression is a code fragment which produces a Method value, whose exact type is determined by the method prototype, and which can then be used as an input for method invocations.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 101\n        }, this), \"A method expression has the following form:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"In O or M: \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 32\n          }, this), \" (without parenthesis), where \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 92\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 86\n          }, this), \" is the name of a concrete method.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"In E: \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: [\"Method: \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 27\n          }, this), \" where \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 72\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 66\n          }, this), \" is the name of a concrete method.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"   Method values are not storable.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"In the below example, we declare a prototype \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"myProto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 61\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 82\n        }, this), \"We then define a method \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"printResultOfMyProto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 41\n        }, this), \" which accepts \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"myProto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 89\n        }, this), \" as a parameter type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 32\n        }, this), \"Later on, we define a method \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"myMethod\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 46\n        }, this), \", which happens to have the same prototype as \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"myProto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 20\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 41\n        }, this), \"Finally, in the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"main\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 33\n        }, this), \" method, we instantiate a Method expression, which can be used as a parameter when calling \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"printResultOfMyProto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 40\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 74\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 14,\n        sampleUrl: \"samples/expressions/method.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Method.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,QAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA,yGAAwE;AAAA;AAAA;AAAA;AAAA,gBAAxE,+MAEwF;AAAA;AAAA;AAAA;AAAA,gBAFxF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAQH;AAAA,gCACI;AAAA,iDAAe;AAAA,mCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,kBAAf,iDAAqE;AAAA,mCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,kBAArE;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAA,4CAAU;AAAA,gDAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAV,0BAAiD;AAAA,mCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,kBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cARG,eAgBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBE,eAkBH;AAAA,iFAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhD,oBAAqE;AAAA;AAAA;AAAA;AAAA,gBAArE,2CAC4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD5B,kCAC4E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD5E,wCAEmB;AAAA;AAAA;AAAA;AAAA,gBAFnB,gDAGiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHjC,iEAIO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJP,oBAI4B;AAAA;AAAA;AAAA;AAAA,gBAJ5B,mCAKoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALpB,8GAM2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAN3B,oBAM6D;AAAA;AAAA;AAAA;AAAA,gBAN7D;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBG,eA4BH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,gCAAlE;AAAmG,QAAA,QAAQ,EAAE;AAA7G,SAAoBJ,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA5BG;AAAA,oBAAP;AA8BH;;AArCyB;;AAyC9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Method\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Method expressions</h2>\n\n            <p>Method expressions are expressions used to convey method definitions.<br/>\n                A method expression is a code fragment which produces a Method value, whose exact type is determined by\n                the method prototype, and which can then be used as an input for method invocations.<br/>\n                A method expression has the following form:</p>\n            <ul>\n                <li>In O or M: <code><i>name</i></code> (without parenthesis), where <code><i>name</i></code> is the\n                    name of a concrete method.\n                </li>\n                <li>In E: <code>Method: <i>name</i></code> where <code><i>name</i></code> is the name of a concrete\n                    method.\n                </li>\n            </ul>\n             <p>   Method values are not storable.\n            </p>\n            <p>In the below example, we declare a prototype <code>myProto</code>.<br/>\n                We then define a method <code>printResultOfMyProto</code> which accepts <code>myProto</code> as a\n                parameter type.<br/>\n                Later on, we define a method <code>myMethod</code>, which happens to have the same prototype\n                as <code>myProto</code>.<br/>\n                Finally, in the <code>main</code> method, we instantiate a Method expression, which can be used as a\n                parameter when calling <code>printResultOfMyProto</code>.<br/>\n            </p>\n\n\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={14} sampleUrl=\"samples/expressions/method.pec\" runnable={true}/>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}