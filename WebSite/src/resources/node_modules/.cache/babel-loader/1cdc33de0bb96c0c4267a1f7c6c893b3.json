{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/SortAdvanced.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Advanced\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Advanced sorting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"For scenarios where \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"natural\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 36\n        }, this), \" sorting or simple sorting are not sufficient, prompto supports advanced sorting using the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"arrow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 141\n        }, this), \" notation.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Single variable arrow sorting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Single variable arrow sorting is used to return a key from each item in the collection.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 103\n        }, this), \"The returned value must have a natural sort order.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"As an example, you can sort a Text collection by character count as follows:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/sort-text-count.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Double variable arrow sorting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"For more complex scenarios where no \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 52\n        }, this), \" with a natural sort order can be provided, prompto supports direct comparison of instances.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 154\n        }, this), \"The \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"arrow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), \" expression receives 2 items such as \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 70\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 83\n        }, this), \" which can then be compared.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 119\n        }, this), \"The returned value must be an Integer, as follows:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"If the value is positive, prompto will treat \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"a\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 70\n          }, this), \" as greater than \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"b\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 95\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"If the value is negative, prompto will treat \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"b\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 70\n          }, this), \" as greater than \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"a\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 95\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"If the value is 0, prompto will treat \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"a\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 63\n          }, this), \" and \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"b\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 76\n          }, this), \" as equal\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In the below example, if a person's name first letter equals the person's city first letter, we sort by city population, otherwise we sort by name descending:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 32,\n        sampleUrl: \"samples/expressions/sort-advanced.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/SortAdvanced.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,UAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA,wDAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAvB,8GAAgI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhI;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAMH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANG,eAQH;AAAA,2HAA0F;AAAA;AAAA;AAAA;AAAA,gBAA1F;AAAA;AAAA;AAAA;AAAA;AAAA,cARG,eAYH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZG,eAeH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,yCAAvD;AAAiG,QAAA,QAAQ,EAAE;AAA3G,SAAoBJ,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAfG,eAgBH;AAAA;AAAA;AAAA;AAAA,cAhBG,eAkBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBG,eAoBH;AAAA,wEAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAvC,+GAA6I;AAAA;AAAA;AAAA;AAAA,gBAA7I,uBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADR,wDACyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADzD,wBACsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADtE,+CAC0G;AAAA;AAAA;AAAA;AAAA,gBAD1G;AAAA;AAAA;AAAA;AAAA;AAAA,cApBG,eAuBC;AAAA,gCACI;AAAA,mFAAiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAjD,oCAA0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA1E;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,mFAAiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAjD,oCAA0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA1E;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,4EAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA1C,wBAAuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBD,eA4BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BG,eAgCH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,uCAAlE;AAA0G,QAAA,QAAQ,EAAE;AAApH,SAAoBL,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAhCG,eAiCH;AAAA;AAAA;AAAA;AAAA,cAjCG;AAAA,oBAAP;AAqCH;;AA5CyB;;AAgD9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Advanced\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Advanced sorting</h2>\n\n            <p>For scenarios where <i>natural</i> sorting or simple sorting are not sufficient, prompto supports advanced sorting using the <i>arrow</i> notation.</p>\n\n            <h3>Single variable arrow sorting</h3>\n\n            <p>Single variable arrow sorting is used to return a key from each item in the collection.<br/>\n                The returned value must have a natural sort order.\n            </p>\n\n            <p>\n                As an example, you can sort a Text collection by character count as follows:\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/sort-text-count.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Double variable arrow sorting</h3>\n\n            <p>For more complex scenarios where no <i>key</i> with a natural sort order can be provided, prompto supports direct comparison of instances.<br/>\n                The <i>arrow</i> expression receives 2 items such as <i>a</i> and <i>b</i> which can then be compared.<br/>\n                The returned value must be an Integer, as follows:</p>\n                <ul>\n                    <li>If the value is positive, prompto will treat <i>a</i> as greater than <i>b</i></li>\n                    <li>If the value is negative, prompto will treat <i>b</i> as greater than <i>a</i></li>\n                    <li>If the value is 0, prompto will treat <i>a</i> and <i>b</i> as equal</li>\n                </ul>\n            <p>\n                In the below example, if a person's name first letter equals the person's city first letter, we sort by city population, otherwise we sort\n                by name descending:\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={32} sampleUrl=\"samples/expressions/sort-advanced.pec\" runnable={true}/>\n            <br/>\n\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}