{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Add.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Add\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Add expressions are used to add 2 values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 61\n        }, this), \"An add expression is a code fragment which produces a value, whose type is determined by the values being added, and which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 60\n        }, this), \"An add expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a + b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 52\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Add expressions are sometimes commutative, but not always. Adding numbers is commutative, but adding Texts is not.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 134\n        }, this), \"However, to help in programming, Prompto supports implicit commutation, where if \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a + b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 102\n        }, this), \" does not make sense, it will treat it as \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b + a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 162\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding Text or Character values and other values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Adding a Text or Character value \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 53\n        }, this), \" and any other value \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 88\n        }, this), \" is legal if \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 115\n        }, this), \" has a textual representation.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 159\n        }, this), \"It returns a Text value, concatenating \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 60\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 79\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/expressions/add-text.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding Integer and Decimal values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Adding Integer and Decimal values returns an Integer value if both values are Integer, and a Decimal otherwise.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/expressions/add-number.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding Date and Period values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Adding Date and Period values returns a Date value, the Time section of the Period value is ignored.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/add-date-period.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding Time and Period values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Adding Time and Period values returns a Time value, the Date section of the Period value is ignored.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/add-time-period.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding DateTime and Period values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Adding DateTime and Period values returns a DateTime value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/add-datetime-period.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding Period and Period values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Adding Period and Period values returns a Period value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/add-period-period.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding List and List or Set values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Adding List and List or Set values is legal if both collections have the same item type. It returns a List value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/add-list.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding Set and List or Set values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Adding Set and List or Set values is legal if both collections have the same item type. It returns a Set value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/add-set.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding Tuple and Tuple, List or Set values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Adding Tuple and Tuple, List or Set values returns a Tuple value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/expressions/add-tuple.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding Dictionary and Dictionary values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Adding Dictionary and Dictionary values is legal if both collections have the same item type. It returns a Dictionary value.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 140\n        }, this), \"The items in the right-hand value supersede the items in the left-hand value if they have the same key.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/add-dictionary.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adding user defined values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Prompto supports adding user defined values. See categories for details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Add.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,KAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,eAIC;AAAA,6EAA4C;AAAA;AAAA;AAAA;AAAA,gBAA5C,wOAE2C;AAAA;AAAA;AAAA;AAAA,gBAF3C,kDAGmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHnC;AAAA;AAAA;AAAA;AAAA;AAAA,cAJD,eASC;AAAA,sJAAqH;AAAA;AAAA;AAAA;AAAA,gBAArH,oGACqF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADrF,6DACiJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADjJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATD,eAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbD,eAcC;AAAA,qEAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApC,wCAAuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAvE,gCAAkG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlG,iDAA8I;AAAA;AAAA;AAAA;AAAA,gBAA9I,0DAC2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD3C,wBAC8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD9D;AAAA;AAAA;AAAA;AAAA;AAAA,cAdD,eAiBC,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,kCAAlE;AAAqG,QAAA,QAAQ,EAAE;AAA/G,SAAoBL,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAjBD,eAkBC;AAAA;AAAA;AAAA;AAAA,cAlBD,eAoBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBD,eAqBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBD,eAsBC,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,oCAAlE;AAAuG,QAAA,QAAQ,EAAE;AAAjH,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAtBD,eAuBC;AAAA;AAAA;AAAA;AAAA,cAvBD,eAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBA,eA0BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BD,eA2BC,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,yCAAvD;AAAiG,QAAA,QAAQ,EAAE;AAA3G,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA3BD,eA4BC;AAAA;AAAA;AAAA;AAAA,cA5BD,eA+BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BG,eAgCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCD,eAiCH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,yCAAvD;AAAiG,QAAA,QAAQ,EAAE;AAA3G,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAjCG,eAkCH;AAAA;AAAA;AAAA;AAAA,cAlCG,eAoCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApCG,eAqCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArCD,eAsCH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,6CAAvD;AAAqG,QAAA,QAAQ,EAAE;AAA/G,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAtCG,eAuCH;AAAA;AAAA;AAAA;AAAA,cAvCG,eAyCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzCG,eA0CC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1CD,eA2CH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,2CAAvD;AAAmG,QAAA,QAAQ,EAAE;AAA7G,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA3CG,eA4CH;AAAA;AAAA;AAAA;AAAA,cA5CG,eA8CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CG,eA+CC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/CD,eAgDH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,kCAAvD;AAA0F,QAAA,QAAQ,EAAE;AAApG,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAhDG,eAiDH;AAAA;AAAA;AAAA;AAAA,cAjDG,eAmDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnDG,eAoDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApDG,eAqDH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,iCAAvD;AAAyF,QAAA,QAAQ,EAAE;AAAnG,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cArDG,eAsDH;AAAA;AAAA;AAAA;AAAA,cAtDG,eAwDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxDG,eAyDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzDG,eA0DH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,mCAAlE;AAAsG,QAAA,QAAQ,EAAE;AAAhH,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA1DG,eA2DH;AAAA;AAAA;AAAA;AAAA,cA3DG,eA6DJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7DI,eA8DH;AAAA,gKAA+H;AAAA;AAAA;AAAA;AAAA,gBAA/H;AAAA;AAAA;AAAA;AAAA;AAAA,cA9DG,eAiEH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,wCAAvD;AAAgG,QAAA,QAAQ,EAAE;AAA1G,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAjEG,eAkEH;AAAA;AAAA;AAAA;AAAA,cAlEG,eAoEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApEG,eAsEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtEI;AAAA,oBAAP;AAyEH;;AAhFyB;;AAoF9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Add\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n                <h2>Add expressions</h2>\n\n                <p>Add expressions are used to add 2 values.<br/>\n                    An add expression is a code fragment which produces a value, whose type is determined by the values being added, and which can then be used as an input for other operations:\n                    print, write, method call and so forth.<br/>\n                    An add expression has the form <code>a + b</code>.\n                </p>\n                <p>Add expressions are sometimes commutative, but not always. Adding numbers is commutative, but adding Texts is not.<br/>\n                    However, to help in programming, Prompto supports implicit commutation, where if <code>a + b</code> does not make sense, it will treat it as <code>b + a</code>.\n                </p>\n\n                <h3>Adding Text or Character values and other values</h3>\n                <p>Adding a Text or Character value <code>a</code> and any other value <code>b</code> is legal if <code>b</code> has a textual representation.<br/>\n                    It returns a Text value, concatenating <code>a</code> and <code>b</code>.\n                </p>\n                <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/expressions/add-text.pec\" runnable={true}/>\n                <br/>\n\n                <h3>Adding Integer and Decimal values</h3>\n                <p>Adding Integer and Decimal values returns an Integer value if both values are Integer, and a Decimal otherwise.</p>\n                <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/expressions/add-number.pec\" runnable={true}/>\n                <br/>\n\n               <h3>Adding Date and Period values</h3>\n                <p>Adding Date and Period values returns a Date value, the Time section of the Period value is ignored.</p>\n                <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/add-date-period.pec\" runnable={true}/>\n                <br/>\n\n\n            <h3>Adding Time and Period values</h3>\n                <p>Adding Time and Period values returns a Time value, the Date section of the Period value is ignored.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/add-time-period.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Adding DateTime and Period values</h3>\n                <p>Adding DateTime and Period values returns a DateTime value.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/add-datetime-period.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Adding Period and Period values</h3>\n                <p>Adding Period and Period values returns a Period value.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/add-period-period.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Adding List and List or Set values</h3>\n                <p>Adding List and List or Set values is legal if both collections have the same item type. It returns a List value.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/add-list.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Adding Set and List or Set values</h3>\n            <p>Adding Set and List or Set values is legal if both collections have the same item type. It returns a Set value.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/add-set.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Adding Tuple and Tuple, List or Set values</h3>\n            <p>Adding Tuple and Tuple, List or Set values returns a Tuple value.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/expressions/add-tuple.pec\" runnable={true}/>\n            <br/>\n\n           <h3>Adding Dictionary and Dictionary values</h3>\n            <p>Adding Dictionary and Dictionary values is legal if both collections have the same item type. It returns a Dictionary value.<br/>\n                The items in the right-hand value supersede the items in the left-hand value if they have the same key.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/add-dictionary.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Adding user defined values</h3>\n\n           <p>Prompto supports adding user defined values. See categories for details.</p>\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}