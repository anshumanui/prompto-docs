{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/Singletons.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../player/PromptoPlayer\";\nimport Topic from \"../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Singletons\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Singletons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There are situations which require having one and only one instance of a given category.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"If, for example, you were to define a \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"World\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 54\n        }, this), \" category, chances are you would only need one instance.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto directly supports this concept through \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Singletons\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 63\n        }, this), \", a specialized category which has one and only one instance.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Being a special category, a singleton supports most category features i.e. attributes and methods except the following:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"a singleton cannot derive from another category or singleton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"a singleton cannot contain abstract methods\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"a singleton cannot be instantiated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"a singleton cannot be made \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"mutable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Accessing singleton attributes and methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Singleton attributes and methods are accessible using the singleton name, which serves as both a type and the only instance.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Populating singleton attributes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"An immutable singleton would not be very useful, since it would only hold constant values known at coding time. On the other hand, it would be very difficult to ensure consistency of a mutable singleton in the context of multiple Workers. Prompto solves this problem using \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 43\n        }, this), \" blocks.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In the below example, we:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"define a 'Configuration' singleton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"populate its attributes inside a \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"with\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 54\n          }, this), \" block\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"read an attribute directly from the singleton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 12,\n        sampleUrl: \"samples/singletons/read.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"In the above example, it is safe to read \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 57\n        }, this), \" outside a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 80\n        }, this), \" block, because it only involves reading one value.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Calling singleton methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Singleton methods are likely to:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"access more than one attribute\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"change the singleton's attribute values\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"For those reasons, singleton methods can only be called within a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 81\n        }, this), \" block: \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 16,\n        sampleUrl: \"samples/singletons/call.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"How the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), \" block works\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 20\n        }, this), \" block ensures that only the main program or one Worker at a time can execute the statements contained in \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 41\n        }, this), \" block body. This protection spans across all \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 50\n        }, this), \" blocks for a given singleton. Internally, the main program or Worker takes ownership of the singleton until all statements in the block body are executed, thus blocking any other worker from simultaneously entering any \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), \" block for the singleton.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"JavaScript Workers do not share data, rather they communicate using messages. Although Prompto supports singletons on all platforms, developers are advised to avoid them in a browser if they use Workers, because using them can significantly slow down execution.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/Singletons.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../player/PromptoPlayer\";\nimport Topic from \"../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Singletons\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Singletons</h2>\n            <p>There are situations which require having one and only one instance of a given category.</p>\n            <p>If, for example, you were to define a <i>World</i> category, chances are you would only need one\n                instance.</p>\n            <p>Prompto directly supports this concept through <i>Singletons</i>, a specialized category which has one\n                and only one instance.</p>\n            <p>Being a special category, a singleton supports most category features i.e. attributes and methods\n                except the following:</p>\n            <ul>\n                <li>a singleton cannot derive from another category or singleton</li>\n                <li>a singleton cannot contain abstract methods</li>\n                <li>a singleton cannot be instantiated</li>\n                <li>a singleton cannot be made <i>mutable</i></li>\n            </ul>\n\n            <h3>Accessing singleton attributes and methods</h3>\n            <p>Singleton attributes and methods are accessible using the singleton name, which serves as both a type and\n                the only instance.</p>\n\n            <h3>Populating singleton attributes</h3>\n            <p>An immutable singleton would not be very useful, since it would only hold constant values known at coding\n                time. On the other hand, it would be very\n                difficult to ensure consistency of a mutable singleton in the context of multiple Workers. Prompto\n                solves this problem using <code>with</code> blocks.</p>\n            <p>In the below example, we:</p>\n            <ul>\n                <li>define a 'Configuration' singleton</li>\n                <li>populate its attributes inside a <code>with</code> block</li>\n                <li>read an attribute directly from the singleton</li>\n            </ul>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/singletons/read.pec\" runnable={true}/>\n            <p>In the above example, it is safe to read <i>login</i> outside a <code>with</code> block, because it only\n                involves reading one value.</p>\n            <br/>\n\n            <h3>Calling singleton methods</h3>\n            <p>Singleton methods are likely to:</p>\n            <ul>\n                <li>access more than one attribute</li>\n                <li>change the singleton's attribute values</li>\n            </ul>\n            <p>For those reasons, singleton methods can only be called within a <code>with</code> block: </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={16} sampleUrl=\"samples/singletons/call.pec\" runnable={true}/>\n            <br/>\n\n            <h3>How the <code>with</code> block works</h3>\n            <p>The <code>with</code> block ensures that only the main program or one Worker at a time can execute the\n                statements contained in <code>with</code> block body.\n                This protection spans across all <code>with</code> blocks for a given singleton. Internally, the main\n                program or Worker takes ownership of the singleton until all\n                statements in the block body are executed, thus blocking any other worker from simultaneously entering\n                any <code>with</code> block for the singleton.</p>\n            <p><i>JavaScript Workers do not share data, rather they communicate using messages. Although Prompto supports singletons on all platforms,\n                developers are advised to avoid them in a browser if they use Workers,\n                because using them can significantly slow down execution.</i></p>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}