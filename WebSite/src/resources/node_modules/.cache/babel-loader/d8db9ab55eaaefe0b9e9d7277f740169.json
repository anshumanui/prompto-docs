{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/comments.js\";\nimport PromptoPlayer from \"../prompto-player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function comments() {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto supports comments in the form of line comments.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 71\n      }, this), \"A line comment is a line of text starting by \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: String.raw`//`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 62\n      }, this), \" in E and O dialects, or \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"#\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 116\n      }, this), \" in M dialect.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 25\n      }, this), \"Prompto code is ususally not stored in files, so a comment cannot be attached to a file location. Instead, a comment is always attached to the next non-comment line of code.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 92\n      }, this), \"In the below example, the line comment is attached to the attribute declaration.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      sampleUrl: \"samples/definitions/comment.pec\"\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto does not support inline comments \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: String.raw`/* ... */`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 57\n      }, this), \", because it would be impossible to place them when translating code from one dialect to another.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 112\n      }, this), \"For the same reason, Prompto does not support end of line comments, such as: \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: [\"a = 2 \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: `// assign 2 to a`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 106\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 94\n      }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 141\n      }, this), \"The O dialect ignores line breaks, while the E and M dialects don't, so they would dangle around when translated.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }, this);\n}","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/comments.js"],"names":["PromptoPlayer","comments","String","raw","nextKey"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,iCAA1B;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAClC,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAGU;AAAA,yFAA0D;AAAA;AAAA;AAAA;AAAA,cAA1D,gEACiD;AAAA,kBAAOC,MAAM,CAACC,GAAI;AAAlB;AAAA;AAAA;AAAA;AAAA,cADjD,4CACuG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADvG,iCAEY;AAAA;AAAA;AAAA;AAAA,cAFZ,gMAI+E;AAAA;AAAA;AAAA;AAAA,cAJ/E;AAAA;AAAA;AAAA;AAAA;AAAA,YAHV,eAUU,QAAC,aAAD;AAA6C,MAAA,SAAS,EAAC;AAAvD,OAAoBH,aAAa,CAACI,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YAVV,eAYU;AAAA;AAAA;AAAA;AAAA,YAZV,eAaU;AAAA,2EAA4C;AAAA,kBAAOF,MAAM,CAACC,GAAI;AAAlB;AAAA;AAAA;AAAA;AAAA,cAA5C,oHACmG;AAAA;AAAA;AAAA;AAAA,cADnG,gGAEiF;AAAA,0CAAY;AAAA,oBAAK;AAAL;AAAA;AAAA;AAAA;AAAA,gBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFjF,oBAEgI;AAAA;AAAA;AAAA;AAAA,cAFhI;AAAA;AAAA;AAAA;AAAA;AAAA,YAbV;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAsBA","sourcesContent":["import PromptoPlayer from \"../prompto-player/PromptoPlayer\";\n\nexport default function comments() {\n\treturn (\n\t\t<li>\n\t\t\t<h2>Comments</h2>\n\n            <p>Prompto supports comments in the form of line comments.<br/>\n                A line comment is a line of text starting by <code>{String.raw`//`}</code> in E and O dialects, or <code>#</code> in M\n                dialect.<br/>\n                Prompto code is ususally not stored in files, so a comment cannot be attached to a file location.\n                Instead, a comment is always attached to the next non-comment line of code.<br/>\n                In the below example, the line comment is attached to the attribute declaration.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/definitions/comment.pec\"/>\n\n            <br/>\n            <p>Prompto does not support inline comments <code>{String.raw`/* ... */`}</code>,\n                because it would be impossible to place them when translating code from one dialect to another.<br/>\n                For the same reason, Prompto does not support end of line comments, such as: <code>a = 2 <i>{`// assign 2 to a`}</i></code>.<br/>\n                The O dialect ignores line breaks, while the E and M dialects don't, so they would dangle around when\n                translated.\n            </p>\n\t\t</li>\n\t)\n}"]},"metadata":{},"sourceType":"module"}