{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Type.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Type\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Type expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Type expressions are used to check for equality or equivalence of value type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 93\n        }, this), \"A type expression is a code fragment which produces a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Boolean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 71\n        }, this), \" value, which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 90\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Checking type of built-in values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Checking type of built-in values is done using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"is a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 67\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"is an\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 88\n        }, this), \" operator.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 116\n        }, this), \"Inequality of types is checked using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"is not a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 58\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"is not an\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 83\n        }, this), \" operator. Prompto supports.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 12,\n        sampleUrl: \"samples/expressions/type-is-native.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Checking type of user defined values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"When checking type of user defined values, Prompto checks for compatibility rather than equality.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/expressions/type-is-user.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Auto downcast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"When checking type of user defined values in an \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"if\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 64\n        }, this), \" statement, Prompto automatically downcasts the value type for the corresponding statements.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 20,\n        sampleUrl: \"samples/expressions/auto-cast.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Type.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,MAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA,iHAAgF;AAAA;AAAA;AAAA;AAAA,gBAAhF,yEAC0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD1D,2HAE6E;AAAA;AAAA;AAAA;AAAA,gBAF7E;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAQH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARG,eAWH;AAAA,uFAAsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAtD,uBAA2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA3E,6BAAuG;AAAA;AAAA;AAAA;AAAA,gBAAvG,4DAC6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD7C,uBACsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADtE;AAAA;AAAA;AAAA;AAAA;AAAA,cAXG,eAeH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,wCAAlE;AAA2G,QAAA,QAAQ,EAAE;AAArH,SAAoBJ,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAfG,eAgBH;AAAA;AAAA;AAAA;AAAA,cAhBG,eAkBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBG,eAqBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBG,eAuBH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,sCAAlE;AAAyG,QAAA,QAAQ,EAAE;AAAnH,SAAoBL,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAvBG,eAwBH;AAAA;AAAA;AAAA;AAAA,cAxBG,eA0BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BG,eA6BH;AAAA,oFAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BG,eAgCH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,mCAAlE;AAAsG,QAAA,QAAQ,EAAE;AAAhH,SAAoBL,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAhCG,eAiCH;AAAA;AAAA;AAAA;AAAA,cAjCG;AAAA,oBAAP;AAqCH;;AA5CyB;;AAgD9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Type\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Type expressions</h2>\n\n            <p>Type expressions are used to check for equality or equivalence of value type.<br/>\n                A type expression is a code fragment which produces a <code>Boolean</code> value, which can then be used\n                as an input for other operations: print, write, method call and so forth.<br/>\n            </p>\n            <h3>\n                Checking type of built-in values\n            </h3>\n            <p>Checking type of built-in values is done using the <code>is a</code> or <code>is an</code> operator.<br/>\n                Inequality of types is checked using the <code>is not a</code> or <code>is not an</code> operator.\n                Prompto supports.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/expressions/type-is-native.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Checking type of user defined values\n            </h3>\n            <p>When checking type of user defined values, Prompto checks for compatibility rather than equality.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/expressions/type-is-user.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Auto downcast\n            </h3>\n            <p>When checking type of user defined values in an <code>if</code> statement, Prompto automatically\n                downcasts the value type for the corresponding statements.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={20} sampleUrl=\"samples/expressions/auto-cast.pec\" runnable={true}/>\n            <br/>\n\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}