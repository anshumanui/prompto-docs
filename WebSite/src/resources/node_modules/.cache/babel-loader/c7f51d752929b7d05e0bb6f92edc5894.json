{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/methods/Definition.js\";\nimport React from 'react';\nimport Topic from \"../../../../content/Topic\";\nimport PromptoPlayer from \"../../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Definition\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Defining category methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A category method is identified by its category and its prototype, defined by its name and its accepted arguments.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A category method is defined by declaring, within a category definition, its prototype and optional return value, followed by the method statements.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The minimal prototype has the following form:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"In E dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: [\"define \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"methodName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 52\n            }, this), \" as method doing:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"In O dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"methodName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 45\n            }, this), \"() \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"In M dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: [\"def \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"methodName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 49\n            }, this), \"():\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A category method must be defined within a category definition, as follows:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 6,\n        sampleUrl: \"samples/categories/methods/definitions.pec\"\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Method names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A method name can be any valid identifier i.e. a word starting with a letter and followed by any number of letters or digits.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Method return types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A Prompto method can return any number of values.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"If no value is returned, the return type is known as \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Void\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 73\n        }, this), \" type.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"If exactly 1 value is returned, the return type can be specified. When not specified, it is inferred by Prompto.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Specifying the return type is done as follows:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"In E dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: [\"define \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"methodName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 52\n            }, this), \" as method returning \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 90\n            }, this), \" doing:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 39\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"In O dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"Type method methodName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 45\n            }, this), \"() \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"In M dialect: \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: [\"def \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"methodName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 49\n            }, this), \"() -> \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 72\n            }, this), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 26\n        }, this), \" is the name of an existing type. \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"If more than one value is returned, the return type is \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Tuple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 75\n        }, this), \". This can be convenient for quick development but should not be used for large scale applications, because Prompto does not infer the type of Tuple elements.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/methods/Definition.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Topic from \"../../../../content/Topic\";\nimport PromptoPlayer from \"../../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Definition\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n                <h2>Defining category methods</h2>\n                <p>A category method is identified by its category and its prototype, defined by its name and its accepted arguments.</p>\n                <p>A category method is defined by declaring, within a category definition, its prototype and optional return value, followed by the method statements.</p>\n                <p>The minimal prototype has the following form:</p>\n                <ul>\n                    <li>In E dialect: <code>define <i>methodName</i> as method doing:</code></li>\n                    <li>In O dialect: <code><i>methodName</i>() {}</code></li>\n                    <li>In M dialect: <code>def <i>methodName</i>():</code></li>\n                </ul>\n\n                <p>A category method must be defined within a category definition, as follows:</p>\n                <PromptoPlayer key={PromptoPlayer.nextKey()} lines={6} sampleUrl=\"samples/categories/methods/definitions.pec\"/>\n                <br/>\n\n\n                <h3>Method names</h3>\n                <p>A method name can be any valid identifier i.e. a word starting with a letter and followed by any number of letters or digits.</p>\n                <p/>\n                <h3>Method return types</h3>\n                <p>A Prompto method can return any number of values.</p>\n                <p>If no value is returned, the return type is known as <code>Void</code> type.</p>\n                <p>If exactly 1 value is returned, the return type can be specified. When not specified, it is inferred by Prompto.</p>\n                <p>Specifying the return type is done as follows:</p>\n                <ul>\n                    <li>In E dialect: <code>define <i>methodName</i> as method returning <i>Type</i> doing:</code> </li>\n                    <li>In O dialect: <code><i>Type method methodName</i>() {}</code></li>\n                    <li>In M dialect: <code>def <i>methodName</i>() -> <i>Type</i>:</code></li>\n                </ul>\n                <p>where <code><i>Type</i></code> is the name of an existing type. </p>\n                <p>If more than one value is returned, the return type is <code>Tuple</code>. This can be convenient for quick development\n                    but should not be used for large scale applications, because Prompto does not infer the type of Tuple elements.</p>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}