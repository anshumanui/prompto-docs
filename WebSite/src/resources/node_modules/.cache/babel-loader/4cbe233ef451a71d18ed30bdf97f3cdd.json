{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/SetType.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Set\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The Set type is a technical type used to keep together 0 or more \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"distinct\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 84\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 81\n        }, this), \" items of the same type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 22\n        }, this), \"The items themselves can be of any type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 57\n        }, this), \"A Set type is declared by adding angle brackets '<>' after the item type.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`Text<> -> the type Text set`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A Set literal must be enclosed in angle brackets '<' and '>', the items being separated by a comma ','.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`<12, 15, -3> -> a set of 3 Integers\n<\"Paris\", \"London\", \"Singapore\"> -> a Set of 3 Texts`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Items in a Set cannot be accessed individually, because the position in the Set may change internally when ensuring uniqueness.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 42\n        }, this), \"Set items are accessed using iterators or predicates.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`s = <12, 15, -3> -> assign a Set of 3 Integers to variable 's'\nfor each i in s -> iterate over items in Set referenced by variable 's'\ns contains 12 -> return true if Set referenced by variable 's' contains the Integer 12`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Set attributes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Set values have the following attributes:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 21\n          }, this), \": returns an Integer equal to the number of items in the set\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n          sampleUrl: \"samples/types/set/count.pec\",\n          runnable: true\n        }, PromptoPlayer.nextKey(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/SetType.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","String","raw","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,KAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA,qGAAoE;AAAA,iCAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBAApE,2CACS;AAAA;AAAA;AAAA;AAAA,gBADT,2DAE4C;AAAA;AAAA;AAAA;AAAA,gBAF5C;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAQH;AAAA,+BAAK;AAAA,oBAAOC,MAAM,CAACC,GAAI;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cARG,eASH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATG,eAUH;AAAA,+BAAK;AAAA,oBAAOD,MAAM,CAACC,GAAI;AACnC;AADiB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAVG,eAYH;AAAA,mKAC6B;AAAA;AAAA;AAAA;AAAA,gBAD7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAZG,eAeH;AAAA,+BAAK;AAAA,oBAAOD,MAAM,CAACC,GAAI;AACnC;AACA;AAFiB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAfG,eAkBH;AAAA;AAAA;AAAA;AAAA,cAlBG,eAoBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBG,eAuBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBG,eAwBH;AAAA,gCACI;AAAA,kCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,aAAD;AAA6C,UAAA,SAAS,EAAC,6BAAvD;AAAqF,UAAA,QAAQ,EAAE;AAA/F,WAAoBP,aAAa,CAACQ,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBG,eA4BH;AAAA;AAAA;AAAA;AAAA,cA5BG;AAAA,oBAAP;AAgCH;;AAvCyB;;AA2C1B,eAAe,IAAIN,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Set\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Set</h2>\n\n            <p>The Set type is a technical type used to keep together 0 or more <b><i>distinct</i></b> items of the same\n                type.<br/>\n                The items themselves can be of any type.<br/>\n                A Set type is declared by adding angle brackets '&lt;&gt;' after the item type.\n            </p>\n            <pre><code>{String.raw`Text<> -> the type Text set`}</code></pre>\n            <p>A Set literal must be enclosed in angle brackets '&lt;' and '&gt;', the items being separated by a comma ','.</p>\n            <pre><code>{String.raw`<12, 15, -3> -> a set of 3 Integers\n<\"Paris\", \"London\", \"Singapore\"> -> a Set of 3 Texts`}</code></pre>\n            <p>Items in a Set cannot be accessed individually, because the position in the Set may change internally\n                when ensuring uniqueness.<br/>\n                Set items are accessed using iterators or predicates.</p>\n            <pre><code>{String.raw`s = <12, 15, -3> -> assign a Set of 3 Integers to variable 's'\nfor each i in s -> iterate over items in Set referenced by variable 's'\ns contains 12 -> return true if Set referenced by variable 's' contains the Integer 12`}</code></pre>\n            <br/>\n\n            <h3>\n                Set attributes\n            </h3>\n            <p>Set values have the following attributes:</p>\n            <ul>\n                <li><code>count</code>: returns an Integer equal to the number of items in the set</li>\n                <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/set/count.pec\" runnable={true}/>\n            </ul>\n            <br/>\n\n        </>\n    ;\n    }\n\n    }\n\n    export default new ThisTopic();"]},"metadata":{},"sourceType":"module"}