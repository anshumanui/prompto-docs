{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/methods/Operators.js\";\nimport React from 'react';\nimport Topic from \"../../../../content/Topic\";\nimport PromptoPlayer from \"../../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Operators\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Category operators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"For categories which represent common values, it can be handy to provide operators that help write simple code.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A category operator method is a category method with a special name, which otherwise behaves like any regular category method.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Once the category operator method is defined, it can be used in expressions involving operators.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In the below example, we define an 'Amount' category with a '+' operator method:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 16,\n        sampleUrl: \"samples/categories/methods/operator.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Supported operators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"binary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 33\n        }, this), \" operators i.e. operators which take 2 operands: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 27\n        }, this), \", \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 43\n        }, this), \", \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 59\n        }, this), \", \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 75\n        }, this), \", \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\\\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 91\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 110\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"By definition, these operators can only accept one parameter, and MUST return a value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The parameter type and return type can be of any type.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Like any category methods, operator methods can be overloaded and overridden.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Operators are powerful constructs that let you write concise code. However, it is tempting to overuse them, thus making your code unreadable. It is strongly recommended to define operators only for operations which naturally translate to common thinking.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/methods/Operators.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,WAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAMH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANG,eAQH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARG,eASH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATG,eAUH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,yCAAlE;AAA4G,QAAA,QAAQ,EAAE;AAAtH,SAAoBJ,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAVG,eAYH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZG,eAaH;AAAA,qDAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApB,oEACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADd,qBAC8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD9B,qBAC8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD9C,qBAC8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD9D,qBAC8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD9E,wBACiG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADjG;AAAA;AAAA;AAAA;AAAA;AAAA,cAbG,eAgBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBG,eAiBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBG,eAkBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBG,eAmBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBG;AAAA,oBAAP;AAwBH;;AA/ByB;;AAmC9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../../content/Topic\";\nimport PromptoPlayer from \"../../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Operators\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Category operators</h2>\n\n            <p>For categories which represent common values, it can be handy to provide operators that help write simple\n                code.</p>\n            <p>A category operator method is a category method with a special name, which otherwise behaves like any\n                regular category method.</p>\n            <p>Once the category operator method is defined, it can be used in expressions involving operators.</p>\n            <p>In the below example, we define an 'Amount' category with a '+' operator method:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={16} sampleUrl=\"samples/categories/methods/operator.pec\" runnable={true}/>\n\n            <h3>Supported operators</h3>\n            <p>Prompto supports <i>binary</i> operators i.e. operators which take 2\n                operands: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>\\</code> and <code>%</code>.\n            </p>\n            <p>By definition, these operators can only accept one parameter, and MUST return a value.</p>\n            <p>The parameter type and return type can be of any type.</p>\n            <p>Like any category methods, operator methods can be overloaded and overridden.</p>\n            <p>\n                Operators are powerful constructs that let you write concise code. However, it is tempting to overuse them, thus making your code unreadable.\n                It is strongly recommended to define operators only for operations which naturally translate to common thinking.\n            </p>\n        </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}