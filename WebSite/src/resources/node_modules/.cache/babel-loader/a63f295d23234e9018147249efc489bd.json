{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/libraries/topics/data/CSV.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"CSV\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Reading CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto is able to analyze CSV data provided as Text.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 77\n        }, this), \"The Text itself should be read from resources using \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"read\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 77\n        }, this), \" statements.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 106\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"(support for parsing CSV resources directly is not available yet)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"CSV methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"readCsv\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 32\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"text, columnNames, separator, quote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 47\n            }, this), \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 90\n            }, this), \"This method returns a \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"Document[]\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 51\n            }, this), \" i.e. a list of Documents.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 100\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: String.raw`define readCsv as native method receiving text, Text<:> columnNames = nothing, Character separator = ',', Character quote = '\"' returning Document[]`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 37\n            }, this), \" argument must contain valid CSV text.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 86\n            }, this), \"The \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"columnNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 37\n            }, this), \" argument is optional. When provided it is used to rename incoming columns.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 130\n            }, this), \"The \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"separator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 37\n            }, this), \" optional argument is used to detect \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"fields\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 90\n            }, this), \" within a CSV \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"record\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 117\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 131\n            }, this), \"The \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"quote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 37\n            }, this), \" optional argument is used to unwrap field values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 99\n            }, this), \"Here is a simple example:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"samples/data/csvSimple.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Here is an example of mapping column names:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"samples/data/csvMapping.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"Notice how the \\\"Code\\\" column was renamed to \\\"id\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 32\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"iterateCsv\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 32\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"text, columnNames, separator, quote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 50\n            }, this), \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 93\n            }, this), \"This method is similar to \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"readCsv\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 55\n            }, this), \", but returns an \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"Iterator<Document>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 92\n            }, this), \", which is convenient and consumes less memory.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 176\n            }, this), \"Here is an example:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"samples/data/csvIterate.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/libraries/topics/data/CSV.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","String","raw","nextKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"CSV\");\n    }\n\n    renderContent(topicSelected) {\n        return <React.Fragment>\n                    <h2>Reading CSV</h2>\n                    <p>Prompto is able to analyze CSV data provided as Text.<br/>\n                        The Text itself should be read from resources using <code>read</code> statements.<br/>\n                        <i>(support for parsing CSV resources directly is not available yet)</i></p>\n                    <h3>CSV methods</h3>\n                    <ul>\n                        <li><p><b>readCsv</b> <i>text, columnNames, separator, quote</i>:<br/>\n                            This method returns a <code>Document[]</code> i.e. a list of Documents.<br/>\n                        </p>\n                            <pre>{String.raw`define readCsv as native method receiving text, Text<:> columnNames = nothing, Character separator = ',', Character quote = '\"' returning Document[]`}</pre>\n                            <p>\n                                The <i>text</i> argument must contain valid CSV text.<br/>\n                                The <i>columnNames</i> argument is optional. When provided it is used to rename incoming columns.<br/>\n                                The <i>separator</i> optional argument is used to detect <i>fields</i> within a CSV <i>record</i>.<br/>\n                                The <i>quote</i> optional argument is used to unwrap field values.<br/>\n                                Here is a simple example:</p>\n                            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/data/csvSimple.pec\" runnable={true}/>\n                            <p/>\n                            <p>Here is an example of mapping column names:</p>\n                            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/data/csvMapping.pec\" runnable={true}/>\n                            <p><i>Notice how the \"Code\" column was renamed to \"id\"</i></p>\n                            <p/>\n                        </li>\n                        <li><p><b>iterateCsv</b> <i>text, columnNames, separator, quote</i>:<br/>\n                            This method is similar to <code>readCsv</code>, but returns an <code>Iterator&lt;Document&gt;</code>, which is convenient and consumes less memory.<br/>\n                            Here is an example:</p>\n                            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/data/csvIterate.pec\" runnable={true}/>\n                        <p/>\n                        </li>\n                    </ul>\n\n            </React.Fragment>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}