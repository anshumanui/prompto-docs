{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/methods/overloading.js\";\nimport PromptoPlayer from \"../../prompto-player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Overloading() {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Overloading methods\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto supports method \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"overloading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 40\n      }, this), \", where 2 methods have the same name but different parameters. \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"When a method is \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"overloaded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 33\n      }, this), \", Prompto selects the most appropriate one based on the best match of the \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"proposed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 21\n      }, this), \" parameters with respect to the required arguments. This matching is performed using the sequence of the parameters in the method call.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In the below example, the 2 methods have the same name, but a different number of arguments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      lines: 10,\n      sampleUrl: \"samples/methods/overloaded-count.pec\",\n      runnable: true\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"uk-argin-large-top\",\n      children: [\"Method \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"overloading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 54\n      }, this), \" also works with different argument types.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Each \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"overloaded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 21\n      }, this), \" method provides a behavior specific to its argument types.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"When a method is \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"overloaded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 33\n      }, this), \", Prompto selects the most appropriate one at runtime i.e. the one for which the \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"actual\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 27\n      }, this), \" parameters best match the required method arguments, based on the sequence of the method call. This is different from many languages such as Java, C# or C++, where the resolution is decided at compile time. \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      lines: 10,\n      sampleUrl: \"samples/methods/overloaded-type.pec\",\n      runnable: true\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }, this);\n}\n_c = Overloading;\n\nvar _c;\n\n$RefreshReg$(_c, \"Overloading\");","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/methods/overloading.js"],"names":["PromptoPlayer","Overloading","nextKey"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,oCAA1B;;AAEA,eAAe,SAASC,WAAT,GAAuB;AACrC,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAGU;AAAA,0DAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAHV,eAIU;AAAA,mDAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAApB,6FACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADR;AAAA;AAAA;AAAA;AAAA;AAAA,YAJV,eAOU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPV,eAQU,QAAC,aAAD;AAA6C,MAAA,KAAK,EAAE,EAApD;AAAwD,MAAA,SAAS,EAAC,sCAAlE;AAAyG,MAAA,QAAQ,EAAE;AAAnH,OAAoBD,aAAa,CAACE,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YARV,eAUU;AAAG,MAAA,SAAS,EAAC,oBAAb;AAAA,yCAAyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,YAVV,eAWU;AAAA,uCAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA,YAXV,eAYU;AAAA,mDAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAApB,oGACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADd;AAAA;AAAA;AAAA;AAAA;AAAA,YAZV,eAgBU,QAAC,aAAD;AAA6C,MAAA,KAAK,EAAE,EAApD;AAAwD,MAAA,SAAS,EAAC,qCAAlE;AAAwG,MAAA,QAAQ,EAAE;AAAlH,OAAoBF,aAAa,CAACE,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YAhBV;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAoBA;KArBuBD,W","sourcesContent":["import PromptoPlayer from \"../../prompto-player/PromptoPlayer\";\n\nexport default function Overloading() {\n\treturn (\n\t\t<li>\n\t\t\t<h2>Overloading methods</h2>\n\n            <p>Prompto supports method <i>overloading</i>, where 2 methods have the same name but different parameters. </p>\n            <p>When a method is <i>overloaded</i>, Prompto selects the most appropriate one based on the best match of\n                the <i>proposed</i> parameters with respect to the required arguments. This matching is performed using the sequence of the parameters\n                in the method call.</p>\n            <p>In the below example, the 2 methods have the same name, but a different number of arguments:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/methods/overloaded-count.pec\" runnable={true}/>\n\n            <p className=\"uk-argin-large-top\">Method <i>overloading</i> also works with different argument types.</p>\n            <p>Each <i>overloaded</i> method provides a behavior specific to its argument types.</p>\n            <p>When a method is <i>overloaded</i>, Prompto selects the most appropriate one at runtime i.e. the one for\n                which the <i>actual</i> parameters best match the required method arguments,\n                based on the sequence of the method call. This is different from many languages such as Java, C# or C++,\n                where the resolution is decided at compile time. </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/methods/overloaded-type.pec\" runnable={true}/>\n\t\t</li>\n\t)\n}"]},"metadata":{},"sourceType":"module"}