{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/bindings/Categories.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Categories\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Binding categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto can expose \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"native\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 35\n        }, this), \" objects, and interact with them, as if they were Prompto objects. This is acheved using Prompto \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"native\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 47\n        }, this), \" categories. Native categories have a lot in common with regular Prompto categories, with the following exceptions:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"They cannot inherit from other categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"They cannot be enumerated\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"They only support native methods\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"They may have no attribute\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Binding categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The first step in binding categories is to bind the Prompto category itself to an host language equivalent. Binding categories is done as follows:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/bindings/category.pec\"\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Notice the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"native\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 27\n        }, this), \" keyword in the category definition. This denotes a binding category.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The category body must comprise exactly 1 category binding statement, which must itself comprise exactly 1 binding statement per supported host language.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Binding a category with a Java class\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Binding a category with a Java class is done by using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Java:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 74\n        }, this), \" keyword, followed by a Java full class name.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The class must have a public parameter-less constructor.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: \"Java: java.io.PrintStream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Binding a category with a C# class\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Binding a category with a C# class is done by using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"C#:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 72\n        }, this), \" keyword, followed by a C# full class name.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The class must have a public parameter-less constructor.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: \"C#: System.IO.TextWriter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Binding a category with a Python 2 class\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Binding a category with a Python 2 class is done by using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Python2:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 78\n        }, this), \" keyword, followed by a Python 2 class name.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"If the Python 2 statement refers to a class which does not belong to the global namespace, the import module must be provided.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: \"Python2: StringIO from module: StringIO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Binding a category with a Python 3 class\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Binding a category with a Python 3 class is done by using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Python2:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 78\n        }, this), \" keyword, followed by a Python 3 class name.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"If the Python 3 statement refers to a class which does not belong to the global namespace, the import module must be provided.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: \"Python3: StringIO from module: io\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Binding a category with a JavaScript function\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Binding a category with a JavaScript function is done by using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`JavaScript:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 83\n        }, this), \" keyword, followed by a JavaScript function name.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The JavaScript function must have a prototype, and the constructor must return \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"this\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 95\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"If the JavaScript is a method or variable which does not belong to the global namespace, the import module must be provided.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: String.raw`JavaScript: writer from module: prompto/io/io.js`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Binding attributes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Prompto automatically binds category attributes, if any, to their corresponding host language equivalent. This may require providing a \\\"proxy\\\" class in the host language which maps Prompto attribute names to actual names. Alternately, attribute name bridging can be achieved using native getters and setters.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The below is an example of using a getter to bind a virtual attribute:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 20,\n        sampleUrl: \"samples/bindings/attribute.pec\"\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Binding methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Prompto native categories can have methods, like regular Prompto categories, these methods simply need to be native.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto native category methods share a lot with Prompto native global methods. The only difference is they can make use of \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"this\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 38\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"self\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 59\n        }, this), \", which both represent the native instance in all host languages.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Here is an example:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 20,\n        sampleUrl: \"samples/bindings/category-method.pec\"\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/bindings/Categories.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey","String","raw"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Categories\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Binding categories</h2>\n\n            <p>Prompto can expose <i>native</i> objects, and interact with them, as if they were Prompto objects.\n                This is acheved using Prompto <i>native</i> categories. Native categories have a lot in common with\n                regular Prompto categories,\n                with the following exceptions:\n                <ul>\n                    <li>They cannot inherit from other categories</li>\n                    <li>They cannot be enumerated</li>\n                    <li>They only support native methods</li>\n                    <li>They may have no attribute</li>\n                </ul>\n            </p>\n            <h3>Binding categories</h3>\n            <p>The first step in binding categories is to bind the Prompto category itself to an host language\n                equivalent.\n                Binding categories is done as follows:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/bindings/category.pec\"/>\n\n            <p>Notice the <code>native</code> keyword in the category definition. This denotes a binding category.</p>\n            <p>The category body must comprise exactly 1 category binding statement, which must itself comprise exactly\n                1 binding statement per\n                supported host language.</p>\n\n            <h4>Binding a category with a Java class</h4>\n            <p>Binding a category with a Java class is done by using the <code>Java:</code> keyword, followed by a Java\n                full class name.</p>\n            <p>The class must have a public parameter-less constructor.</p>\n            <pre>Java: java.io.PrintStream</pre>\n\n            <h4>Binding a category with a C# class</h4>\n            <p>Binding a category with a C# class is done by using the <code>C#:</code> keyword, followed by a C# full\n                class name.</p>\n            <p>The class must have a public parameter-less constructor.</p>\n            <pre>C#: System.IO.TextWriter</pre>\n\n            <h4>Binding a category with a Python 2 class</h4>\n            <p>Binding a category with a Python 2 class is done by using the <code>Python2:</code> keyword, followed by\n                a Python 2 class name.</p>\n            <p>If the Python 2 statement refers to a class which does not belong to the global namespace,\n                the import module must be provided.</p>\n            <pre>Python2: StringIO from module: StringIO</pre>\n\n            <h4>Binding a category with a Python 3 class</h4>\n            <p>Binding a category with a Python 3 class is done by using the <code>Python2:</code> keyword, followed by\n                a Python 3 class name.</p>\n            <p>If the Python 3 statement refers to a class which does not belong to the global namespace,\n                the import module must be provided.</p>\n            <pre>Python3: StringIO from module: io</pre>\n\n\n            <h4>Binding a category with a JavaScript function</h4>\n            <p>Binding a category with a JavaScript function is done by using the <code>{String.raw`JavaScript:`}</code> keyword,\n                followed by a JavaScript function name.</p>\n            <p>The JavaScript function must have a prototype, and the constructor must return <code>this</code>.</p>\n            <p>If the JavaScript is a method or variable which does not belong to the global namespace, the import\n                module must be provided.</p>\n            <pre>{String.raw`JavaScript: writer from module: prompto/io/io.js`}</pre>\n\n            <h3>Binding attributes</h3>\n            <p>Prompto automatically binds category attributes, if any, to their corresponding host language equivalent.\n                This may require providing a \"proxy\" class in the host language which maps Prompto attribute names to\n                actual names.\n                Alternately, attribute name bridging can be achieved using native getters and setters.</p>\n            <p>The below is an example of using a getter to bind a virtual attribute:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={20} sampleUrl=\"samples/bindings/attribute.pec\"/>\n\n            <h3>Binding methods</h3>\n\n            <p>Prompto native categories can have methods, like regular Prompto categories, these methods simply need to\n                be native.</p>\n            <p>Prompto native category methods share a lot with Prompto native global methods. The only difference is\n                they can make use of <code>this</code> or <code>self</code>,\n                which both represent the native instance in all host languages.</p>\n\n            <p>Here is an example:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={20} sampleUrl=\"samples/bindings/category-method.pec\"/>\n\n             </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}