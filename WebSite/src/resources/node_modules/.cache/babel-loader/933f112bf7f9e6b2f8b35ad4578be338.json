{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/types/attribute.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Attribute() {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Attribute\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"Attribute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 20\n      }, this), \" type is a semantic type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 67\n      }, this), \"Prompto encourages technologists to use semantic types rather than technical ones.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 99\n      }, this), \"A semantic type is a type defined by meaning rather than structure.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 84\n      }, this), \"For example \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"dateOfBirth\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 29\n      }, this), \" is a semantic type, while \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 80\n      }, this), \" is a technical type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 22\n      }, this), \"In Prompto, semantic types are defined through attribute definitions.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 86\n      }, this), \"An attribute is defined by simply combining a name with a technical or category type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 102\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      sampleUrl: \"samples/types/attribute/simple.pec\"\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Constraints\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Additionally, attributes may also have to fit within value domains.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 83\n      }, this), \"These can be defined using lexical patterns, lists of values or computable expressions.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 104\n      }, this), \"Computable expressions can refer to the underlying value using the keyword \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 92\n      }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      sampleUrl: \"samples/types/attribute/constraint.pec\"\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Storage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Finally, attributes are used to define the data store schema.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 77\n      }, this), \"To achieve this, storable attribute definitions must be preceded with the \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"storable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 91\n      }, this), \" keyword.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 121\n      }, this), \"If the attribute is to be searchable, it must also be indexed.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 79\n      }, this), \"For all technical types except Text, this is achieved by simply adding \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"with index\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 88\n      }, this), \" to the attribute definition.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      sampleUrl: \"samples/types/attribute/storable.pec\"\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Indexing Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Indexing Text attributes requires a bit more attention.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 71\n      }, this), \"Text attributes may be used as unique identifiers. Examples of such are a product reference or social security number.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 33\n      }, this), \"Such Text attributes should be indexed using \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 62\n      }, this), \" indexing, which is case sensitive.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 113\n      }, this), \"Most Text attributes are better indexed insensitively of case, and would happily benefit from a phonetic search.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 24\n      }, this), \"Such Text attributes should be indexed using \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 62\n      }, this), \" indexing, which is not case sensitive.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 27\n      }, this), \"(depending on the data store implementation, phonetic search may or not be available).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 103\n      }, this), \"Finally, some Text attributes are actually sentences rather than 'atomic' values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 98\n      }, this), \"For these, it is often preferable to use \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 58\n      }, this), \" indexing.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 86\n      }, this), \"Prompto lets you combine the 3 index types. It is rare however to simultaneously need more than 1 of them.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n      sampleUrl: \"samples/types/attribute/textindex.pec\"\n    }, PromptoPlayer.nextKey(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 3\n  }, this);\n}\n_c = Attribute;\n\nvar _c;\n\n$RefreshReg$(_c, \"Attribute\");","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/types/attribute.js"],"names":["Attribute","PromptoPlayer","nextKey"],"mappings":";;AAAA,eAAe,SAASA,SAAT,GAAqB;AACnC,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAGU;AAAA,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP,4CAAsD;AAAA;AAAA;AAAA;AAAA,cAAtD,qGACsF;AAAA;AAAA;AAAA;AAAA,cADtF,sFAEuE;AAAA;AAAA;AAAA;AAAA,cAFvE,+BAGgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHhB,8CAGmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHnE,wCAIS;AAAA;AAAA;AAAA;AAAA,cAJT,wFAKyE;AAAA;AAAA;AAAA;AAAA,cALzE,wGAMyF;AAAA;AAAA;AAAA;AAAA,cANzF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHV,eAWU,QAAC,aAAD;AAA6C,MAAA,SAAS,EAAC;AAAvD,OAAoBC,aAAa,CAACC,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YAXV,eAaU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbV,eAeU;AAAA,qGAAsE;AAAA;AAAA;AAAA;AAAA,cAAtE,0GAC2F;AAAA;AAAA;AAAA;AAAA,cAD3F,8FAE+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAF/E,oBAEkG;AAAA;AAAA;AAAA;AAAA,cAFlG;AAAA;AAAA;AAAA;AAAA;AAAA,YAfV,eAmBU,QAAC,aAAD;AAA6C,MAAA,SAAS,EAAC;AAAvD,OAAoBD,aAAa,CAACC,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YAnBV,eAqBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBV,eAuBU;AAAA,+FAAgE;AAAA;AAAA;AAAA;AAAA,cAAhE,6FAC8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD9E,4BAC4G;AAAA;AAAA;AAAA;AAAA,cAD5G,iFAEkE;AAAA;AAAA;AAAA;AAAA,cAFlE,0FAG2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAH3E,gDAIyB;AAAA;AAAA;AAAA;AAAA,cAJzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBV,eA6BU,QAAC,aAAD;AAA6C,MAAA,SAAS,EAAC;AAAvD,OAAoBD,aAAa,CAACC,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YA7BV,eA+BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA/BV,eAiCU;AAAA,yFAA0D;AAAA;AAAA;AAAA;AAAA,cAA1D,yIAEoB;AAAA;AAAA;AAAA;AAAA,cAFpB,gEAGiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHjD,sDAGoG;AAAA;AAAA;AAAA;AAAA,cAHpG,mIAKW;AAAA;AAAA;AAAA;AAAA,cALX,gEAMiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANjD,0DAOc;AAAA;AAAA;AAAA;AAAA,cAPd,yGAQ0F;AAAA;AAAA;AAAA;AAAA,cAR1F,oGASqF;AAAA;AAAA;AAAA;AAAA,cATrF,4DAU6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAV7C,6BAUyE;AAAA;AAAA;AAAA;AAAA,cAVzE,6HAYS;AAAA;AAAA;AAAA;AAAA,cAZT;AAAA;AAAA;AAAA;AAAA;AAAA,YAjCV,eA+CU,QAAC,aAAD;AAA6C,MAAA,SAAS,EAAC;AAAvD,OAAoBD,aAAa,CAACC,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,YA/CV;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAmDA;KApDuBF,S","sourcesContent":["export default function Attribute() {\n\treturn (\n\t\t<li>\n\t\t\t<h2>Attribute</h2>\n\n            <p>The <code>Attribute</code> type is a semantic type.<br/>\n                Prompto encourages technologists to use semantic types rather than technical ones.<br/>\n                A semantic type is a type defined by meaning rather than structure.<br/>\n                For example <code>dateOfBirth</code> is a semantic type, while <code>Date</code> is a technical\n                type.<br/>\n                In Prompto, semantic types are defined through attribute definitions.<br/>\n                An attribute is defined by simply combining a name with a technical or category type.<br/>\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/attribute/simple.pec\"/>\n\n            <h2>Constraints</h2>\n\n            <p>Additionally, attributes may also have to fit within value domains.<br/>\n                These can be defined using lexical patterns, lists of values or computable expressions.<br/>\n                Computable expressions can refer to the underlying value using the keyword <code>value</code>.<br/>\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/attribute/constraint.pec\"/>\n\n            <h2>Storage</h2>\n\n            <p>Finally, attributes are used to define the data store schema.<br/>\n                To achieve this, storable attribute definitions must be preceded with the <code>storable</code> keyword.<br/>\n                If the attribute is to be searchable, it must also be indexed.<br/>\n                For all technical types except Text, this is achieved by simply adding <code>with index</code> to the\n                attribute definition.<br/>\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/attribute/storable.pec\"/>\n\n            <h2>Indexing Text</h2>\n\n            <p>Indexing Text attributes requires a bit more attention.<br/>\n                Text attributes may be used as unique identifiers. Examples of such are a product reference or social\n                security number.<br/>\n                Such Text attributes should be indexed using <code>key</code> indexing, which is case sensitive.<br/>\n                Most Text attributes are better indexed insensitively of case, and would happily benefit from a phonetic\n                search.<br/>\n                Such Text attributes should be indexed using <code>value</code> indexing, which is not case\n                sensitive.<br/>\n                (depending on the data store implementation, phonetic search may or not be available).<br/>\n                Finally, some Text attributes are actually sentences rather than 'atomic' values.<br/>\n                For these, it is often preferable to use <code>words</code> indexing.<br/>\n                Prompto lets you combine the 3 index types. It is rare however to simultaneously need more than 1 of\n                them.<br/>\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/attribute/textindex.pec\"/>\n\t\t</li>\n\t)\n}"]},"metadata":{},"sourceType":"module"}