{"ast":null,"code":"// eslint-disable-next-line\nconst globals = self; // setup nodejs compatible require paths\n\nglobals.Honey = {\n  'requirePath': ['..']\n}; // walk up to js folder\n\nglobals.importScripts(\"/js/lib/require.js\", \"/js/lib/prompto.core.bundle.js\");\nconst prompto = globals.prompto;\nglobals.intrinsic = prompto.intrinsic; // required by native libraries\n\nfunction loadText(url, success) {\n  var xhr = new XMLHttpRequest();\n\n  xhr.onerror = function (e) {\n    console.log(\"Error \" + e.target.status + \" occurred while receiving the document.\");\n    return null;\n  };\n\n  xhr.onload = function (e) {\n    success(xhr.responseText);\n  };\n\n  xhr.open('GET', url);\n  if (url[0] !== \"/\" && url[0] !== \".\") xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n  xhr.send(null);\n} // parse prompto code\n\n\nfunction parse(content, dialect) {\n  const klass = prompto.parser[dialect + \"CleverParser\"];\n  const parser = new klass(content);\n  return parser.parse();\n} // translate code to dialect\n\n\nfunction translate(message) {\n  // parse incoming code\n  var data = message.data;\n  var context = globals.librariesContext.clone();\n  var decls = parse(data.content, data.from);\n  decls.register(context); // translate it\n\n  var dialect = prompto.parser.Dialect[data.to];\n  var writer = new prompto.utils.CodeWriter(dialect, context);\n  decls.toDialect(writer);\n  return {\n    translated: writer.toString()\n  };\n} // execute code in dialect\n\n\nfunction execute(message) {\n  // manage output\n  console.log = function (text) {\n    postMessage({\n      inResponseTo: message.id,\n      keepHandlerAlive: true,\n      data: {\n        toStdOut: text\n      }\n    });\n  };\n\n  console.error = function (text) {\n    postMessage({\n      inResponseTo: message.id,\n      keepHandlerAlive: true,\n      data: {\n        toStdErr: text\n      }\n    });\n  }; // parse incoming code\n\n\n  const data = message.data;\n  const context = globals.librariesContext.clone();\n  console.log(\"Running sample...\\n\");\n  const decls = parse(data.content, data.dialect);\n  decls.register(context);\n  let testName = null;\n  decls.forEach(decl => {\n    if (decl instanceof prompto.declaration.TestMethodDeclaration) testName = decl.name;\n  }); // wire cursor, required by iterator\n\n  prompto.memstore.MemStore.Cursor = prompto.intrinsic.Cursor; // run \"main\" method, using fresh store\n\n  prompto.store.$DataStore.instance = new prompto.memstore.MemStore();\n  if (testName) prompto.runtime.Interpreter.interpretTest(context, testName);else prompto.runtime.Interpreter.interpret(context, \"main\", \"\"); // done\n\n  return {\n    toStdOut: \"Success!\\n\"\n  };\n}\n\nfunction repl(message) {\n  const klass = prompto.parser[message.data.dialect + \"CleverParser\"];\n  const parser = new klass(message.data.input);\n  parser.removeErrorListeners();\n  parser.addErrorListener(new prompto.problem.ProblemRaiser());\n\n  try {\n    const thing = parser.parse_repl_input();\n\n    if (thing instanceof prompto.declaration.Declaration) {\n      thing.register(globals.replContext);\n      return {\n        toStdOut: \"Registered \" + thing.name\n      };\n    } else if (thing.interpret) {\n      const value = thing.interpret(globals.replContext);\n      if (value) return {\n        toStdOut: value.toString()\n      };else return {\n        toStdOut: \"<void>\"\n      };\n    } else {\n      return {\n        toStdErr: \"Unsupported:\" + message.data.input\n      };\n    }\n  } catch (error) {\n    return {\n      toStdErr: error.message\n    };\n  }\n}\n\nfunction deleteRepl(message) {\n  const name = message.data.name;\n  const decl = globals.replContext.getRegistered(name);\n  if (!decl) return {\n    toStdErr: \"Not found: \" + name\n  };else {\n    if (decl.unregister) {\n      if (decl instanceof prompto.runtime.MethodDeclarationMap) delete globals.replContext.declarations[name];else decl.unregister(globals.replContext);\n      return {\n        toStdOut: \"Deleted declaration \" + name\n      };\n    } else {\n      delete globals.replContext.instances[name];\n      delete globals.replContext.values[name];\n      return {\n        toStdOut: \"Deleted variable \" + name\n      };\n    }\n  }\n}\n\nfunction resetRepl(message) {\n  globals.replContext = globals.librariesContext.newLocalContext();\n  return {\n    toStdOut: \"<ok>\"\n  };\n}\n\nfunction showRepl(message) {\n  const items = [];\n  var dialect = prompto.parser.Dialect[message.data.dialect];\n\n  for (var name in globals.replContext.declarations) {\n    const decl = globals.replContext.declarations[name];\n    const decls = decl instanceof prompto.runtime.MethodDeclarationMap ? decl.getAll() : [decl];\n    decls.forEach(d => {\n      const writer = new prompto.utils.CodeWriter(dialect, globals.replContext);\n      d.toDialect(writer);\n      items.push(writer.toString());\n    });\n  }\n\n  for (name in globals.replContext.values) {\n    const value = globals.replContext.values[name];\n    items.push(name + \": \" + value.toString());\n  }\n\n  if (items.length > 0) return {\n    items: items\n  };else return {\n    toStdOut: \"<context is empty>\",\n    items: []\n  };\n}\n\nconst dispatch = {\n  translate: translate,\n  execute: execute,\n  deleteRepl: deleteRepl,\n  resetRepl: resetRepl,\n  showRepl: showRepl,\n  repl: repl\n}; // manage events\n\nonmessage = function (event) {\n  var message = event.data;\n  var handler = dispatch[message.verb];\n  var data = handler(message);\n  var response = {\n    inResponseTo: message.id,\n    data: data\n  };\n  postMessage(response);\n}; // create global context with pre-loaded libraries\n\n\nglobals.librariesContext = prompto.runtime.Context.newGlobalsContext();\nresetRepl();\nloadText(\"/prompto/prompto.pec\", code => {\n  let decls = parse(code, \"E\");\n  decls.register(globals.librariesContext); // remove the original \"print\" method\n\n  const decl = {\n    name: \"print\"\n  };\n  globals.librariesContext.unregisterMethodDeclaration(decl, \"any\"); // replace \"print\" with a custom \"print\" method\n\n  code = String.raw`native method print ( any value ) { JavaScript: console.log(value.toString()); }`;\n  decls = parse(code, \"O\");\n  decls.register(globals.librariesContext);\n});","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/player/PromptoWorker.js"],"names":["globals","self","Honey","importScripts","prompto","intrinsic","loadText","url","success","xhr","XMLHttpRequest","onerror","e","console","log","target","status","onload","responseText","open","setRequestHeader","send","parse","content","dialect","klass","parser","translate","message","data","context","librariesContext","clone","decls","from","register","Dialect","to","writer","utils","CodeWriter","toDialect","translated","toString","execute","text","postMessage","inResponseTo","id","keepHandlerAlive","toStdOut","error","toStdErr","testName","forEach","decl","declaration","TestMethodDeclaration","name","memstore","MemStore","Cursor","store","$DataStore","instance","runtime","Interpreter","interpretTest","interpret","repl","input","removeErrorListeners","addErrorListener","problem","ProblemRaiser","thing","parse_repl_input","Declaration","replContext","value","deleteRepl","getRegistered","unregister","MethodDeclarationMap","declarations","instances","values","resetRepl","newLocalContext","showRepl","items","getAll","d","push","length","dispatch","onmessage","event","handler","verb","response","Context","newGlobalsContext","code","unregisterMethodDeclaration","String","raw"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,IAAhB,C,CACA;;AACAD,OAAO,CAACE,KAAR,GAAgB;AAAC,iBAAe,CAAC,IAAD;AAAhB,CAAhB,C,CAAyC;;AACzCF,OAAO,CAACG,aAAR,CAAsB,oBAAtB,EAA4C,gCAA5C;AAEA,MAAMC,OAAO,GAAGJ,OAAO,CAACI,OAAxB;AACAJ,OAAO,CAACK,SAAR,GAAoBD,OAAO,CAACC,SAA5B,C,CAAuC;;AAEvC,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC5B,MAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;;AACAD,EAAAA,GAAG,CAACE,OAAJ,GAAc,UAASC,CAAT,EAAY;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWF,CAAC,CAACG,MAAF,CAASC,MAApB,GAA6B,yCAAzC;AACA,WAAO,IAAP;AACH,GAHD;;AAIAP,EAAAA,GAAG,CAACQ,MAAJ,GAAa,UAASL,CAAT,EAAY;AACrBJ,IAAAA,OAAO,CAACC,GAAG,CAACS,YAAL,CAAP;AACH,GAFD;;AAGAT,EAAAA,GAAG,CAACU,IAAJ,CAAS,KAAT,EAAgBZ,GAAhB;AACA,MAAGA,GAAG,CAAC,CAAD,CAAH,KAAS,GAAT,IAAgBA,GAAG,CAAC,CAAD,CAAH,KAAS,GAA5B,EACIE,GAAG,CAACW,gBAAJ,CAAqB,6BAArB,EAAoD,GAApD;AACJX,EAAAA,GAAG,CAACY,IAAJ,CAAS,IAAT;AACH,C,CAED;;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwBC,OAAxB,EAAiC;AAC7B,QAAMC,KAAK,GAAGrB,OAAO,CAACsB,MAAR,CAAeF,OAAO,GAAG,cAAzB,CAAd;AACA,QAAME,MAAM,GAAG,IAAID,KAAJ,CAAUF,OAAV,CAAf;AACA,SAAOG,MAAM,CAACJ,KAAP,EAAP;AACH,C,CAED;;;AACA,SAASK,SAAT,CAAmBC,OAAnB,EAA4B;AACxB;AACA,MAAIC,IAAI,GAAGD,OAAO,CAACC,IAAnB;AACA,MAAIC,OAAO,GAAG9B,OAAO,CAAC+B,gBAAR,CAAyBC,KAAzB,EAAd;AACA,MAAIC,KAAK,GAAGX,KAAK,CAACO,IAAI,CAACN,OAAN,EAAeM,IAAI,CAACK,IAApB,CAAjB;AACAD,EAAAA,KAAK,CAACE,QAAN,CAAeL,OAAf,EALwB,CAMxB;;AACA,MAAIN,OAAO,GAAGpB,OAAO,CAACsB,MAAR,CAAeU,OAAf,CAAuBP,IAAI,CAACQ,EAA5B,CAAd;AACA,MAAIC,MAAM,GAAG,IAAIlC,OAAO,CAACmC,KAAR,CAAcC,UAAlB,CAA6BhB,OAA7B,EAAsCM,OAAtC,CAAb;AACAG,EAAAA,KAAK,CAACQ,SAAN,CAAgBH,MAAhB;AACA,SAAO;AACHI,IAAAA,UAAU,EAAEJ,MAAM,CAACK,QAAP;AADT,GAAP;AAGH,C,CAGD;;;AACA,SAASC,OAAT,CAAiBhB,OAAjB,EAA0B;AACtB;AACAf,EAAAA,OAAO,CAACC,GAAR,GAAc,UAAS+B,IAAT,EAAe;AACzBC,IAAAA,WAAW,CAAC;AACRC,MAAAA,YAAY,EAAEnB,OAAO,CAACoB,EADd;AAERC,MAAAA,gBAAgB,EAAE,IAFV;AAGRpB,MAAAA,IAAI,EAAE;AACFqB,QAAAA,QAAQ,EAAEL;AADR;AAHE,KAAD,CAAX;AAOH,GARD;;AASAhC,EAAAA,OAAO,CAACsC,KAAR,GAAgB,UAASN,IAAT,EAAe;AAC3BC,IAAAA,WAAW,CAAC;AACRC,MAAAA,YAAY,EAAEnB,OAAO,CAACoB,EADd;AAERC,MAAAA,gBAAgB,EAAE,IAFV;AAGRpB,MAAAA,IAAI,EAAE;AACFuB,QAAAA,QAAQ,EAAEP;AADR;AAHE,KAAD,CAAX;AAOH,GARD,CAXsB,CAoBtB;;;AACA,QAAMhB,IAAI,GAAGD,OAAO,CAACC,IAArB;AACA,QAAMC,OAAO,GAAG9B,OAAO,CAAC+B,gBAAR,CAAyBC,KAAzB,EAAhB;AACAnB,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,QAAMmB,KAAK,GAAGX,KAAK,CAACO,IAAI,CAACN,OAAN,EAAeM,IAAI,CAACL,OAApB,CAAnB;AACAS,EAAAA,KAAK,CAACE,QAAN,CAAeL,OAAf;AACA,MAAIuB,QAAQ,GAAG,IAAf;AACApB,EAAAA,KAAK,CAACqB,OAAN,CAAcC,IAAI,IAAI;AAClB,QAAGA,IAAI,YAAYnD,OAAO,CAACoD,WAAR,CAAoBC,qBAAvC,EACIJ,QAAQ,GAAGE,IAAI,CAACG,IAAhB;AACP,GAHD,EA3BsB,CA+BtB;;AACAtD,EAAAA,OAAO,CAACuD,QAAR,CAAiBC,QAAjB,CAA0BC,MAA1B,GAAmCzD,OAAO,CAACC,SAAR,CAAkBwD,MAArD,CAhCsB,CAiCtB;;AACAzD,EAAAA,OAAO,CAAC0D,KAAR,CAAcC,UAAd,CAAyBC,QAAzB,GAAoC,IAAI5D,OAAO,CAACuD,QAAR,CAAiBC,QAArB,EAApC;AACA,MAAGP,QAAH,EACIjD,OAAO,CAAC6D,OAAR,CAAgBC,WAAhB,CAA4BC,aAA5B,CAA0CrC,OAA1C,EAAmDuB,QAAnD,EADJ,KAGIjD,OAAO,CAAC6D,OAAR,CAAgBC,WAAhB,CAA4BE,SAA5B,CAAsCtC,OAAtC,EAA+C,MAA/C,EAAuD,EAAvD,EAtCkB,CAuCtB;;AACA,SAAO;AACHoB,IAAAA,QAAQ,EAAE;AADP,GAAP;AAGH;;AAED,SAASmB,IAAT,CAAczC,OAAd,EAAuB;AACnB,QAAMH,KAAK,GAAGrB,OAAO,CAACsB,MAAR,CAAeE,OAAO,CAACC,IAAR,CAAaL,OAAb,GAAuB,cAAtC,CAAd;AACA,QAAME,MAAM,GAAG,IAAID,KAAJ,CAAUG,OAAO,CAACC,IAAR,CAAayC,KAAvB,CAAf;AACA5C,EAAAA,MAAM,CAAC6C,oBAAP;AACA7C,EAAAA,MAAM,CAAC8C,gBAAP,CAAwB,IAAIpE,OAAO,CAACqE,OAAR,CAAgBC,aAApB,EAAxB;;AACA,MAAI;AACA,UAAMC,KAAK,GAAGjD,MAAM,CAACkD,gBAAP,EAAd;;AACA,QAAID,KAAK,YAAYvE,OAAO,CAACoD,WAAR,CAAoBqB,WAAzC,EAAsD;AAClDF,MAAAA,KAAK,CAACxC,QAAN,CAAenC,OAAO,CAAC8E,WAAvB;AACA,aAAO;AAAC5B,QAAAA,QAAQ,EAAE,gBAAgByB,KAAK,CAACjB;AAAjC,OAAP;AACH,KAHD,MAGO,IAAIiB,KAAK,CAACP,SAAV,EAAqB;AACxB,YAAMW,KAAK,GAAGJ,KAAK,CAACP,SAAN,CAAgBpE,OAAO,CAAC8E,WAAxB,CAAd;AACA,UAAIC,KAAJ,EACI,OAAO;AAAC7B,QAAAA,QAAQ,EAAE6B,KAAK,CAACpC,QAAN;AAAX,OAAP,CADJ,KAGI,OAAO;AAACO,QAAAA,QAAQ,EAAE;AAAX,OAAP;AACP,KANM,MAMA;AACH,aAAO;AAACE,QAAAA,QAAQ,EAAE,iBAAiBxB,OAAO,CAACC,IAAR,CAAayC;AAAzC,OAAP;AACH;AACJ,GAdD,CAcE,OAAMnB,KAAN,EAAa;AACX,WAAO;AACHC,MAAAA,QAAQ,EAAED,KAAK,CAACvB;AADb,KAAP;AAGH;AACJ;;AAED,SAASoD,UAAT,CAAoBpD,OAApB,EAA6B;AACzB,QAAM8B,IAAI,GAAG9B,OAAO,CAACC,IAAR,CAAa6B,IAA1B;AACA,QAAMH,IAAI,GAAGvD,OAAO,CAAC8E,WAAR,CAAoBG,aAApB,CAAkCvB,IAAlC,CAAb;AACA,MAAG,CAACH,IAAJ,EACI,OAAO;AAAEH,IAAAA,QAAQ,EAAE,gBAAgBM;AAA5B,GAAP,CADJ,KAEK;AACD,QAAGH,IAAI,CAAC2B,UAAR,EAAoB;AAChB,UAAG3B,IAAI,YAAYnD,OAAO,CAAC6D,OAAR,CAAgBkB,oBAAnC,EACI,OAAOnF,OAAO,CAAC8E,WAAR,CAAoBM,YAApB,CAAiC1B,IAAjC,CAAP,CADJ,KAGIH,IAAI,CAAC2B,UAAL,CAAgBlF,OAAO,CAAC8E,WAAxB;AACJ,aAAO;AAAE5B,QAAAA,QAAQ,EAAE,yBAAyBQ;AAArC,OAAP;AACH,KAND,MAMO;AACH,aAAO1D,OAAO,CAAC8E,WAAR,CAAoBO,SAApB,CAA8B3B,IAA9B,CAAP;AACA,aAAO1D,OAAO,CAAC8E,WAAR,CAAoBQ,MAApB,CAA2B5B,IAA3B,CAAP;AACA,aAAO;AAAER,QAAAA,QAAQ,EAAE,sBAAsBQ;AAAlC,OAAP;AACH;AACJ;AACJ;;AAED,SAAS6B,SAAT,CAAmB3D,OAAnB,EAA4B;AACxB5B,EAAAA,OAAO,CAAC8E,WAAR,GAAsB9E,OAAO,CAAC+B,gBAAR,CAAyByD,eAAzB,EAAtB;AACA,SAAO;AAAEtC,IAAAA,QAAQ,EAAE;AAAZ,GAAP;AACH;;AAED,SAASuC,QAAT,CAAkB7D,OAAlB,EAA2B;AACvB,QAAM8D,KAAK,GAAG,EAAd;AACA,MAAIlE,OAAO,GAAGpB,OAAO,CAACsB,MAAR,CAAeU,OAAf,CAAuBR,OAAO,CAACC,IAAR,CAAaL,OAApC,CAAd;;AACA,OAAI,IAAIkC,IAAR,IAAgB1D,OAAO,CAAC8E,WAAR,CAAoBM,YAApC,EAAkD;AAC9C,UAAM7B,IAAI,GAAGvD,OAAO,CAAC8E,WAAR,CAAoBM,YAApB,CAAiC1B,IAAjC,CAAb;AACA,UAAMzB,KAAK,GAAGsB,IAAI,YAAYnD,OAAO,CAAC6D,OAAR,CAAgBkB,oBAAhC,GACV5B,IAAI,CAACoC,MAAL,EADU,GAEV,CAAEpC,IAAF,CAFJ;AAGAtB,IAAAA,KAAK,CAACqB,OAAN,CAAcsC,CAAC,IAAI;AACf,YAAMtD,MAAM,GAAG,IAAIlC,OAAO,CAACmC,KAAR,CAAcC,UAAlB,CAA6BhB,OAA7B,EAAsCxB,OAAO,CAAC8E,WAA9C,CAAf;AACAc,MAAAA,CAAC,CAACnD,SAAF,CAAYH,MAAZ;AACAoD,MAAAA,KAAK,CAACG,IAAN,CAAWvD,MAAM,CAACK,QAAP,EAAX;AACH,KAJD;AAKH;;AACD,OAAIe,IAAJ,IAAY1D,OAAO,CAAC8E,WAAR,CAAoBQ,MAAhC,EAAwC;AACpC,UAAMP,KAAK,GAAG/E,OAAO,CAAC8E,WAAR,CAAoBQ,MAApB,CAA2B5B,IAA3B,CAAd;AACAgC,IAAAA,KAAK,CAACG,IAAN,CAAWnC,IAAI,GAAG,IAAP,GAAcqB,KAAK,CAACpC,QAAN,EAAzB;AACH;;AACD,MAAG+C,KAAK,CAACI,MAAN,GAAe,CAAlB,EACI,OAAO;AAAEJ,IAAAA,KAAK,EAAEA;AAAT,GAAP,CADJ,KAGI,OAAO;AAAExC,IAAAA,QAAQ,EAAE,oBAAZ;AAAkCwC,IAAAA,KAAK,EAAE;AAAzC,GAAP;AACP;;AAGD,MAAMK,QAAQ,GAAG;AACbpE,EAAAA,SAAS,EAAGA,SADC;AAEbiB,EAAAA,OAAO,EAAGA,OAFG;AAGboC,EAAAA,UAAU,EAAEA,UAHC;AAIbO,EAAAA,SAAS,EAAEA,SAJE;AAKbE,EAAAA,QAAQ,EAAEA,QALG;AAMbpB,EAAAA,IAAI,EAAEA;AANO,CAAjB,C,CASA;;AACA2B,SAAS,GAAG,UAASC,KAAT,EAAgB;AACxB,MAAIrE,OAAO,GAAGqE,KAAK,CAACpE,IAApB;AACA,MAAIqE,OAAO,GAAGH,QAAQ,CAACnE,OAAO,CAACuE,IAAT,CAAtB;AACA,MAAItE,IAAI,GAAGqE,OAAO,CAACtE,OAAD,CAAlB;AACA,MAAIwE,QAAQ,GAAG;AACXrD,IAAAA,YAAY,EAAGnB,OAAO,CAACoB,EADZ;AAEXnB,IAAAA,IAAI,EAAGA;AAFI,GAAf;AAIAiB,EAAAA,WAAW,CAACsD,QAAD,CAAX;AACH,CATD,C,CAYA;;;AACApG,OAAO,CAAC+B,gBAAR,GAA2B3B,OAAO,CAAC6D,OAAR,CAAgBoC,OAAhB,CAAwBC,iBAAxB,EAA3B;AACAf,SAAS;AAETjF,QAAQ,CAAC,sBAAD,EAAyBiG,IAAI,IAAI;AACrC,MAAItE,KAAK,GAAGX,KAAK,CAACiF,IAAD,EAAO,GAAP,CAAjB;AACAtE,EAAAA,KAAK,CAACE,QAAN,CAAenC,OAAO,CAAC+B,gBAAvB,EAFqC,CAGrC;;AACA,QAAMwB,IAAI,GAAG;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAAb;AACA1D,EAAAA,OAAO,CAAC+B,gBAAR,CAAyByE,2BAAzB,CAAqDjD,IAArD,EAA2D,KAA3D,EALqC,CAMrC;;AACAgD,EAAAA,IAAI,GAAGE,MAAM,CAACC,GAAI,kFAAlB;AACAzE,EAAAA,KAAK,GAAGX,KAAK,CAACiF,IAAD,EAAO,GAAP,CAAb;AACAtE,EAAAA,KAAK,CAACE,QAAN,CAAenC,OAAO,CAAC+B,gBAAvB;AACH,CAVO,CAAR","sourcesContent":["// eslint-disable-next-line\nconst globals = self;\n// setup nodejs compatible require paths\nglobals.Honey = {'requirePath': ['..']}; // walk up to js folder\nglobals.importScripts(\"/js/lib/require.js\", \"/js/lib/prompto.core.bundle.js\");\n\nconst prompto = globals.prompto;\nglobals.intrinsic = prompto.intrinsic; // required by native libraries\n\nfunction loadText(url, success) {\n    var xhr = new XMLHttpRequest();\n    xhr.onerror = function(e) {\n        console.log(\"Error \" + e.target.status + \" occurred while receiving the document.\");\n        return null;\n    };\n    xhr.onload = function(e) {\n        success(xhr.responseText);\n    };\n    xhr.open('GET', url);\n    if(url[0]!==\"/\" && url[0]!==\".\")\n        xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n    xhr.send(null);\n}\n\n// parse prompto code\nfunction parse(content, dialect) {\n    const klass = prompto.parser[dialect + \"CleverParser\"];\n    const parser = new klass(content);\n    return parser.parse();\n}\n\n// translate code to dialect\nfunction translate(message) {\n    // parse incoming code\n    var data = message.data;\n    var context = globals.librariesContext.clone();\n    var decls = parse(data.content, data.from);\n    decls.register(context);\n    // translate it\n    var dialect = prompto.parser.Dialect[data.to];\n    var writer = new prompto.utils.CodeWriter(dialect, context);\n    decls.toDialect(writer);\n    return {\n        translated: writer.toString()\n    };\n}\n\n\n// execute code in dialect\nfunction execute(message) {\n    // manage output\n    console.log = function(text) {\n        postMessage({\n            inResponseTo: message.id,\n            keepHandlerAlive: true,\n            data: {\n                toStdOut: text\n            }\n        });\n    };\n    console.error = function(text) {\n        postMessage({\n            inResponseTo: message.id,\n            keepHandlerAlive: true,\n            data: {\n                toStdErr: text\n            }\n        });\n    };\n    // parse incoming code\n    const data = message.data;\n    const context = globals.librariesContext.clone();\n    console.log(\"Running sample...\\n\")\n    const decls = parse(data.content, data.dialect);\n    decls.register(context);\n    let testName = null;\n    decls.forEach(decl => {\n        if(decl instanceof prompto.declaration.TestMethodDeclaration)\n            testName = decl.name;\n    });\n    // wire cursor, required by iterator\n    prompto.memstore.MemStore.Cursor = prompto.intrinsic.Cursor;\n    // run \"main\" method, using fresh store\n    prompto.store.$DataStore.instance = new prompto.memstore.MemStore();\n    if(testName)\n        prompto.runtime.Interpreter.interpretTest(context, testName);\n    else\n        prompto.runtime.Interpreter.interpret(context, \"main\", \"\");\n    // done\n    return {\n        toStdOut: \"Success!\\n\"\n    };\n}\n\nfunction repl(message) {\n    const klass = prompto.parser[message.data.dialect + \"CleverParser\"];\n    const parser = new klass(message.data.input);\n    parser.removeErrorListeners();\n    parser.addErrorListener(new prompto.problem.ProblemRaiser());\n    try {\n        const thing = parser.parse_repl_input();\n        if (thing instanceof prompto.declaration.Declaration) {\n            thing.register(globals.replContext);\n            return {toStdOut: \"Registered \" + thing.name};\n        } else if (thing.interpret) {\n            const value = thing.interpret(globals.replContext);\n            if (value)\n                return {toStdOut: value.toString()};\n            else\n                return {toStdOut: \"<void>\"};\n        } else {\n            return {toStdErr: \"Unsupported:\" + message.data.input};\n        }\n    } catch(error) {\n        return {\n            toStdErr: error.message\n        };\n    }\n}\n\nfunction deleteRepl(message) {\n    const name = message.data.name;\n    const decl = globals.replContext.getRegistered(name);\n    if(!decl)\n        return { toStdErr: \"Not found: \" + name };\n    else {\n        if(decl.unregister) {\n            if(decl instanceof prompto.runtime.MethodDeclarationMap)\n                delete globals.replContext.declarations[name];\n            else\n                decl.unregister(globals.replContext);\n            return { toStdOut: \"Deleted declaration \" + name };\n        } else {\n            delete globals.replContext.instances[name];\n            delete globals.replContext.values[name];\n            return { toStdOut: \"Deleted variable \" + name };\n        }\n    }\n}\n\nfunction resetRepl(message) {\n    globals.replContext = globals.librariesContext.newLocalContext();\n    return { toStdOut: \"<ok>\" };\n}\n\nfunction showRepl(message) {\n    const items = [];\n    var dialect = prompto.parser.Dialect[message.data.dialect];\n    for(var name in globals.replContext.declarations) {\n        const decl = globals.replContext.declarations[name];\n        const decls = decl instanceof prompto.runtime.MethodDeclarationMap ?\n            decl.getAll() :\n            [ decl ];\n        decls.forEach(d => {\n            const writer = new prompto.utils.CodeWriter(dialect, globals.replContext);\n            d.toDialect(writer);\n            items.push(writer.toString());\n        });\n    }\n    for(name in globals.replContext.values) {\n        const value = globals.replContext.values[name];\n        items.push(name + \": \" + value.toString());\n    }\n    if(items.length > 0)\n        return { items: items };\n    else\n        return { toStdOut: \"<context is empty>\", items: [] };\n}\n\n\nconst dispatch = {\n    translate : translate,\n    execute : execute,\n    deleteRepl: deleteRepl,\n    resetRepl: resetRepl,\n    showRepl: showRepl,\n    repl: repl\n};\n\n// manage events\nonmessage = function(event) {\n    var message = event.data;\n    var handler = dispatch[message.verb];\n    var data = handler(message);\n    var response = {\n        inResponseTo : message.id,\n        data : data\n    };\n    postMessage(response);\n};\n\n\n// create global context with pre-loaded libraries\nglobals.librariesContext = prompto.runtime.Context.newGlobalsContext();\nresetRepl();\n\nloadText(\"/prompto/prompto.pec\", code => {\n    let decls = parse(code, \"E\");\n    decls.register(globals.librariesContext);\n    // remove the original \"print\" method\n    const decl = { name: \"print\" };\n    globals.librariesContext.unregisterMethodDeclaration(decl, \"any\");\n    // replace \"print\" with a custom \"print\" method\n    code = String.raw`native method print ( any value ) { JavaScript: console.log(value.toString()); }`;\n    decls = parse(code, \"O\");\n    decls.register(globals.librariesContext);\n});\n\n\n\n"]},"metadata":{},"sourceType":"module"}