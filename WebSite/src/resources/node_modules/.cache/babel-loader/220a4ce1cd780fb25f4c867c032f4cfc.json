{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/RangeType.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Range\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The Range type is a technical type used to create sequences of 1 or more items of the same discrete type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 121\n        }, this), \"The items themselves can only be of type Character, Integer, Date or Time.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 91\n        }, this), \"A Range type is declared by adding 2 dots enclosed in square brackets '[..]' after the item type.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Integer[..] -> the type Integer range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A Range literal must be enclosed in square brackets '[' and ']', the start and end value being separated by 2 dots '..'.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`[1..17] -> all Integers ranging from 1 to 17 included\n['c'..'k'] -> all Characters ranging from 'c' to 'k' included (using their Unicode value)\n['2012-01-01'..'2014-04-01'] -> all Dates ranging from '2012-01-01' to '2014-04-01'\n['20:01:01'..'23:02:02'] -> all Times ranging from '20:01:01' to '23:02:02', with a 1 second increment`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Items in a Range can be accessed individually using their position.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 84\n        }, this), \"Positions start at 1 and end at the Range length.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`r = [2..17] -> assign a Range of Integers to variable 'r'\nr[4] -> get item at position 4 in Range referenced by variable 'r' i.e. the Integer 5`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/RangeType.js"],"names":["React","Topic","ThisTopic","constructor","renderContent","topicSelected","String","raw"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,OAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA,6IAA4G;AAAA;AAAA;AAAA;AAAA,gBAA5G,6FAC8E;AAAA;AAAA;AAAA;AAAA,gBAD9E;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAMH;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cANG,eAOH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPG,eASH;AAAA,+BAAK;AAAA,oBAAOC,MAAM,CAACC,GAAI;AACnC;AACA;AACA;AAHiB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cATG,eAaH;AAAA,uGACuE;AAAA;AAAA;AAAA;AAAA,gBADvE;AAAA;AAAA;AAAA;AAAA;AAAA,cAbG,eAgBH;AAAA,+BAAK;AAAA,oBAAOD,MAAM,CAACC,GAAI;AACnC;AADiB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAhBG,eAkBH;AAAA;AAAA;AAAA;AAAA,cAlBG;AAAA,oBAAP;AAoBH;;AA3ByB;;AA+B9B,eAAe,IAAIL,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Range\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Range</h2>\n\n            <p>The Range type is a technical type used to create sequences of 1 or more items of the same discrete type.<br/>\n                The items themselves can only be of type Character, Integer, Date or Time.<br/>\n                A Range type is declared by adding 2 dots enclosed in square brackets '[..]' after the item type.</p>\n            <pre><code>Integer[..] -> the type Integer range</code></pre>\n            <p>A Range literal must be enclosed in square brackets '[' and ']', the start and end value being separated\n                by 2 dots '..'.</p>\n            <pre><code>{String.raw`[1..17] -> all Integers ranging from 1 to 17 included\n['c'..'k'] -> all Characters ranging from 'c' to 'k' included (using their Unicode value)\n['2012-01-01'..'2014-04-01'] -> all Dates ranging from '2012-01-01' to '2014-04-01'\n['20:01:01'..'23:02:02'] -> all Times ranging from '20:01:01' to '23:02:02', with a 1 second increment`}</code></pre>\n            <p>\n                Items in a Range can be accessed individually using their position.<br/>\n                Positions start at 1 and end at the Range length.</p>\n            <pre><code>{String.raw`r = [2..17] -> assign a Range of Integers to variable 'r'\nr[4] -> get item at position 4 in Range referenced by variable 'r' i.e. the Integer 5`}</code></pre>\n            <br/>\n        </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}