{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Equality.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Equality\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Equality expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Equality expressions are used to check for equality (or inequality) of 2 values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 96\n        }, this), \"An equality expression is a code fragment which produces a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Boolean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 76\n        }, this), \" value, which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 95\n        }, this), \"In the context of programming, equality can have 2 meanings, whether 2 values are the same computable object, or the values themselves are actually equal.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 69\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Checking equality of objects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Checking equality of objects is done using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"is\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 63\n        }, this), \" operator.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 88\n        }, this), \"Inequality of objects is checked using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"is not\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 60\n        }, this), \" operator.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 89\n        }, this), \"In the below example, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 39\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 58\n        }, this), \" refer to the same value.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 97\n        }, this), \"On the other hand, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 36\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"c\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 55\n        }, this), \" refer to different objects (although those objects have equal value).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 9,\n        sampleUrl: \"samples/expressions/equal-object.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Checking equality of values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Comparing equality of values is done using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"=\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 63\n        }, this), \" operator in E, or the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"==\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), \" operator in O or M.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 56\n        }, this), \"Inequality of values is checked using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`<>`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 59\n        }, this), \" operator in E, or the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"!=\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 111\n        }, this), \" operator in O or M.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 146\n        }, this), \"In the below example, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 39\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 58\n        }, this), \" have the same value.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 93\n        }, this), \"On the other hand, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 36\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"c\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 55\n        }, this), \" have different values.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 9,\n        sampleUrl: \"samples/expressions/equal-value.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Checking rough equality of values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Strict equality is not always desirable. For example \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\"hello\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 69\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\"HELLO\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 94\n        }, this), \" are not equal values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 34\n        }, this), \"However, it is sometimes desirable to treat them as equal.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 75\n        }, this), \"Rough equality applies to \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 43\n        }, this), \" values only (this may be extended in the future).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 110\n        }, this), \"Rough equality of values is checked using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"~\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 63\n        }, this), \" operator in E, or the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"~=\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), \" operator in O or M.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 56\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/expressions/equal-rough.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Checking equality of user defined values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Prompto supports user defined equality. See categories for details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Equality.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey","String","raw"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Equality\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Equality expressions</h2>\n\n            <p>Equality expressions are used to check for equality (or inequality) of 2 values.<br/>\n                An equality expression is a code fragment which produces a <code>Boolean</code> value, which can then be\n                used as an input for other operations: print, write, method call and so forth.<br/>\n                In the context of programming, equality can have 2 meanings, whether 2 values are the same computable\n                object, or the values themselves are actually equal.<br/>\n            </p>\n            <h3>\n                Checking equality of objects\n            </h3>\n            <p>Checking equality of objects is done using the <code>is</code> operator.<br/>\n                Inequality of objects is checked using the <code>is not</code> operator.<br/>\n                In the below example, <code>a</code> and <code>b</code> refer to the same value.<br/>\n                On the other hand, <code>a</code> and <code>c</code> refer to different objects (although those objects\n                have equal value).\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={9} sampleUrl=\"samples/expressions/equal-object.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Checking equality of values\n            </h3>\n            <p>Comparing equality of values is done using the <code>=</code> operator in E, or\n                the <code>==</code> operator in O or M.<br/>\n                Inequality of values is checked using the <code>{String.raw`<>`}</code> operator in E, or the <code>!=</code> operator in O or M.<br/>\n                In the below example, <code>a</code> and <code>b</code> have the same value.<br/>\n                On the other hand, <code>a</code> and <code>c</code> have different values.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={9} sampleUrl=\"samples/expressions/equal-value.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Checking rough equality of values\n            </h3>\n            <p>Strict equality is not always desirable. For example <code>\"hello\"</code> and <code>\"HELLO\"</code> are\n                not equal values.<br/>\n                However, it is sometimes desirable to treat them as equal.<br/>\n                Rough equality applies to <code>Text</code> values only (this may be extended in the future).<br/>\n                Rough equality of values is checked using the <code>~</code> operator in E, or\n                the <code>~=</code> operator in O or M.<br/>\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/expressions/equal-rough.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Checking equality of user defined values</h3>\n\n            <p>Prompto supports user defined equality. See categories for details.</p>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}