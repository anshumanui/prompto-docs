{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/methods/Setters.js\";\nimport React from 'react';\nimport Topic from \"../../../../content/Topic\";\nimport PromptoPlayer from \"../../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Setters\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Setters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Attribute values are normally set simply by copying the value provided when creating objects or assigning a value to an attribute.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This covers most use cases, but there are situations where you want to:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"validate the value in a way which is not supported by attribute constraints\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"transform the value \\\"on the fly\\\" rather than just store it\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"take the opportunity to populate other values\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"This is where \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"setters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 30\n        }, this), \" are useful.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Setters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 16\n        }, this), \" are special methods defined as part of a category definition, and attached to a particular attribute name. When a setter is defined and a piece of code tries to set the corresponding attribute, including when the object is created, Prompto will call the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"setter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 39\n        }, this), \" to transform the value prior to setting it.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 96\n        }, this), \"Within the setter method body, the name of the attribute being set holds the value received, which can be used for whatever purpose. The setter is a function which MUST return the value to be written.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"In the below example, we define a \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"setter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 47\n        }, this), \" for a \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"fullName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 67\n        }, this), \" attribute which returns a capitalized value, and sets the \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"initials\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 33\n        }, this), \" attribute:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 88\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 16,\n        sampleUrl: \"samples/categories/methods/setter.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Cyclical dependencies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Prompto manages cyclical dependencies between setters. Cyclical dependencies occur when for example setter for 'a' sets 'b' and setter for 'b' sets 'a'. During the execution of a setter body, it is guaranteed that the setter being executed will not be called again for the current object until the execution of the initial setter is complete.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/categories/methods/Setters.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,SAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPD,eASC;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATD,eAeH;AAAA,kDAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAfG,eAgBH;AAAA,gCAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,kRAI0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJ1B,+DAImF;AAAA;AAAA;AAAA;AAAA,gBAJnF;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBG,eAuBwE;AAAA,sEACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADyC,0BACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADqB,8EAEvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFuD;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBxE,eA2BH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,uCAAlE;AAA0G,QAAA,QAAQ,EAAE;AAApH,SAAoBJ,aAAa,CAACK,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA3BG,eA4BH;AAAA;AAAA;AAAA;AAAA,cA5BG,eA+BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BG,eAgCH;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,cAhCG,eAqCH;AAAA;AAAA;AAAA;AAAA,cArCG;AAAA,oBAAP;AAyCH;;AAhDyB;;AAoD9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../../../content/Topic\";\nimport PromptoPlayer from \"../../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Setters\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Setters</h2>\n\n            <p>Attribute values are normally set simply by copying the value provided when creating objects or assigning\n                a value to an attribute.</p>\n\n                <p>This covers most use cases, but there are situations where you want to:</p>\n\n                <ul>\n                    <li>validate the value in a way which is not supported by attribute constraints</li>\n                    <li>transform the value \"on the fly\" rather than just store it</li>\n                    <li>take the opportunity to populate other values</li>\n                </ul>\n\n            <p>This is where <i>setters</i> are useful.</p>\n            <p><i>Setters</i> are special methods defined as part of a category definition, and attached to a particular\n                attribute name.\n                When a setter is defined and a piece of code tries to set the corresponding attribute, including when\n                the object is created,\n                Prompto will call the <i>setter</i> to transform the value prior to setting it.<br/>\n                Within the setter method body, the name of the attribute being set holds the value received, which can\n                be used for whatever purpose.\n                The setter is a function which MUST return the value to be written.</p><p>\n            In the below example, we define a <i>setter</i> for a <i>fullName</i> attribute which returns a capitalized\n            value, and sets the <i>initials</i> attribute:\n        </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={16} sampleUrl=\"samples/categories/methods/setter.pec\" runnable={true}/>\n            <br/>\n\n\n            <h4>Cyclical dependencies</h4>\n            <p><i>Prompto manages cyclical dependencies between setters. Cyclical dependencies occur when for example\n                setter for 'a' sets 'b' and setter for 'b' sets 'a'.\n                During the execution of a setter body, it is guaranteed that the setter being executed will not be\n                called again for the current object\n                until the execution of the initial setter is complete.</i></p>\n            <p/>\n\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}