{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/methods/arguments.js\";\nimport PromptoPlayer from \"../../prompto-player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Arguments() {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Method arguments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A Prompto method can accept 0 or more arguments.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Arguments must be declared (there is no implicit argument such as \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"arguments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 82\n      }, this), \" in JavaScript).\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"When mutiple arguments are declared, they must be separated by commas. In E dialect only, the last comma is replaced by the \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"and\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 140\n      }, this), \" keyword.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Arguments are typed, in one of the following ways:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"uk-list uk-list-disc\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Attribute argument\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this), \", with the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 68\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 62\n        }, this), \", where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 100\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 94\n        }, this), \" is an existing Attribute name.\", /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n          lines: 10,\n          sampleUrl: \"samples/methods/attributeArgument.pec\",\n          runnable: true\n        }, PromptoPlayer.nextKey(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Typed argument\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this), \", with the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Type x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 64\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 58\n        }, this), \", where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 98\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 92\n        }, this), \" is an existing Type name and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 29\n        }, this), \" can be any valid variable identifier.\", /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n          lines: 8,\n          sampleUrl: \"samples/methods/typedArgument.pec\",\n          runnable: true\n        }, PromptoPlayer.nextKey(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Attribute member argument\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), \", with the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"any \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 79\n          }, this), \" with attribute \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 103\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 69\n        }, this), \", where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 135\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 129\n        }, this), \" can be any valid variable identifier and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 40\n        }, this), \" is an existing Attribute name. This form accepts more than one attribute.\", /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n          lines: 10,\n          sampleUrl: \"samples/methods/memberArgument.pec\",\n          runnable: true\n        }, PromptoPlayer.nextKey(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Extended member argument\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), \", with the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Type x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 74\n          }, this), \" with attribute \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 103\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 68\n        }, this), \", where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 31\n        }, this), \" is an existing category name, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 92\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 86\n        }, this), \" can be any valid variable identifier and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 40\n        }, this), \" is an existing Attribute name. This form accepts more than one attribute.\", /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n          lines: 12,\n          sampleUrl: \"samples/methods/extendedArgument.pec\",\n          runnable: true\n        }, PromptoPlayer.nextKey(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Mixing argument types\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"When a method expects mutiple arguments, argument types can be mixed as required. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/methods/mixedArguments.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Default argument values\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto supports \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 33\n      }, this), \" argument values, which remove the need to always pass all arguments to a method.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Default argument values must be \", /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"constant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 48\n      }, this), \" values, i.e. they cannot vary during program execution. Good candidates are literals, null, and enumerated values.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/methods/defaultArgument.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }, this);\n}\n_c = Arguments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Arguments\");","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/methods/arguments.js"],"names":["PromptoPlayer","Arguments","nextKey"],"mappings":"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","sourcesContent":["import PromptoPlayer from \"../../prompto-player/PromptoPlayer\";\n\nexport default function Arguments() {\n\treturn (\n\t\t<li>\n\t\t\t<h2>Method arguments</h2>\n\n            <p>A Prompto method can accept 0 or more arguments.</p>\n            <p>Arguments must be declared (there is no implicit argument such as <i>arguments</i> in JavaScript).</p>\n            <p>When mutiple arguments are declared, they must be separated by commas. In E dialect only, the last comma is replaced by the <code>and</code> keyword.</p>\n            <p>Arguments are typed, in one of the following ways:</p>\n            <ul className=\"uk-list uk-list-disc\">\n                <li>\n                    <b>Attribute argument</b>, with the form <code><i>name</i></code>, where <code><i>name</i></code> is an existing Attribute name.\n                    <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/methods/attributeArgument.pec\" runnable={true}/>\n                </li>\n                <br/>\n\n                <li>\n                    <b>Typed argument</b>, with the form <code><i>Type x</i></code>, where <code><i>type</i></code> is an existing Type name\n                        and <code><i>x</i></code> can be any valid variable identifier.\n                    <PromptoPlayer key={PromptoPlayer.nextKey()} lines={8} sampleUrl=\"samples/methods/typedArgument.pec\" runnable={true}/>\n                </li>\n                <br/>\n\n                <li>\n                    <b>Attribute member argument</b>, with the form <code>any <i>x</i> with attribute <i>name</i></code>, where <code><i>x</i></code> can be any valid variable\n                        identifier and <code><i>name</i></code> is an existing Attribute name. This form accepts more than one attribute.\n                    <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/methods/memberArgument.pec\" runnable={true}/>\n                </li>\n                <br/>\n\n                <li>\n                    <b>Extended member argument</b>, with the form <code><i>Type x</i> with attribute <i>name</i></code>,\n                        where <code><i>type</i></code> is an existing category name, <code><i>x</i></code> can be any valid variable\n                        identifier and <code><i>name</i></code> is an existing Attribute name. This form accepts more than one attribute.\n                    <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/methods/extendedArgument.pec\" runnable={true}/>\n               </li>\n            </ul>\n            <br/>\n\n            <h4>Mixing argument types</h4>\n            <p>When a method expects mutiple arguments, argument types can be mixed as required. </p>\n            <ul>\n                <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/methods/mixedArguments.pec\" runnable={true}/>\n            </ul>\n            <br/>\n\n           <h4>Default argument values</h4>\n            <p>Prompto supports <i>default</i> argument values, which remove the need to always pass all arguments to a method.</p>\n            <p>Default argument values must be <i>constant</i> values, i.e. they cannot vary during program execution. Good candidates are literals, null, and enumerated values.</p>\n            <ul>\n                <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/methods/defaultArgument.pec\" runnable={true}/>\n            </ul>\n\t\t</li>\n\t)\n}"]},"metadata":{},"sourceType":"module"}