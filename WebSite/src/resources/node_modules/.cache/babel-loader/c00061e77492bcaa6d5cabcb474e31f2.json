{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/statements/Assignment.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Assignment\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Assignment statements\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"An assignment is a statement which assigns the value of an expression to a value holder.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 104\n        }, this), \"An assignment has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"holder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 50\n          }, this), \" = \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"exp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 66\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 44\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"exp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 96\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 90\n        }, this), \" is an expression, aka \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"rvalue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), \" (read \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 41\n        }, this), \" value) and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"holder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 71\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 65\n        }, this), \" is a valid value holder, aka \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"lvalue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), \" (read \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 41\n        }, this), \" value).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 60\n        }, this), \"When an assignment statement is executed, the rvalue is computed and stored in the lvalue.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Assigning values to variables\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/statements/assign-variable.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto infers the type of a variable from its first assignment, which is generaly desirable.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 109\n        }, this), \"In the above example, the variable \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 52\n        }, this), \" has the type \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Integer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 80\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 101\n        }, this), \"There are however situations where you might want the type to be explicit.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 91\n        }, this), \"In the first statement of the below example, the assigned type is \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Decimal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 83\n        }, this), \", although the rvalue is an \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Integer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 30\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 51\n        }, this), \"This is in preparation of the next statement, where the rvalue is a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Decimal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 85\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 106\n        }, this), \"Without the explicit type in the first statement, the second statement would be illegal because an \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Integer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 28\n        }, this), \" variable cannot hold a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Decimal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 72\n        }, this), \" value.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/statements/assign-explicit.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Assigning values to list items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto values are immutable by default. Therefore you cannot change the contents of a list, unless you make it explicit using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"mutable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 36\n        }, this), \" keyword when creating the list.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 95\n        }, this), \"A list item assignment has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"list[item]\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 28\n          }, this), \" = \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"exp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 22\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"exp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 78\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 72\n        }, this), \" is an expression,\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"list\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), \" is a list expression and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 73\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 67\n        }, this), \" is an \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Integer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 20\n        }, this), \" expression.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 52\n        }, this), \"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), \" must be in the range \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"1 .. n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 67\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 87\n        }, this), \" is the number of items in the list.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/statements/assign-mutable.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Assigning values to tuple items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Assigning values to tuple items is done the same way as for lists.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/statements/assign-tuple.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Assigning values to set items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Assigning values to set items is illegal.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Assigning values to dictionary keys\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto values are immutable by default. Therefore you cannot change the contents of a dictionary, unless you make it explicit using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"mutable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 36\n        }, this), \" keyword when creating the dictionary.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 101\n        }, this), \"A dictionary \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 30\n        }, this), \" assignment has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"dict[key]\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 28\n          }, this), \" = \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"exp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 22\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"exp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 77\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 71\n        }, this), \" is an expression,\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"dict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), \" is a dictionary expression and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"key\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 79\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 73\n        }, this), \" is a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 19\n        }, this), \" expression.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/statements/assign-dictionary.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Assigning values to category object members\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto values are immutable by default. Therefore you cannot change a member of a category object, unless you make it explicit using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"mutable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 36\n        }, this), \" keyword when creating the object.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 97\n        }, this), \"A category \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"member\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 28\n        }, this), \" assignment has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"object.member\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 28\n          }, this), \" = \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"exp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 22\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"exp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 81\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 75\n        }, this), \" is an expression,\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"object\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this), \" is a category object expression and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"member\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 86\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 80\n        }, this), \" is an \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"attribute\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 20\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 8,\n        sampleUrl: \"samples/statements/assign-member.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/statements/Assignment.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,YAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA,4HAA2F;AAAA;AAAA;AAAA;AAAA,gBAA3F,8CAC+B;AAAA,kCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAN,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD/B,0BAC6E;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAD7E,0CAGQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHR,0BAG4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAH5B,+BAGoD;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAHpD,iDAIQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJR,0BAI4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJ5B,2BAI+C;AAAA;AAAA;AAAA;AAAA,gBAJ/C;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAUH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVG,eAaH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,wCAAvD;AAAgG,QAAA,QAAQ,EAAE;AAA1G,SAAoBL,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAbG,eAeH;AAAA;AAAA;AAAA;AAAA,cAfG,eAgBH;AAAA,iIAAgG;AAAA;AAAA;AAAA;AAAA,gBAAhG,sDACuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADvC,iCACmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADnE,oBACwF;AAAA;AAAA;AAAA;AAAA,gBADxF,6FAE8E;AAAA;AAAA;AAAA;AAAA,gBAF9E,qFAGsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHtE,+CAIiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJjB,oBAIsC;AAAA;AAAA;AAAA;AAAA,gBAJtC,uFAKwE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALxE,oBAK6F;AAAA;AAAA;AAAA;AAAA,gBAL7F,sHAOe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPf,2CAO2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAP3D;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBG,eAyBH;AAAA;AAAA;AAAA;AAAA,cAzBG,eA0BH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,wCAAvD;AAAgG,QAAA,QAAQ,EAAE;AAA1G,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA1BG,eA4BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BG,eA+BH;AAAA,uKAEuB;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAFvB,mDAEkF;AAAA;AAAA;AAAA;AAAA,gBAFlF,uDAIS;AAAA,kCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAN,sBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJT,0BAI2D;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAJ3D,qCAKI;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBALJ,6CAKsD;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBALtD,0BAMO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANP,+BAMuC;AAAA;AAAA;AAAA;AAAA,gBANvC,uBAOQ;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAPR,yCAOsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPtD,0BAO0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAP1E;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BG,eAyCH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,uCAAvD;AAA+F,QAAA,QAAQ,EAAE;AAAzG,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAzCG,eA0CH;AAAA;AAAA;AAAA;AAAA,cA1CG,eA4CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5CG,eA+CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/CG,eAiDH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,qCAAvD;AAA6F,QAAA,QAAQ,EAAE;AAAvG,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAjDG,eAkDH;AAAA;AAAA;AAAA;AAAA,cAlDG,eAoDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApDG,eAuDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvDG,eAwDH;AAAA;AAAA;AAAA;AAAA,cAxDG,eA0DH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1DG,eA6DH;AAAA,6KAEuB;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAFvB,yDAEwF;AAAA;AAAA;AAAA;AAAA,gBAFxF,gCAGiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHjB,4CAIS;AAAA,kCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAN,sBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJT,0BAI0D;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAJ1D,qCAKI;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBALJ,mDAK4D;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAL5D,yBAMM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANN;AAAA;AAAA;AAAA;AAAA;AAAA,cA7DG,eAqEH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,0CAAvD;AAAkG,QAAA,QAAQ,EAAE;AAA5G,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cArEG,eAsEH;AAAA;AAAA;AAAA;AAAA,cAtEG,eAwEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxEG,eA2EH;AAAA,8KAEuB;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAFvB,qDAEoF;AAAA;AAAA;AAAA;AAAA,gBAFpF,8BAGe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHf,4CAIS;AAAA,kCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAN,sBAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJT,0BAI8D;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAJ9D,qCAKI;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBALJ,wDAKmE;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBALnE,0BAMO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANP;AAAA;AAAA;AAAA;AAAA;AAAA,cA3EG,eAmFH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,CAApD;AAAuD,QAAA,SAAS,EAAC,sCAAjE;AAAwG,QAAA,QAAQ,EAAE;AAAlH,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAnFG;AAAA,oBAAP;AAsFH;;AA7FyB;;AAiG9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Assignment\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Assignment statements</h2>\n\n            <p>An assignment is a statement which assigns the value of an expression to a value holder.<br/>\n                An assignment has the form <code><i>holder</i> = <i>exp</i></code> where <code><i>exp</i></code> is an\n                expression,\n                aka <i>rvalue</i> (read <i>right</i> value) and <code><i>holder</i></code> is a valid value holder,\n                aka <i>lvalue</i> (read <i>left</i> value).<br/>\n                When an assignment statement is executed, the rvalue is computed and stored in the lvalue.\n            </p>\n            <h3>\n                Assigning values to variables\n            </h3>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/statements/assign-variable.pec\" runnable={true}/>\n\n            <br/>\n            <p>Prompto infers the type of a variable from its first assignment, which is generaly desirable.<br/>\n                In the above example, the variable <code>a</code> has the type <code>Integer</code>.<br/>\n                There are however situations where you might want the type to be explicit.<br/>\n                In the first statement of the below example, the assigned type is <code>Decimal</code>, although the\n                rvalue is an <code>Integer</code>.<br/>\n                This is in preparation of the next statement, where the rvalue is a <code>Decimal</code>.<br/>\n                Without the explicit type in the first statement, the second statement would be illegal\n                because an <code>Integer</code> variable cannot hold a <code>Decimal</code> value.\n            </p>\n            <br/>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/statements/assign-explicit.pec\" runnable={true}/>\n\n            <h3>\n                Assigning values to list items\n            </h3>\n            <p>Prompto values are immutable by default. Therefore you cannot change the contents of a list, unless you\n                make it\n                explicit using the <code><i>mutable</i></code> keyword when creating the list.<br/>\n                A list item assignment has the\n                form <code><i>list[item]</i> = <i>exp</i></code> where <code><i>exp</i></code> is an expression,\n                <code><i>list</i></code> is a list expression and <code><i>item</i></code> is\n                an <code>Integer</code> expression.<br/>\n                The <code><i>item</i></code> must be in the range <i>1 .. n</i> where <i>n</i> is the number of items in\n                the list.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/statements/assign-mutable.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Assigning values to tuple items\n            </h3>\n            <p>Assigning values to tuple items is done the same way as for lists.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/statements/assign-tuple.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Assigning values to set items\n            </h3>\n            <p>Assigning values to set items is illegal.</p>\n            <br/>\n\n            <h3>\n                Assigning values to dictionary keys\n            </h3>\n            <p>Prompto values are immutable by default. Therefore you cannot change the contents of a dictionary, unless\n                you make it\n                explicit using the <code><i>mutable</i></code> keyword when creating the dictionary.<br/>\n                A dictionary <i>key</i> assignment has the\n                form <code><i>dict[key]</i> = <i>exp</i></code> where <code><i>exp</i></code> is an expression,\n                <code><i>dict</i></code> is a dictionary expression and <code><i>key</i></code> is\n                a <code>Text</code> expression.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/statements/assign-dictionary.pec\" runnable={true}/>\n            <br/>\n\n            <h3>\n                Assigning values to category object members\n            </h3>\n            <p>Prompto values are immutable by default. Therefore you cannot change a member of a category object,\n                unless you make it\n                explicit using the <code><i>mutable</i></code> keyword when creating the object.<br/>\n                A category <i>member</i> assignment has the\n                form <code><i>object.member</i> = <i>exp</i></code> where <code><i>exp</i></code> is an expression,\n                <code><i>object</i></code> is a category object expression and <code><i>member</i></code> is\n                an <code>attribute</code>.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={8} sampleUrl=\"samples/statements/assign-member.pec\" runnable={true}/>\n\n           </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}