{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Slice.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Slice\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Slice expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Slice expressions are used to extract a sub-collection of a collection value.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 93\n        }, this), \"A Slice expression is a code fragment which produces a value, whose type is determined by the value being retrieved, which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 113\n        }, this), \"A Slice expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"collection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 55\n          }, this), \"[\", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 73\n          }, this), \":\", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 86\n          }, this), \"]\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 49\n        }, this), \"where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 23\n        }, this), \" is a collection value and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 73\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 96\n        }, this), \" are Integer values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 32\n        }, this), \"Either \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 24\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 59\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 53\n        }, this), \" can be omitted, but not both. If omitted, they are replaced by their default value i.e. 1 and \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 28\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 43\n        }, this), \" is the number of collection items.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 86\n        }, this), \"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), \" value can be negative, in which case Prompto will count backwards.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 111\n        }, this), \"Both \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 22\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 58\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 52\n        }, this), \" items are included in the result.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 109\n        }, this), \"If either \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 27\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 62\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 56\n        }, this), \" value is out of range, an \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"INDEX_OUT_OF_RANGE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 20\n        }, this), \" error will be raised.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"List slice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The type of the resulting value is the same as the List value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/expressions/slice-list.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Range slice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The type of the resulting value is the same as the Range value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/expressions/slice-range.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Text slice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Although Text values are considered 'atomic' by Prompto, it can be convenient to sometimes treat them as a List of Character.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 45\n        }, this), \"The type of the resulting value is a Text.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 9,\n        sampleUrl: \"samples/expressions/slice-text.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Slice.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Slice\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Slice expressions</h2>\n\n            <p>Slice expressions are used to extract a sub-collection of a collection value.<br/>\n                A Slice expression is a code fragment which produces a value, whose type is determined by the value\n                being retrieved,\n                which can then be used as an input for other operations: print, write, method call and so forth.<br/>\n                A Slice expression has the form <code><i>collection</i>[<i>start</i>:<i>end</i>]</code>\n                where <code>collection</code> is a collection value and <code>start</code> and <code>end</code> are\n                Integer values.<br/>\n                Either <code><i>start</i></code> or <code><i>end</i></code> can be omitted, but not both. If omitted,\n                they are replaced by their default value\n                i.e. 1 and <i>n</i> where <i>n</i> is the number of collection items.<br/>\n                The <code><i>end</i></code> value can be negative, in which case Prompto will count backwards.<br/>\n                Both <code><i>start</i></code> and <code><i>end</i></code> items are included in the result.<br/>\n                If either <code><i>start</i></code> or <code><i>end</i></code> value is out of range,\n                an <code>INDEX_OUT_OF_RANGE</code> error will be raised.\n            </p>\n\n            <h3>List slice</h3>\n\n            <p>The type of the resulting value is the same as the List value.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/expressions/slice-list.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Range slice</h3>\n\n            <p>The type of the resulting value is the same as the Range value.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/expressions/slice-range.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Text slice</h3>\n\n            <p>Although Text values are considered 'atomic' by Prompto, it can be convenient to sometimes treat\n                them as a List of Character.<br/>\n                The type of the resulting value is a Text.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={9} sampleUrl=\"samples/expressions/slice-text.pec\" runnable={true}/>\n            <br/>\n\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}