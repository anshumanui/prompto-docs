{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/TextType.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Text\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 20\n        }, this), \" type is a technical type used for values such as a name or a description, where the textual representation and the meaning are equivalent.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 48\n        }, this), \"All Text values use \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          href: \"http://unicode.org\",\n          children: \"Unicode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 37\n        }, this), \" internally.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 131\n        }, this), \"A Text literal must be enclosed in double quotes:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 66\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\"This is a text literal.\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"If a Text literal must contain a double-quote, that double-quote must be escaped using the anti-slash '\\\\' character:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\"This text literal contains two \\\\\\\"double quotes\\\\\\\".\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Consequently, if a Text literal must contain the anti-slash'\\\\' character, the '\\\\' character must be escaped using the '\\\\' character.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\"This text literal contains one anti-slash: \\\\\\\\.\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Additionally, Text literals support the following special characters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`\"\\t\" -> Tab\n\"\\b\" -> Back space\n\"\\n\" -> New line\n\"\\r\" -> Carriage return\n\"\\f\" -> Form feed\n\"\\'\" -> Single quote`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Finally, Text literals support \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          href: \"http://unicode.org\",\n          children: \"Unicode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 48\n        }, this), \" characters in the form of UTF-16 hexadecimal characters:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\"delta: \\\\u0394\\\" -> delta: \\u03B4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Text attributes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Text values have the following attributes:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }, this), \": returns an Integer equal to the number of characters\", /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"samples/types/text/count.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Text methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Text values have the following methods:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"toLowerCase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), \": returns a Text with all characters in lower case\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 99\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"/samples/types/text/toLowerCase.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"toUpperCase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), \": returns a Text with all characters in upper case\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 99\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"/samples/types/text/toUpperCase.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"toCapitalized\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), \": returns a Text with the first letter of each word capitalized\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 114\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"/samples/types/text/toCapitalized.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"split\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), \": splits a Text into segments defined by a separator and return them as a Text list\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 126\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"/samples/types/text/split.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"trim\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), \": returns a Text with leading and trailing white space trimmed\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 104\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"/samples/types/text/trim.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"replace\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), \": returns a Text with one occurence replaced\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 89\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"/samples/types/text/replace.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"replaceAll\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), \": returns a Text with all occurences replaced\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 93\n          }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n            sampleUrl: \"/samples/types/text/replaceAll.pec\",\n            runnable: true\n          }, PromptoPlayer.nextKey(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/TextType.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","String","raw","nextKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Text\");\n    }\n\n    renderContent(topicSelected) {\n        return <div>\n            <h2>Text</h2>\n\n            <p>The <code>Text</code> type is a technical type used for values such as a name or a description, where the\n                textual representation\n                and the meaning are equivalent.<br/>\n                All Text values use <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://unicode.org\">Unicode</a> internally.<br/>\n                A Text literal must be enclosed in double quotes:<br/>\n            </p>\n            <pre><code>\"This is a text literal.\"</code></pre>\n\n\n            <p>If a Text literal must contain a double-quote, that double-quote must be escaped using the anti-slash '\\' character:</p>\n            <pre><code>\"This text literal contains two \\\"double quotes\\\".\"</code></pre>\n\n            <p> Consequently, if a Text literal must contain the anti-slash'\\' character, the '\\' character must be\n                escaped using the '\\' character.</p>\n            <pre><code>\"This text literal contains one anti-slash: \\\\.\"</code></pre>\n\n            <p> Additionally, Text literals support the following special characters:</p>\n            <pre><code>{String.raw`\"\\t\" -> Tab\n\"\\b\" -> Back space\n\"\\n\" -> New line\n\"\\r\" -> Carriage return\n\"\\f\" -> Form feed\n\"\\'\" -> Single quote`}</code></pre>\n\n            <p>\n                Finally, Text literals support <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://unicode.org\">Unicode</a> characters in\n                the form of UTF-16 hexadecimal characters:</p>\n            <pre><code>\"delta: \\u0394\" -> delta: &delta;</code></pre>\n\n            <h3>\n                Text attributes\n            </h3>\n            <p>Text values have the following attributes:</p>\n            <ul>\n                <li><code>count</code>: returns an Integer equal to the number of characters\n                    <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/text/count.pec\" runnable={true}/>\n                </li>\n            </ul>\n\n\n            <h3>\n                Text methods\n            </h3>\n            <p>Text values have the following methods:</p>\n                <ul>\n                    <li><code>toLowerCase</code>: returns a Text with all characters in lower case<p/>\n                        <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"/samples/types/text/toLowerCase.pec\" runnable={true}/>\n                        <br/>\n                    </li>\n                    <li><code>toUpperCase</code>: returns a Text with all characters in upper case<p/>\n                        <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"/samples/types/text/toUpperCase.pec\" runnable={true}/>\n                        <br/>\n                    </li>\n                    <li><code>toCapitalized</code>: returns a Text with the first letter of each word capitalized<p/>\n                        <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"/samples/types/text/toCapitalized.pec\" runnable={true}/>\n                        <br/>\n                    </li>\n                    <li><code>split</code>: splits a Text into segments defined by a separator and return them as a Text list<p/>\n                        <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"/samples/types/text/split.pec\" runnable={true}/>\n                        <br/>\n                    </li>\n                    <li><code>trim</code>: returns a Text with leading and trailing white space trimmed<p/>\n                        <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"/samples/types/text/trim.pec\" runnable={true}/>\n                        <br/>\n                    </li>\n                    <li><code>replace</code>: returns a Text with one occurence replaced<p/>\n                        <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"/samples/types/text/replace.pec\" runnable={true}/>\n                        <br/>\n                    </li>\n                    <li><code>replaceAll</code>: returns a Text with all occurences replaced<p/>\n                        <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"/samples/types/text/replaceAll.pec\" runnable={true}/>\n                        <br/>\n                    </li>\n                </ul>\n\n\n        </div>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}