{"ast":null,"code":"import { Search, StopWordsMap, StopWordsTokenizer, SimpleTokenizer } from 'js-search';\nimport asap from 'asap';\nconst HTML_TAGS = new Set([\"<a>\", \"<abbr>\", \"<address>\", \"<area>\", \"<article>\", \"<aside>\", \"<audio>\", \"<b>\", \"<base>\", \"<bdi>\", \"<bdo>\", \"<blockquote>\", \"<body>\", \"<br>\", \"<button>\", \"<canvas>\", \"<caption>\", \"<table>\", \"<cite>\", \"<code>\", \"<samp>\", \"<kbd>\", \"<col>\", \"<col>\", \"<colgroup>\", \"<colgroup>\", \"<data>\", \"<datalist>\", \"<input>\", \"<dd>\", \"<dt>\", \"<dl>\", \"<del>\", \"<details>\", \"<dfn>\", \"<dialog>\", \"<div>\", \"<dl>\", \"<dd>\", \"<dt>\", \"<dt>\", \"<dl>\", \"<em>\", \"<strong>\", \"<embed>\", \"<fieldset>\", \"<figure>\", \"<footer>\", \"<form>\", \"<h1>\", \"<h2>\", \"<h3>\", \"<h4>\", \"<h5>\", \"<h6>\", \"<head>\", \"<header>\", \"<head>\", \"<header>\", \"<hgroup>\", \"<h1>\", \"<h2>\", \"<h3>\", \"<hr>\", \"<html>\", \"<i>\", \"<i>\", \"<iframe>\", \"<img>\", \"<input>\", \"<ins>\", \"<kbd>\", \"<keygen>\", \"<label>\", \"<legend>\", \"<li>\", \"<ol>\", \"<ul>\", \"<link>\", \"<head>\", \"<a>\", \"<main>\", \"<map>\", \"<mark>\", \"<menu>\", \"<menuitem>\", \"<meta>\", \"<head>\", \"<meter>\", \"<nav>\", \"<noscript>\", \"<noscript>\", \"<object>\", \"<ol>\", \"<li>\", \"<optgroup>\", \"<option>\", \"<select>\", \"<output>\", \"<p>\", \"<p>\", \"<param>\", \"<pre>\", \"<progress>\", \"<q>\", \"<rb>\", \"<rp>\", \"<rt>\", \"<rtc>\", \"<ruby>\", \"<s>\", \"<samp>\", \"<script>\", \"<section>\", \"<select>\", \"<option>\", \"<small>\", \"<source>\", \"<audio>\", \"<video>\", \"<span>\", \"<strong>\", \"<style>\", \"<sub>\", \"<sup>\", \"<summary>\", \"<details>\", \"<sup>\", \"<sub>\", \"<table>\", \"<tbody>\", \"<td>\", \"<template>\", \"<textarea>\", \"<tfoot>\", \"<th>\", \"<thead>\", \"<time>\", \"<title>\", \"<tr>\", \"<track>\", \"<audio>\", \"<video>\", \"<u>\", \"<ul>\", \"<li>\", \"<var>\", \"<video>\", \"<wbr>\"]);\nHTML_TAGS.forEach(tag => {\n  tag = tag.substring(1, tag.length - 1); // function body contains tag name, not jsx\n\n  StopWordsMap[tag] = true;\n});\n\nclass SearchEngine {\n  constructor() {\n    this.jssearch = new Search(\"path\");\n    this.jssearch.tokenizer = new StopWordsTokenizer(new SimpleTokenizer());\n    this.jssearch.addIndex(\"title\");\n    this.jssearch.addIndex(\"sentence\");\n    this.addTopic = this.addTopic.bind(this);\n    this.search = this.search.bind(this);\n    this.topics = new Map();\n  }\n\n  addTopic(topic, path) {\n    path = path || \"\";\n    path += \"/\" + topic.title;\n    this.topics.set(path, topic);\n    asap(() => this.addTopicTitle.bind(this)(topic, path));\n\n    if (topic.children) {\n      topic.children.forEach(t => this.addTopic(t, path));\n    }\n  }\n\n  addTopicTitle(topic, path) {\n    const document = {\n      path: path,\n      title: topic.title\n    };\n    this.jssearch.addDocuments([document]);\n    asap(() => this.addTopicSentences.bind(this)(topic, path));\n  }\n\n  addTopicSentences(topic, path) {\n    // we actually want the function body, and we extract text out of it\n    const sentences = topic.renderContent.toString().match(/\"[^\"]*\"/g);\n    sentences.forEach(s => asap(() => this.addTopicSentence.bind(this)(topic, s, path)));\n  }\n\n  addTopicSentence(topic, sentence, path) {\n    // drop surrounding quotes\n    sentence = sentence.substring(1, sentence.length - 1);\n    const document = {\n      path: path,\n      sentence: sentence\n    };\n    this.jssearch.addDocuments([document]);\n  }\n\n  search(value) {\n    let entries = this.jssearch.search(value);\n    if (entries.length > 10) entries = entries.slice(0, 10);\n    entries.forEach(entry => entry.topic = this.topics.get(entry.path), this);\n    return entries;\n  }\n\n}\n\nexport default new SearchEngine();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/search/SearchEngine.js"],"names":["Search","StopWordsMap","StopWordsTokenizer","SimpleTokenizer","asap","HTML_TAGS","Set","forEach","tag","substring","length","SearchEngine","constructor","jssearch","tokenizer","addIndex","addTopic","bind","search","topics","Map","topic","path","title","set","addTopicTitle","children","t","document","addDocuments","addTopicSentences","sentences","renderContent","toString","match","s","addTopicSentence","sentence","value","entries","slice","entry","get"],"mappings":"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","sourcesContent":["import { Search, StopWordsMap, StopWordsTokenizer, SimpleTokenizer }  from 'js-search';\nimport asap from 'asap';\n\nconst HTML_TAGS = new Set([\"<a>\", \"<abbr>\", \"<address>\", \"<area>\", \"<article>\", \"<aside>\", \"<audio>\", \"<b>\", \"<base>\", \"<bdi>\", \"<bdo>\", \"<blockquote>\",\n    \"<body>\", \"<br>\", \"<button>\", \"<canvas>\", \"<caption>\", \"<table>\", \"<cite>\", \"<code>\", \"<samp>\", \"<kbd>\", \"<col>\", \"<col>\", \"<colgroup>\",\n    \"<colgroup>\", \"<data>\", \"<datalist>\", \"<input>\", \"<dd>\", \"<dt>\", \"<dl>\", \"<del>\", \"<details>\", \"<dfn>\", \"<dialog>\", \"<div>\", \"<dl>\",\n    \"<dd>\", \"<dt>\", \"<dt>\", \"<dl>\", \"<em>\", \"<strong>\", \"<embed>\", \"<fieldset>\", \"<figure>\", \"<footer>\", \"<form>\", \"<h1>\", \"<h2>\", \"<h3>\",\n    \"<h4>\", \"<h5>\", \"<h6>\", \"<head>\", \"<header>\", \"<head>\", \"<header>\", \"<hgroup>\", \"<h1>\", \"<h2>\", \"<h3>\", \"<hr>\", \"<html>\", \"<i>\",\n    \"<i>\", \"<iframe>\", \"<img>\", \"<input>\", \"<ins>\", \"<kbd>\", \"<keygen>\", \"<label>\", \"<legend>\", \"<li>\", \"<ol>\",\n    \"<ul>\", \"<link>\", \"<head>\", \"<a>\", \"<main>\", \"<map>\", \"<mark>\", \"<menu>\", \"<menuitem>\", \"<meta>\", \"<head>\", \"<meter>\", \"<nav>\",\n    \"<noscript>\", \"<noscript>\", \"<object>\", \"<ol>\", \"<li>\", \"<optgroup>\", \"<option>\", \"<select>\", \"<output>\", \"<p>\", \"<p>\", \"<param>\",\n    \"<pre>\", \"<progress>\", \"<q>\", \"<rb>\", \"<rp>\", \"<rt>\", \"<rtc>\", \"<ruby>\", \"<s>\", \"<samp>\", \"<script>\", \"<section>\", \"<select>\", \"<option>\",\n    \"<small>\", \"<source>\", \"<audio>\", \"<video>\", \"<span>\", \"<strong>\", \"<style>\", \"<sub>\", \"<sup>\", \"<summary>\", \"<details>\", \"<sup>\", \"<sub>\",\n    \"<table>\", \"<tbody>\", \"<td>\", \"<template>\", \"<textarea>\", \"<tfoot>\", \"<th>\", \"<thead>\", \"<time>\", \"<title>\", \"<tr>\", \"<track>\", \"<audio>\",\n    \"<video>\", \"<u>\", \"<ul>\", \"<li>\", \"<var>\", \"<video>\", \"<wbr>\"]);\n\n\nHTML_TAGS.forEach(tag=>{\n    tag = tag.substring(1, tag.length-1); // function body contains tag name, not jsx\n    StopWordsMap[tag]=true;\n});\n\nclass SearchEngine {\n\n    constructor() {\n        this.jssearch = new Search(\"path\");\n        this.jssearch.tokenizer = new StopWordsTokenizer(new SimpleTokenizer());\n        this.jssearch.addIndex(\"title\");\n        this.jssearch.addIndex(\"sentence\");\n        this.addTopic = this.addTopic.bind(this);\n        this.search = this.search.bind(this);\n        this.topics = new Map();\n    }\n\n\n\n    addTopic(topic, path) {\n        path = path || \"\";\n        path += \"/\" + topic.title;\n        this.topics.set(path, topic);\n        asap(() => this.addTopicTitle.bind(this)(topic, path));\n        if (topic.children) {\n            topic.children.forEach(t=>this.addTopic(t, path));\n        }\n    }\n\n    addTopicTitle(topic, path) {\n        const document = {\n            path: path,\n            title: topic.title\n        }\n        this.jssearch.addDocuments([document]);\n        asap(() => this.addTopicSentences.bind(this)(topic, path));\n    }\n\n    addTopicSentences(topic, path) {\n        // we actually want the function body, and we extract text out of it\n        const sentences = topic.renderContent.toString().match(/\"[^\"]*\"/g);\n        sentences.forEach(s => asap(() => this.addTopicSentence.bind(this)(topic, s, path)));\n    }\n\n    addTopicSentence(topic, sentence, path) {\n        // drop surrounding quotes\n        sentence = sentence.substring(1, sentence.length-1);\n        const document = {\n            path: path,\n            sentence: sentence\n        }\n        this.jssearch.addDocuments([document]);\n    }\n\n    search(value) {\n        let entries = this.jssearch.search(value);\n        if(entries.length > 10)\n            entries = entries.slice(0, 10);\n        entries.forEach(entry=>entry.topic=this.topics.get(entry.path), this);\n        return entries;\n    }\n}\n\n\n\nexport default new SearchEngine();"]},"metadata":{},"sourceType":"module"}