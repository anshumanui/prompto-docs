{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/statements/ForEach.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"For each\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"For each statements\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"A for each statement is a way to execute a set of statements for each item in a collection.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 107\n        }, this), \"A simple for each statement has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"for each \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 73\n          }, this), \" in \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"collection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 88\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 58\n        }, this), \"followed by a list of statements which will be executed for each item in the collection, where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 23\n        }, this), \" is a variable name and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"collection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 77\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 71\n        }, this), \" is a collection. If \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 20\n        }, this), \" already exists, its type must be compatible with the item type of the collection.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/statements/for-each.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Optionally, a for each statement can populate an index variable.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 12,\n        sampleUrl: \"samples/statements/for-each-index.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Breaking the iteration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"It is sometimes useful to break the iteration before reaching the end of the collection. This is achieved using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"break\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 40\n        }, this), \" statement.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/statements/for-each-break.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/statements/ForEach.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,UAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA,+HAA8F;AAAA;AAAA;AAAA;AAAA,gBAA9F,4DAC6C;AAAA,+CAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAf,uBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD7C,kHAGU;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAHV,2CAG0D;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAH1D,wCAIO;AAAA,iCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAJP;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eASH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,iCAAvD;AAAyF,QAAA,QAAQ,EAAE;AAAnG,SAAoBL,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cATG,eAUC;AAAA;AAAA;AAAA;AAAA,cAVD,eAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZD,eAcH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,uCAAlE;AAA0G,QAAA,QAAQ,EAAE;AAApH,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAdG,eAeH;AAAA;AAAA;AAAA;AAAA,cAfG,eAiBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBD,eAqBC;AAAA,wJACuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADvB;AAAA;AAAA;AAAA;AAAA;AAAA,cArBD,eAuBH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,uCAAvD;AAA+F,QAAA,QAAQ,EAAE;AAAzG,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAvBG,eAwBC;AAAA;AAAA;AAAA;AAAA,cAxBD;AAAA,oBAAP;AA2BH;;AAlCyB;;AAsC9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"For each\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>For each statements</h2>\n\n            <p>A for each statement is a way to execute a set of statements for each item in a collection.<br/>\n                A simple for each statement has the form <code>for each <i>item</i> in <i>collection</i></code>\n                followed by a list of statements which will be executed for each item in the collection,\n                where <code><i>item</i></code> is a variable name and <code><i>collection</i></code> is a collection.\n                If <code><i>item</i></code> already exists, its type must be compatible with the item type of the\n                collection.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/statements/for-each.pec\" runnable={true}/>\n                <br/>\n\n                <p>Optionally, a for each statement can populate an index variable.\n                </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={12} sampleUrl=\"samples/statements/for-each-index.pec\" runnable={true}/>\n            <br/>\n\n                <h3>\n                    Breaking the iteration\n                </h3>\n\n                <p>It is sometimes useful to break the iteration before reaching the end of the collection. This is\n                    achieved using the <code>break</code> statement.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/statements/for-each-break.pec\" runnable={true}/>\n                <br/>\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}