{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/DictionaryType.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Dictionary\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Dictionary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The Dictionary type is a technical type used to keep together 0 or more items of the same type and access them using a Text key.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 144\n        }, this), \"The items themselves can be of any type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 57\n        }, this), \"A Dictionary type is declared by adding colon surrounded by angle brackets '<:>' after the item type.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`Text<:> -> the type Text dictionary`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A Dictionary literal must be enclosed in angle brackets '<' and '>', the items being separated by a comma ',', the key and value being separated by a semi colon ':'.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`<:> -> an empty Dictionary\n<\"Paris\": \"France\", \"London\": \"England\", \"Berlin\": \"Germany\"> -> a Dictionary of 3 keys and Text values`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Items in a Dictionary can be accessed individually using their key.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`d = <\"Paris\": \"France\", \"London\": \"England\"> -> assign a Dictionary of 2 Texts to variable 'd'\nd[\"Paris\"] -> get item with key \"Paris\" in Dictionary referenced by variable 'd' i.e. \"France\"`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Dictionary attributes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Dictionary values have the following attributes:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 21\n          }, this), \": returns an Integer equal to the number of key/value pairs in the dictionary\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"keys\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 21\n          }, this), \": returns a Set of Text values containing all the keys in the dictionary\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"values\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 21\n          }, this), \": returns a List of values containing all the values in the dictionary. The exact type of the List is determined by the exact type of the dictionary\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n          lines: 8,\n          sampleUrl: \"samples/types/dictionary/attributes.pec\",\n          runnable: true\n        }, PromptoPlayer.nextKey(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/DictionaryType.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","String","raw","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,YAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA,oKAAmI;AAAA;AAAA;AAAA;AAAA,gBAAnI,2DAC4C;AAAA;AAAA;AAAA;AAAA,gBAD5C;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAMC;AAAA,+BAAK;AAAA,oBAAOC,MAAM,CAACC,GAAI;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAND,eAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPD,eAQC;AAAA,+BAAK;AAAA,oBAAOD,MAAM,CAACC,GAAI;AACvC;AADqB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cARD,eAUC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVD,eAWC;AAAA,+BAAK;AAAA,oBAAOD,MAAM,CAACC,GAAI;AACvC;AADqB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAXD,eAeH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfG,eAkBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBG,eAmBH;AAAA,gCACI;AAAA,kCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,kCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,kCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAKI,QAAC,aAAD;AAA6C,UAAA,KAAK,EAAE,CAApD;AAAuD,UAAA,SAAS,EAAC,yCAAjE;AAA2G,UAAA,QAAQ,EAAE;AAArH,WAAoBP,aAAa,CAACQ,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBG,eA0BH;AAAA;AAAA;AAAA;AAAA,cA1BG;AAAA,oBAAP;AA6BH;;AApCyB;;AAwC9B,eAAe,IAAIN,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Dictionary\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Dictionary</h2>\n\n            <p>The Dictionary type is a technical type used to keep together 0 or more items of the same type and access them using a Text key.<br/>\n                The items themselves can be of any type.<br/>\n                A Dictionary type is declared by adding colon surrounded by angle brackets '&lt;:&gt;' after the item type.</p>\n                <pre><code>{String.raw`Text<:> -> the type Text dictionary`}</code></pre>\n                <p>A Dictionary literal must be enclosed in angle brackets '&lt;' and '&gt;', the items being separated by a comma ',', the key and value being separated by a semi colon ':'.</p>\n                <pre><code>{String.raw`<:> -> an empty Dictionary\n<\"Paris\": \"France\", \"London\": \"England\", \"Berlin\": \"Germany\"> -> a Dictionary of 3 keys and Text values`}</code></pre>\n                <p> Items in a Dictionary can be accessed individually using their key.</p>\n                <pre><code>{String.raw`d = <\"Paris\": \"France\", \"London\": \"England\"> -> assign a Dictionary of 2 Texts to variable 'd'\nd[\"Paris\"] -> get item with key \"Paris\" in Dictionary referenced by variable 'd' i.e. \"France\"`}</code></pre>\n\n\n            <h3>\n                Dictionary attributes\n            </h3>\n            <p>Dictionary values have the following attributes:</p>\n            <ul>\n                <li><code>count</code>: returns an Integer equal to the number of key/value pairs in the dictionary</li>\n                <li><code>keys</code>: returns a Set of Text values containing all the keys in the dictionary</li>\n                <li><code>values</code>: returns a List of values containing all the values in the dictionary.\n                    The exact type of the List is determined by the exact type of the dictionary</li>\n                <PromptoPlayer key={PromptoPlayer.nextKey()} lines={8} sampleUrl=\"samples/types/dictionary/attributes.pec\" runnable={true}/>\n            </ul>\n            <br/>\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}