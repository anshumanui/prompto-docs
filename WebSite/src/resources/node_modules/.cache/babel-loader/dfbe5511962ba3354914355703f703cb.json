{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/identifiers.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Identifiers() {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Identifiers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Many Prompto objects are uniquely identified by a built-in or user defined name: attributes, categories, methods, variables and so forth.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Type names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto supports both built-in types and user defined types.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 76\n      }, this), \"The name of a type must start with an uppercase letter, followed by 0 or more letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 28\n      }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"'A'..'Z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 42\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }, this), \" is a valid type name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"TEXT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"not\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 42\n        }, this), \" a valid type name (it's a symbol)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"not\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 42\n        }, this), \" a valid type name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Attribute names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto supports attributes.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 44\n      }, this), \"The name of an attribute must start with a lowercase letter, followed by 0 or more letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 28\n      }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"'a'..'z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 42\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"dateOfBirth\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), \" is a valid attribute name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"DateOfBirth\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"not\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 49\n        }, this), \" a valid attribute name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Variable names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto supports variables.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 43\n      }, this), \"The name of a variable must start with a lowercase letter, followed by 0 or more letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 28\n      }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"'a'..'z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 42\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"someItem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), \" is a valid variable name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"SomeItem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"not\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 46\n        }, this), \" a valid variable name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Method names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto supports methods.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 41\n      }, this), \"The name of a variable must start with a letter, followed by 0 or more letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 116\n      }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"('a'..'z' | 'A'..'Z')('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 42\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"someMethod\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), \" is a valid method name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"SomeMethod\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), \" is a valid method name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"SOME_METHOD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"not\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 49\n        }, this), \" a valid method name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Symbol names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prompto supports enumerations of both built-in types and user defined types.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 92\n      }, this), \"The name of an enumerated value is called a symbol. It must start with an uppercase letter, followed by 0 or more uppercase letter, digit or underscore.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 65\n      }, this), \"The formal definition is \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"'A'..'Z' ('A'..'Z' | '0'..'9' | '_')*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 42\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"NORTH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), \" is a valid symbol\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"North\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), \" is \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"not\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 43\n        }, this), \" a valid symbol\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 3\n  }, this);\n}\n_c = Identifiers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Identifiers\");","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/identifiers.js"],"names":["Identifiers"],"mappings":"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","sourcesContent":["export default function Identifiers() {\n\treturn (\n\t\t<li>\n\t\t\t<h2>Identifiers</h2>\n\n            <p>Many Prompto objects are uniquely identified by a built-in or user defined name: attributes, categories,\n                methods, variables and so forth.</p>\n\n            <h2>Type names</h2>\n\n            <p>Prompto supports both built-in types and user defined types.<br />\n                The name of a type must start with an uppercase letter, followed by 0 or more letter, digit or\n                underscore.<br />\n                The formal definition is <code>'A'..'Z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>Text</code> is a valid type name</li>\n                <li><code>TEXT</code> is <i>not</i> a valid type name (it's a symbol)</li>\n                <li><code>text</code> is <i>not</i> a valid type name</li>\n            </ul>\n            <p/>\n\n            <h2>Attribute names</h2>\n\n            <p>Prompto supports attributes.<br />\n                The name of an attribute must start with a lowercase letter, followed by 0 or more letter, digit or\n                underscore.<br/>\n                The formal definition is <code>'a'..'z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>dateOfBirth</code> is a valid attribute name</li>\n                <li><code>DateOfBirth</code> is <i>not</i> a valid attribute name</li>\n            </ul>\n            <p/>\n\n            <h2>Variable names</h2>\n\n            <p>Prompto supports variables.<br />\n                The name of a variable must start with a lowercase letter, followed by 0 or more letter, digit or\n                underscore.<br />\n                The formal definition is <code>'a'..'z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>someItem</code> is a valid variable name</li>\n                <li><code>SomeItem</code> is <i>not</i> a valid variable name</li>\n            </ul>\n            <p/>\n\n            <h2>Method names</h2>\n\n            <p>Prompto supports methods.<br />\n                The name of a variable must start with a letter, followed by 0 or more letter, digit or underscore.<br />\n                The formal definition is <code>('a'..'z' | 'A'..'Z')('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>someMethod</code> is a valid method name</li>\n                <li><code>SomeMethod</code> is a valid method name</li>\n                <li><code>SOME_METHOD</code> is <i>not</i> a valid method name</li>\n            </ul>\n            <p/>\n\n            <h2>Symbol names</h2>\n\n            <p>Prompto supports enumerations of both built-in types and user defined types.<br />\n                The name of an enumerated value is called a symbol. It must start with an uppercase letter, followed by\n                0 or more uppercase letter, digit or underscore.<br/>\n                The formal definition is <code>'A'..'Z' ('A'..'Z' | '0'..'9' | '_')*</code>.\n            </p>\n            <ul>\n                <li><code>NORTH</code> is a valid symbol</li>\n                <li><code>North</code> is <i>not</i> a valid symbol</li>\n            </ul>\n\t\t</li>\n\t)\n}"]},"metadata":{},"sourceType":"module"}