{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Comparison.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Comparison\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Comparison expressions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Comparison expressions are used to compare values with order in mind (which is greater?).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 105\n        }, this), \"A comparison expression is a code fragment which produces a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Boolean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 77\n        }, this), \" value, which can then be used as an input for other operations: print, write, method call and so forth.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 98\n        }, this), \"A comparison expression has the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"a \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"op\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 62\n          }, this), \" b\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 54\n        }, this), \" where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"op\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 93\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 87\n        }, this), \" is one the following comparison operators: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 28\n        }, this), \", \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"<=\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 47\n        }, this), \", \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 67\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \">=\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 89\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 108\n        }, this), \"Please note that \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 34\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \">=\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 56\n        }, this), \" are mutually exlusive, same for \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"<=\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 44\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 62\n        }, this), \"Also note that Prompto can only compare compatible values (it does not make sense to compare text and number).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comparing Text values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Prompto compares Text values lexicographically i.e. using their underlying Unicode representation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 9,\n        sampleUrl: \"samples/expressions/compare-text.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comparing Character values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Prompto compares Character values lexicographically i.e. using their underlying Unicode representation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 9,\n        sampleUrl: \"samples/expressions/compare-char.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comparing Integer and Decimal values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 9,\n        sampleUrl: \"samples/expressions/compare-number.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comparing Date values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 9,\n        sampleUrl: \"samples/expressions/compare-date.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comparing Time values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 9,\n        sampleUrl: \"samples/expressions/compare-time.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comparing DateTime values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 9,\n        sampleUrl: \"samples/expressions/compare-date-time.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comparing user defined values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Prompto supports user defined comparisons. See categories for details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/expressions/Comparison.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Comparison\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Comparison expressions</h2>\n\n            <p>Comparison expressions are used to compare values with order in mind (which is greater?).<br/>\n                A comparison expression is a code fragment which produces a <code>Boolean</code> value, which can then\n                be used as an input for other operations: print, write, method call and so forth.<br/>\n                A comparison expression has the form <code>a <i>op</i> b</code> where <code><i>op</i></code> is one the\n                following comparison\n                operators: <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> and <code>&gt;=</code>.<br/>\n                Please note that <code>&lt;</code> and <code>&gt;=</code> are mutually exlusive, same\n                for <code>&lt;=</code> and <code>&gt;</code>.<br/>\n                Also note that Prompto can only compare compatible values (it does not make sense to compare text and\n                number).\n            </p>\n            <h3>Comparing Text values</h3>\n\n            <p>Prompto compares Text values lexicographically i.e. using their underlying Unicode representation.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={9} sampleUrl=\"samples/expressions/compare-text.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Comparing Character values</h3>\n\n            <p>Prompto compares Character values lexicographically i.e. using their underlying Unicode\n                representation.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={9} sampleUrl=\"samples/expressions/compare-char.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Comparing Integer and Decimal values</h3>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={9} sampleUrl=\"samples/expressions/compare-number.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Comparing Date values</h3>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={9} sampleUrl=\"samples/expressions/compare-date.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Comparing Time values</h3>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={9} sampleUrl=\"samples/expressions/compare-time.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Comparing DateTime values</h3>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={9} sampleUrl=\"samples/expressions/compare-date-time.pec\" runnable={true}/>\n            <br/>\n\n            <h3>Comparing user defined values</h3>\n\n            <p>Prompto supports user defined comparisons. See categories for details.</p>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}