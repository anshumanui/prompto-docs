{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/events/InputChangedEvent.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"InputChangedEvent\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"InputChangedEvent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"As its name indicates, an InputChangedEvent is generated when the user types or deletes text from an input.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 123\n        }, this), \"The event is generated when the user \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"releases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 54\n        }, this), \" the keyboard key, not when he/she presses it.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The InputChangedEvent provides the following methods:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"getProposedText\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 43\n          }, this), \"This method returns a Text, which is set to the new value immediately after typing.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 100\n          }, this), \"At this point it is possible to reject the input, by resetting the input Text to its current value.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"getCurrentText\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 42\n          }, this), \"This method returns a Text, which is set to the input value before new Text was typed or deleted.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 118\n          }, this), \"This method is useful to analyze the change in a stateless fashion.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In the below example, we capture each InputChangedEvent, and apply business rules:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 22,\n        sampleUrl: \"samples/events/input-changed-event.poc\"\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"(the above Input widget is a fictitious one, not the html tag. See ReactBootstrap for a real example)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/events/InputChangedEvent.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,mBAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAEH;AAAA,+IAA8G;AAAA;AAAA;AAAA;AAAA,gBAA9G,wDACyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADzC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAKH;AAAA,gCACI;AAAA,kCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,eAA0B;AAAA;AAAA;AAAA;AAAA,kBAA1B,sGACmF;AAAA;AAAA;AAAA;AAAA,kBADnF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAA,kCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,eAAyB;AAAA;AAAA;AAAA;AAAA,kBAAzB,oHACqG;AAAA;AAAA;AAAA;AAAA,kBADrG;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALG,eAcH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdG,eAeH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC;AAAlE,SAAoBL,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAfG,eAgBH;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,cAhBG;AAAA,oBAAP;AAkBH;;AAzByB;;AA6B9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"InputChangedEvent\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>InputChangedEvent</h2>\n            <p>As its name indicates, an InputChangedEvent is generated when the user types or deletes text from an input.<br/>\n                The event is generated when the user <i>releases</i> the keyboard key, not when he/she presses it.</p>\n            <p>The InputChangedEvent provides the following methods:</p>\n            <ul>\n                <li><b>getProposedText</b><br/>\n                This method returns a Text, which is set to the new value immediately after typing.<br/>\n                At this point it is possible to reject the input, by resetting the input Text to its current value.</li>\n                <li><b>getCurrentText</b><br/>\n                    This method returns a Text, which is set to the input value before new Text was typed or deleted.<br/>\n                    This method is useful to analyze the change in a stateless fashion.\n                </li>\n            </ul>\n            <p>In the below example, we capture each InputChangedEvent, and apply business rules:</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={22} sampleUrl=\"samples/events/input-changed-event.poc\"/>\n            <p><i>(the above Input widget is a fictitious one, not the html tag. See ReactBootstrap for a real example)</i></p>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}