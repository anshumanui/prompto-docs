{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/DocumentType.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Document\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 20\n        }, this), \" type is a technical type used to manipulate arbitrary data structures with loose typing.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 130\n        }, this), \"A Document has items which can be of any type, atomic, collection or Document.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 95\n        }, this), \"A Document is useful to read data from messages, files or the Internet, and convert it to typed data.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 118\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Creating a Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Creating a Document is done simply by using a Document literal, enclosed in curly braces '\", ' and ', \"', the items being separated by a comma ',', the key and value being separated by a semi colon ':'.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`{} -> an empty Document\n{\"Paris\": \"France\", \"John\": 20000} -> a Document of 2 keys and  values`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Document \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"keys\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 25\n        }, this), \" starting with a lowercase letter and not comprising special characters do not need to be enclosed in double-quotes.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/types/document/member.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Alternately, a Document can be created using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 65\n        }, this), \" keyword and assigning it to a variable. Once the document is created, it can be populated simply by assigning values to members. Both member definition and member population occur at the same time i.e. a document has no predefined members.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/types/document/assign.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Accessing Document members\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Items in a Document can be accessed individually using their key.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`d = {\"Paris\": \"France\", \"London\": \"England\"} -> assign a Document of 2 Texts to variable 'd'\nd[\"Paris\"] -> get item with key \"Paris\" in Document referenced by variable 'd' i.e. \"France\"`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Populating \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"deep\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 28\n        }, this), \" members\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"A \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"deep\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 18\n        }, this), \" member is a member that is not directly accessible from the root of a Document.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 109\n        }, this), \"Prompto gracefully creates missing members on the fly, making it very easy to populate them:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/types/document/assign-deep.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Populating list members\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Document members can also be lists: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/types/document/assign-list.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/types/DocumentType.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","String","raw","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,UAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA,wCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP,4GAAqH;AAAA;AAAA;AAAA;AAAA,gBAArH,iGACkF;AAAA;AAAA;AAAA;AAAA,gBADlF,wHAEyG;AAAA;AAAA;AAAA;AAAA,gBAFzG;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAOH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPG,eAQH;AAAA,iHAA8F,OAA9F;AAAA;AAAA;AAAA;AAAA;AAAA,cARG,eASH;AAAA,+BAAK;AAAA,oBAAOC,MAAM,CAACC,GAAI;AACnC;AADiB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cATG,eAWH;AAAA,6CAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXG,eAYH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,mCAAvD;AAA2F,QAAA,QAAQ,EAAE;AAArG,SAAoBP,aAAa,CAACQ,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAZG,eAaH;AAAA;AAAA;AAAA;AAAA,cAbG,eAcH;AAAA,qFAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApD;AAAA;AAAA;AAAA;AAAA;AAAA,cAdG,eAiBH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,mCAAvD;AAA2F,QAAA,QAAQ,EAAE;AAArG,SAAoBR,aAAa,CAACQ,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAjBG,eAmBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBG,eAoBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBG,eAqBH;AAAA,+BAAK;AAAA,oBAAOF,MAAM,CAACC,GAAI;AACnC;AADiB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cArBG,eAwBH;AAAA,+CAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBG,eAyBH;AAAA,sCAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAL,mGAAgG;AAAA;AAAA;AAAA;AAAA,gBAAhG;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBG,eA4BH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,wCAAvD;AAAgG,QAAA,QAAQ,EAAE;AAA1G,SAAoBP,aAAa,CAACQ,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA5BG,eA8BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BG,eA+BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BG,eAgCH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,wCAAvD;AAAgG,QAAA,QAAQ,EAAE;AAA1G,SAAoBR,aAAa,CAACQ,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAhCG;AAAA,oBAAP;AAmCH;;AA1CyB;;AA8C9B,eAAe,IAAIN,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Document\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Document</h2>\n\n            <p>The <code>Document</code> type is a technical type used to manipulate arbitrary data structures with loose typing.<br/>\n                A Document has items which can be of any type, atomic, collection or Document.<br/>\n                A Document is useful to read data from messages, files or the Internet, and convert it to typed data.<br/>\n            </p>\n            <h3>Creating a Document</h3>\n            <p>Creating a Document is done simply by using a Document literal, enclosed in curly braces '{' and '}', the items being separated by a comma ',', the key and value being separated by a semi colon ':'.</p>\n            <pre><code>{String.raw`{} -> an empty Document\n{\"Paris\": \"France\", \"John\": 20000} -> a Document of 2 keys and  values`}</code></pre>\n            <p>Document <i>keys</i> starting with a lowercase letter and not comprising special characters do not need to be enclosed in double-quotes.</p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/document/member.pec\" runnable={true}/>\n            <br/>\n            <p>Alternately, a Document can be created using the <code>Document</code> keyword and assigning it to a variable. Once the document is created, it can be populated simply by assigning values to members. Both member definition and\n                member population occur at the same time i.e. a document has no predefined members.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/document/assign.pec\" runnable={true}/>\n\n            <h3>Accessing Document members</h3>\n            <p>Items in a Document can be accessed individually using their key.</p>\n            <pre><code>{String.raw`d = {\"Paris\": \"France\", \"London\": \"England\"} -> assign a Document of 2 Texts to variable 'd'\nd[\"Paris\"] -> get item with key \"Paris\" in Document referenced by variable 'd' i.e. \"France\"`}</code></pre>\n\n            <h3>Populating <i>deep</i> members</h3>\n            <p>A <i>deep</i> member is a member that is not directly accessible from the root of a Document.<br/>\n                Prompto gracefully creates missing members on the fly, making it very easy to populate them:\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/document/assign-deep.pec\" runnable={true}/>\n\n            <h3>Populating list members</h3>\n            <p>Document members can also be lists: </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/types/document/assign-list.pec\" runnable={true}/>\n\n        </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}