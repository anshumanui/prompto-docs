{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/errors/Syntax.js\";\nimport React from 'react';\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Syntax\");\n  }\n\n  renderContent(topicSelected) {\n    const listStyle = {\n      listStyle: \"none\"\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error handling syntax\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A try/fail block has the following structure:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: [\"switch on \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 41\n            }, this), \" doing:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 67\n          }, this), \"\\u2003list of \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"protected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 39\n          }, this), \" statements\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: [\"when \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 36\n            }, this), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 55\n          }, this), \"\\u2003list of statements\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: [\"when in [ \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"type1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 41\n            }, this), \", \", /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"type2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 55\n            }, this), \", ... ]:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 82\n          }, this), \"\\u2003list of statements\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"otherwise\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"when any\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 51\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 72\n          }, this), \"\\u2003list of statements\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"always:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 45\n          }, this), \"\\u2003list of statements\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"where \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 26\n        }, this), \" is a variable name which will be populated with the error object, and can be used in the corresponding handler section.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 70\n        }, this), \"The block must comprise \", /*#__PURE__*/_jsxDEV(\"u\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"at least one\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 41\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"handler\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 68\n        }, this), \", either a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"when\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 93\n        }, this), \", a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"when in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 19\n        }, this), \", a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"when any\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 43\n        }, this), \" or an \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"always\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 71\n        }, this), \" clause.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 98\n        }, this), \"There can be any number of \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"when\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 44\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"when in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 65\n        }, this), \" clauses.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 94\n        }, this), \"If present, the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"when any\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 33\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"otherwise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 58\n        }, this), \" clause must come after all \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"when\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 108\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"when any\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 130\n        }, this), \" clauses, and before the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"always\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 32\n        }, this), \" clause.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 59\n        }, this), \"If present, the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"always\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 33\n        }, this), \" clause must be the last one.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: listStyle,\n        children: [\"Examples of correct sequences:\", /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: String.raw`switch on error doing:\n    <i>list of statements</i>\nwhen in [NOT_MUTABLE, NOT_STORABLE]:\n    <i>list of statements</i>`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: String.raw`switch on error doing:\n    <i>list of statements</i>\nalways:\n    <i>list of statements</i>`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: String.raw`switch on error doing:\n    <i>list of statements</i>\nwhen NULL_REFERENCE:\n    <i>list of statements</i>\notherwise:\n    <i>list of statements</i>`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: String.raw`switch on error doing:\n    <i>list of statements</i>\nwhen any:\n    <i>list of statements</i>\nalways:\n    <i>list of statements</i>`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The execution is as follows:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Prompto tries to execute the list of \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"protected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 58\n          }, this), \" statements\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"if an error occurs:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Prompto looks for the first \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \"when\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 57\n              }, this), \" clause that accepts the error type\", /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"if such a clause exists, Prompto executes the correponding list of statements\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"otherwise if a \", /*#__PURE__*/_jsxDEV(\"code\", {\n                    children: \"when any\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 52\n                  }, this), \" clause exists, Prompto executes the correponding list of statements\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"whether or not an error occurs:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"if there is an \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \"always\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 44\n              }, this), \" clause, Prompto executes the correponding list of statements\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/errors/Syntax.js"],"names":["React","Topic","ThisTopic","constructor","renderContent","topicSelected","listStyle","String","raw"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Syntax\");\n    }\n\n    renderContent(topicSelected) {\n        const listStyle = { listStyle: \"none\" };\n        return <>\n            <h2>Error handling syntax</h2>\n\n                <p>A try/fail block has the following structure:</p>\n                <ul>\n                    <li><code>switch on <i>error</i> doing:</code><br/>\n                        &emsp;list of <i>protected</i> statements</li>\n                    <li><code>when <i>type</i>:</code><br/>\n                        &emsp;list of statements</li>\n                    <li><code>when in [ <i>type1</i>, <i>type2</i>, ... ]:</code><br/>\n                        &emsp;list of statements</li>\n                    <li><code>otherwise</code> or <code>when any</code><br/>\n                        &emsp;list of statements</li>\n                    <li><code>always:</code><br/>\n                        &emsp;list of statements</li>\n                </ul>\n                <p>where <code><i>error</i></code> is a variable name which will be populated with the error object,\n                and can be used in the corresponding handler section.<br/>\n                The block must comprise <u><i>at least one</i></u> <i>handler</i>, either a <code>when</code>,\n                a <code>when in</code>, a <code>when any</code> or an <code>always</code> clause.<br/>\n                There can be any number of <code>when</code> or <code>when in</code> clauses.<br/>\n                If present, the <code>when any</code> or <code>otherwise</code> clause must come after all <code>when</code> and <code>when any</code> clauses,\n                and before the <code>always</code> clause.<br/>\n                If present, the <code>always</code> clause must be the last one.</p>\n                <br/>\n\n            <ul style={listStyle}>Examples of correct sequences:\n\n                <li><pre>{String.raw`switch on error doing:\n    <i>list of statements</i>\nwhen in [NOT_MUTABLE, NOT_STORABLE]:\n    <i>list of statements</i>`}</pre></li>\n\n                <li><pre>{String.raw`switch on error doing:\n    <i>list of statements</i>\nalways:\n    <i>list of statements</i>`}</pre></li>\n\n                <li><pre>{String.raw`switch on error doing:\n    <i>list of statements</i>\nwhen NULL_REFERENCE:\n    <i>list of statements</i>\notherwise:\n    <i>list of statements</i>`}</pre></li>\n\n                <li><pre>{String.raw`switch on error doing:\n    <i>list of statements</i>\nwhen any:\n    <i>list of statements</i>\nalways:\n    <i>list of statements</i>`}</pre></li>\n            </ul>\n            <br/>\n            <p>The execution is as follows:</p>\n            <ul>\n                <li>Prompto tries to execute the list of <i>protected</i> statements</li>\n                <li>if an error occurs:\n                    <ul>\n                        <li>Prompto looks for the first <code>when</code> clause that accepts the error type\n                            <ul>\n                                <li>if such a clause exists, Prompto executes the correponding list of statements</li>\n                                <li>otherwise if a <code>when any</code> clause exists, Prompto executes the correponding list of statements</li>\n                            </ul>\n                        </li>\n                    </ul>\n                </li>\n                <li>whether or not an error occurs:\n                    <ul><li>if there is an <code>always</code> clause, Prompto executes the correponding list of statements</li></ul>\n                </li>\n            </ul>\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}