{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/statements/Write.js\";\nimport React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Write\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Write statements\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Write expressions are used to write content to a resource such as a file or a web site. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Writing the entire content to an \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"inlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 50\n        }, this), \" resource\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Writing the entire content to a resource can be achieved using an \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"inlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 82\n        }, this), \" resource.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 106\n        }, this), \"An \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"inlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 20\n        }, this), \" resource is initialized directly within a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"write\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 77\n        }, this), \" statement.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 106\n        }, this), \"This is very useful for small files or small messages sent to outgoing network connections.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 108\n        }, this), \"It is however impossible to demonstrate within a browser, where programmatic access to local files is prohibited for security reasons.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 49\n        }, this), \"In the below example, we write to an \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"inlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 54\n        }, this), \" Buffer instead.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 84\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"( the Buffer only exists during the execution of the statement, and therefore it cannot be read back to display its content )\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/statements/write-inline.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Writing content line by line to a \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"managed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 51\n        }, this), \" resource\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Writing content line by line to a resource can be achieved using a \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"managed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 83\n        }, this), \" resource.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 107\n        }, this), \"A \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"managed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 19\n        }, this), \" resource is initialized through a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 68\n        }, this), \" clause followed by \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"do\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 20\n        }, this), \" and a list of statements.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 61\n        }, this), \"The resource is said to be \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"managed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 44\n        }, this), \" because Prompto will take care of resource cleanup when it exits the statements controlled by the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 50\n        }, this), \" clause.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        lines: 10,\n        sampleUrl: \"samples/statements/write-managed.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"It is illegal to call \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"write\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 38\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"read\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 60\n        }, this), \" on a resource which is neither \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"managed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), \" nor \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"inlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 44\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/statements/Write.js"],"names":["React","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,OAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAKH;AAAA,qEACqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADrC;AAAA;AAAA;AAAA;AAAA;AAAA,cALG,eAQH;AAAA,sGAAqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAArE,6BAA6F;AAAA;AAAA;AAAA;AAAA,gBAA7F,sBACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADP,8DACgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADhE,8BAC6F;AAAA;AAAA;AAAA;AAAA,gBAD7F,8GAE+F;AAAA;AAAA;AAAA;AAAA,gBAF/F,yJAIoC;AAAA;AAAA;AAAA;AAAA,gBAJpC,wDAKyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALzC,mCAKuE;AAAA;AAAA;AAAA;AAAA,gBALvE,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cARG,eAiBH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,qCAAvD;AAA6F,QAAA,QAAQ,EAAE;AAAvG,SAAoBL,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAjBG,eAmBH;AAAA,sEACsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADtC;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBG,eAsBH;AAAA,uGAAsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAtE,6BAA8F;AAAA;AAAA;AAAA;AAAA,gBAA9F,qBACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADN,sDACuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADvD,uCAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFP,6CAEgD;AAAA;AAAA;AAAA;AAAA,gBAFhD,8CAG+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAH/B,sHAKqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALrC;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBG,eA6BH,QAAC,aAAD;AAA6C,QAAA,KAAK,EAAE,EAApD;AAAwD,QAAA,SAAS,EAAC,sCAAlE;AAAyG,QAAA,QAAQ,EAAE;AAAnH,SAAoBN,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cA7BG,eA8BH;AAAA;AAAA;AAAA;AAAA,cA9BG,eA+BH;AAAA,0DAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAzB,uBAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA/C,mDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADZ,wBAC+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD/B;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BG;AAAA,oBAAP;AAmCH;;AA1CyB;;AA8C9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Write\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Write statements</h2>\n\n            <p>Write expressions are used to write content to a resource such as a file or a web site. </p>\n            <h3>\n                Writing the entire content to an <i>inlined</i> resource\n            </h3>\n            <p>Writing the entire content to a resource can be achieved using an <i>inlined</i> resource.<br/>\n                An <i>inlined</i> resource is initialized directly within a <code>write</code> statement.<br/>\n                This is very useful for small files or small messages sent to outgoing network connections.<br/>\n                It is however impossible to demonstrate within a browser, where programmatic access to local files is\n                prohibited for security reasons.<br/>\n                In the below example, we write to an <i>inlined</i> Buffer instead.<br/>\n                <i>( the Buffer only exists during the execution of the statement, and therefore it cannot be read back\n                    to display its content )</i>\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/statements/write-inline.pec\" runnable={true}/>\n\n            <h3>\n                Writing content line by line to a <i>managed</i> resource\n            </h3>\n            <p>Writing content line by line to a resource can be achieved using a <i>managed</i> resource.<br/>\n                A <i>managed</i> resource is initialized through a <code>with</code> clause followed\n                by <code>do</code> and a list of statements.<br/>\n                The resource is said to be <i>managed</i> because Prompto will take care of resource cleanup when it\n                exits\n                the statements controlled by the <code>with</code> clause.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} lines={10} sampleUrl=\"samples/statements/write-managed.pec\" runnable={true}/>\n            <br/>\n            <p>It is illegal to call <code>write</code> or <code>read</code> on a resource which is\n                neither <i>managed</i> nor <i>inlined</i>.</p>\n\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}