{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/Comments.js\";\nimport React from 'react';\nimport Topic from \"../../content/Topic\";\nimport PromptoPlayer from \"../../player/PromptoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Comments\");\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto supports comments in the form of line comments.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 71\n        }, this), \"A line comment is a line of text starting by \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`//`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 62\n        }, this), \" in E and O dialects, or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"#\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 116\n        }, this), \" in M dialect.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 25\n        }, this), \"Prompto code is ususally not stored in files, so a comment cannot be attached to a file location. Instead, a comment is always attached to the next non-comment line of code.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 92\n        }, this), \"In the below example, the line comment is attached to the attribute declaration.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/definitions/comment.pec\"\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prompto does not support inline comments \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: String.raw`/* ... */`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 57\n        }, this), \", because it would be impossible to place them when translating code from one dialect to another.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 112\n        }, this), \"For the same reason, Prompto does not support end of line comments, such as: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"a = 2 \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: String.raw`// assign 2 to a`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 106\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 94\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 151\n        }, this), \"The O dialect ignores line breaks, while the E and M dialects don't, so they would dangle around when translated.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/Comments.js"],"names":["React","Topic","PromptoPlayer","ThisTopic","constructor","renderContent","topicSelected","String","raw","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAE1BG,EAAAA,WAAW,GAAG;AACV,UAAM,UAAN;AACH;;AAEDC,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAA,2FAA0D;AAAA;AAAA;AAAA;AAAA,gBAA1D,gEACiD;AAAA,oBAAOC,MAAM,CAACC,GAAI;AAAlB;AAAA;AAAA;AAAA;AAAA,gBADjD,4CACuG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADvG,iCAEY;AAAA;AAAA;AAAA;AAAA,gBAFZ,gMAI+E;AAAA;AAAA;AAAA;AAAA,gBAJ/E;AAAA;AAAA;AAAA;AAAA;AAAA,cAHG,eAUH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC;AAAvD,SAAoBN,aAAa,CAACO,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAVG,eAYH;AAAA;AAAA;AAAA;AAAA,cAZG,eAaH;AAAA,6EAA4C;AAAA,oBAAOF,MAAM,CAACC,GAAI;AAAlB;AAAA;AAAA;AAAA;AAAA,gBAA5C,oHACmG;AAAA;AAAA;AAAA;AAAA,gBADnG,gGAEiF;AAAA,4CAAY;AAAA,sBAAID,MAAM,CAACC,GAAI;AAAf;AAAA;AAAA;AAAA;AAAA,kBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFjF,oBAE0I;AAAA;AAAA;AAAA;AAAA,gBAF1I;AAAA;AAAA;AAAA;AAAA;AAAA,cAbG;AAAA,oBAAP;AAoBH;;AA3ByB;;AA+B9B,eAAe,IAAIL,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Topic from \"../../content/Topic\";\nimport PromptoPlayer from \"../../player/PromptoPlayer\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Comments\");\n    }\n\n    renderContent(topicSelected) {\n        return <>\n            <h2>Comments</h2>\n\n            <p>Prompto supports comments in the form of line comments.<br/>\n                A line comment is a line of text starting by <code>{String.raw`//`}</code> in E and O dialects, or <code>#</code> in M\n                dialect.<br/>\n                Prompto code is ususally not stored in files, so a comment cannot be attached to a file location.\n                Instead, a comment is always attached to the next non-comment line of code.<br/>\n                In the below example, the line comment is attached to the attribute declaration.\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/definitions/comment.pec\"/>\n\n            <br/>\n            <p>Prompto does not support inline comments <code>{String.raw`/* ... */`}</code>,\n                because it would be impossible to place them when translating code from one dialect to another.<br/>\n                For the same reason, Prompto does not support end of line comments, such as: <code>a = 2 <i>{String.raw`// assign 2 to a`}</i></code>.<br/>\n                The O dialect ignores line breaks, while the E and M dialects don't, so they would dangle around when\n                translated.\n            </p>\n            </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}