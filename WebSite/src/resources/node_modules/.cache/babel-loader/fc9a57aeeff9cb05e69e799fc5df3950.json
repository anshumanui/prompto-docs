{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/errors/Errors.js\";\nimport React from 'react';\nimport Syntax from \"./Syntax\";\nimport BuiltIn from \"./BuiltIn\";\nimport Custom from \"./Custom\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThisTopic extends Topic {\n  constructor() {\n    super(\"Errors\", [Syntax, BuiltIn, Custom]);\n  }\n\n  renderContent(topicSelected) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error handling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Error handling is critical to perception of quality. Even is your application code is correct, it may generate errors. These errors may emanate from hardware (disk, network, memory), from middleware (credentials, service down), or from your application itself if your code meets undesirable situations and raises corresponding user defined errors.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Prompto implements error handling using a try/fail mechanism. Here is an example:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PromptoPlayer, {\n        sampleUrl: \"samples/errors/example.pec\",\n        runnable: true\n      }, PromptoPlayer.nextKey(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"In the above example, we try to perform an illegal operation (divide by zero). Without precaution, this error would simply force the application to abruptly exit. To avoid this, we \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"protect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 35\n        }, this), \" the potential error by wrapping our code inside a try/fail block.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default new ThisTopic();","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/prompto-docs/WebSite/src/resources/src/components/reference/topics/errors/Errors.js"],"names":["React","Syntax","BuiltIn","Custom","PromptoPlayer","Topic","ThisTopic","constructor","renderContent","topicSelected","nextKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAE1BE,EAAAA,WAAW,GAAG;AACV,UAAM,QAAN,EAAgB,CAAEN,MAAF,EAAUC,OAAV,EAAmBC,MAAnB,CAAhB;AACH;;AAEDK,EAAAA,aAAa,CAACC,aAAD,EAAgB;AACzB,wBAAO;AAAA,8BAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG,eAWH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXG,eAaH,QAAC,aAAD;AAA6C,QAAA,SAAS,EAAC,4BAAvD;AAAoF,QAAA,QAAQ,EAAE;AAA9F,SAAoBL,aAAa,CAACM,OAAd,EAApB;AAAA;AAAA;AAAA;AAAA,cAbG,eAcH;AAAA,yNAEsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAdG;AAAA,oBAAP;AAkBH;;AAzByB;;AA6B9B,eAAe,IAAIJ,SAAJ,EAAf","sourcesContent":["import React from 'react';\nimport Syntax from \"./Syntax\";\nimport BuiltIn from \"./BuiltIn\";\nimport Custom from \"./Custom\";\nimport PromptoPlayer from \"../../../player/PromptoPlayer\";\nimport Topic from \"../../../content/Topic\";\n\nclass ThisTopic extends Topic {\n\n    constructor() {\n        super(\"Errors\", [ Syntax, BuiltIn, Custom ]);\n    }\n\n    renderContent(topicSelected) {\n        return <>\n\n            <h2>Error handling</h2>\n\n            <p>Error handling is critical to perception of quality. Even is your application code is correct, it may\n                generate errors.\n                These errors may emanate from hardware (disk, network, memory), from middleware (credentials, service down),\n                or from your application itself if your code meets undesirable situations and raises corresponding user\n                defined errors.\n            </p>\n\n            <p>Prompto implements error handling using a try/fail mechanism. Here is an example:\n            </p>\n            <PromptoPlayer key={PromptoPlayer.nextKey()} sampleUrl=\"samples/errors/example.pec\" runnable={true}/>\n            <p>In the above example, we try to perform an illegal operation (divide by zero).\n                Without precaution, this error would simply force the application to abruptly exit.\n                To avoid this, we <i>protect</i> the potential error by wrapping our code inside a try/fail block.</p>\n        </>;\n    }\n\n}\n\nexport default new ThisTopic();"]},"metadata":{},"sourceType":"module"}